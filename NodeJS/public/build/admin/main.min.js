var languageJs = (function(){
	return {
		vi:{
			MESSAGE: 'Thông báo!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm.',

			MENU_HOME: 'Trang chủ',
			MENU_ABOUT: 'Giới thiệu',
			MENU_CONTACT: 'Liên hệ',
			MENU_LANGUAGE: 'Ngôn ngữ',

			DT_SUNDAY: 'Cn',
			DT_MONDAY: 'Hai',
			DT_TUESDAY: 'Ba',
			DT_WEDNESDAY: 'Tư',
			DT_THURSDAY: 'Năm',
			DT_FRIDAY: 'Sáu',
			DT_SATURDAY: 'Bảy',

			DT_JANUARY: 'Tháng 1',
			DT_FEBRUARY: 'Tháng 2',
			DT_MARCH: 'Tháng 3',
			DT_APRIL: 'Tháng 4',
			DT_MAY: 'Tháng 5',
			DT_JUNE: 'Tháng 6',
			DT_JULY: 'Tháng 7',
			DT_AUGUST: 'Tháng 8',
			DT_SEPTEMBER: 'Tháng 9',
			DT_OCTOBER: 'Tháng 10',
			DT_NOVEMBER: 'Tháng 11',
			DT_DECEMBER: 'Tháng 12'
		},
		en:{
			MESSAGE: 'Infomation!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm EN.',

			MENU_HOME: 'Home',
			MENU_ABOUT: 'About',
			MENU_CONTACT: 'Contact',
			MENU_LANGUAGE: 'Languages',

			DT_SUNDAY: 'Sun',
			DT_MONDAY: 'Mon',
			DT_TUESDAY: 'Tue',
			DT_WEDNESDAY: 'Wed',
			DT_THURSDAY: 'Thu',
			DT_FRIDAY: 'Fri',
			DT_SATURDAY: 'Sat',

			DT_JANUARY: 'Jan',
			DT_FEBRUARY: 'Feb',
			DT_MARCH: 'Mar',
			DT_APRIL: 'Apr',
			DT_MAY: 'May',
			DT_JUNE: 'Jun',
			DT_JULY: 'Jul',
			DT_AUGUST: 'Aug',
			DT_SEPTEMBER: 'Sep',
			DT_OCTOBER: 'Otc',
			DT_NOVEMBER: 'Nov',
			DT_DECEMBER: 'Dec'
		}
	};
})();
/***************************************************
Description: Site configs
****************************************************/
var settingJs = (function () {
	'use strict';

	var currentDate = new Date(),
		// endDate = new Date(2017,0,1,23,59,59),
		host = window.location.host,
		configs = {
			facebookAppId: settings.facebookId,
			appPrefix: 'Muahangviet',
			webUrl: settings.services.webUrl,
			apiUrl: settings.services.apiUrl,
			socketUrl: settings.services.socketApi,
			adminUrl: settings.services.admin,
			userApiUrl: settings.services.apiUrl,
			logApiUrl: settings.services.logApi,
			uploadApiUrl: settings.services.uploadApi,
			uploadDirectory: {
				general: '/files/',
				category: '/files/category_image/',
				product: '/files/product_image/',
				certificate: '/files/certificate_image/',
				blog: '/files/blog_image/',
				banner: '/files/banner_image/',
				thumb: '/files/thumb_image/',
				thumb_product: '/files/thumb_image/product_image/',
				tmp: '/files/tmp/',
				media_old: '/files/media_old/',
				media_old_product: '/files/media_old/product/'
			}
		};

	return {
		configs: configs,
		appPrefix: configs.appPrefix,
		storageExpireTime: undefined,
		// baseUrl: configs.baseUrl,
		// baseUrlDb: configs.baseUrlDb,
		// hostSubFolder: '/',
		// apiVersion: '',
		// language: 'vi',
		// routers: [],
		// reloadPageOnStateChange: false,
		// enabledHtml5Mode: false,
		// animationDelay: 0,
		// pageTransitionSequence: [
		// {stateName:'home', transition:'0,0'},
		// {stateName:'about', transition:'0,0'},
		// {stateName:'contact', transition:'0,0'}
		// ],
		// pageTransitionLoop: true,
		// pageTransitionDelay: 1500,
		// pageVisibleCount: 5,
		// preloadResource: [
		// ],
		// stopCampaign: currentDate > endDate,
		// facebook: {
		// 	appId: configs.facebookAppId,
		// 	version: 'v2.5',
		// 	permissions: 'email',
		// 	cookie: true,
		// 	xfbml: true,
		// 	language: 'vi_VN',
		// 	redirect: configs.baseUrl
		// },
		// google: {
		// 	api:{
		// 		apiKey: configs.googleApiKey,
		// 		clientId: configs.googleApiClientId,
		// 		scope: [
		// 		'https://www.googleapis.com/auth/plus.login'
		// 		]
		// 	},
		// 	ga: {
		// 		ids: configs.googleAnalyticIds
		// 	}
		// },
		// admin: {
		// 	itemPerPage: '20',
		// 	routers: []
		// },
		// roles: {
		// 	ALL: '*',
		// 	ADMIN: 'admin',
		// 	EDITOR: 'editor',
		// 	REGISTER: 'register',
		// 	GUEST: 'guest'
		// }
	}
})();
var DateTime = (function(){
	'use strict';

	return {
		dayCount: dayCount,                                 // Đếm số ngày giữa 2 mốc thời gian
        monthCount: monthCount,                             // Đếm số tháng giữa 2 mốc thời gian
        dateBetween: dateBetween,                           // Kiểm tra ngày có thuộc giữ 2 mốc thời gian
        dateContain: dateContain,                           // Kiểm tra ngày có nằm trong mảng ngày
        // dateInfo: dateInfo,                                 // Lấy thông tin ngày (Thứ, ngày, tháng, năm...)
        // timestampToDate: timestampToDate,                   // Chuyển đổi timestamp sang Date()
        dateToTimestamp: dateToTimestamp,                   // Chuyển đổi Date() sang timestamp
        isoDateToDate: isoDateToDate,                       // Chuyển đổi ISODate sang Date()
        daysInMonth: daysInMonth,                           // Lấy số ngày của tháng
        getAge: getAge                                      // Lấy số tuổi
    };

    function dayCount(date1, date2) {
    	var oneDay = 1000 * 60 * 60 * 24;
    	return Math.round((date2.getTime() - date1.getTime()) / oneDay);
    }

    function monthCount(date1, date2) {
    	return (date1.getMonth()) - (date2.getMonth()) + (12 * (date1.getFullYear() - date2.getFullYear())) + 1;
    }

    function dateBetween(date, startDate, endDate) {
    	return date >= startDate && date <= endDate;
    }

    function dateContain(date, dateArray) {
    	var result = dateArray.filter(function(value){
    		return new Date(value).toDateString() === date.toDateString();
    	});
    	return result.length !== 0;
    }

    // function dateInfo(date, lang) {
    //     var lang = lang || 'en';
    //     var dateNameArr = [
    //     languageJs[lang].DT_SUNDAY,
    //     languageJs[lang].DT_MONDAY,
    //     languageJs[lang].DT_TUESDAY,
    //     languageJs[lang].DT_WEDNESDAY,
    //     languageJs[lang].DT_THURSDAY,
    //     languageJs[lang].DT_FRIDAY,
    //     languageJs[lang].DT_SATURDAY
    //     ];
    //     var monthNameArr = [
    //     languageJs[lang].DT_JAN,
    //     languageJs[lang].DT_JANUARY,
    //     languageJs[lang].DT_FEBRUARY,
    //     languageJs[lang].DT_MARCH,
    //     languageJs[lang].DT_APRIL,
    //     languageJs[lang].DT_MAY,
    //     languageJs[lang].DT_JUNE,
    //     languageJs[lang].DT_JULY,
    //     languageJs[lang].DT_AUGUST,
    //     languageJs[lang].DT_SEPTEMBER,
    //     languageJs[lang].DT_OCTOBER,
    //     languageJs[lang].DT_NOVEMBER,
    //     languageJs[lang].DT_DECEMBER
    //     ];
    //     var dayOfWeek = date.getDay();
    //     var day = date.getDate();
    //     var month = date.getMonth();
    //     var year = date.getFullYear();
    //     var hours = date.getHours();
    //     var minutes = date.getMinutes();
    //     var seconds = date.getSeconds();
    //     var dayName = dateNameArr[dayOfWeek];
    //     var monthName = monthNameArr[month];

    //     return {
    //         day: day,
    //         month: parseInt(month + 1),
    //         year: year,
    //         hours: hours,
    //         minutes: minutes,
    //         seconds: seconds,
    //         dateString: (day < 10 ? '0' + day : day) + '/' + (parseInt(month + 1) < 10 ? '0' + parseInt(month + 1) : parseInt(month + 1)) + '/' + year,
    //         timeString: (hours < 10 ? '0' + hours : hours) + ':' + (minutes < 10 ? '0' + minutes : minutes),
    //         dayName: dayName,
    //         monthName: monthName,
    //         dayCount: dayCount(date, new Date())
    //     }
    // }

    // function timestampToDate(timestamp){
    //     var date = new Date(timestamp * 1000);
    //     return dateInfo(date);
    // }

    function dateToTimestamp(date){
        return date.getTime() / 1000;
    }

    function isoDateToDate(isoString){
    	var dtstr = isoString;
    	dtstr = dtstr.replace(/\D/g,' ');
    	var arr = dtstr.split(' ');
    	arr[1]--;
    	var result = new Date(Date.UTC(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5]));
    	return result;
    }

    function daysInMonth(month){
    	var date = new Date();
    	return new Date(date.getFullYear(), month, 0).getDate();
    }

    function getAge(birthday) {
    	var today = new Date();
    	var thisYear = 0;
    	if (today.getMonth() < birthday.getMonth()) {
    		thisYear = 1;
    	} else if ((today.getMonth() == birthday.getMonth()) && today.getDate() < birthday.getDate()) {
    		thisYear = 1;
    	}
    	var age = today.getFullYear() - birthday.getFullYear() - thisYear;
    	return age;
    }
})();
/***************************************************
Description: Excel
****************************************************/
var ExcelJs = (function() {
    'use strict';
    return {
        exportExcel: exportExcel,       // Xuất Excel
        testExcel: testExcel,       // Xuất Excel test
    };

    function testExcel(){
        /* original data */
        var data = [
        [1,2,3,0.5,7],
        [true, false, null, "sheetjs"],
        ["foo","bar",new Date("2014-02-19T14:30Z"), "0.3"], 
        ["baz", null, "qux"]
        ];

        var options = {
            type: 'xlsx',
            sheetName: 'SheetJS1',
            fileName: 'dl',
        };
        exportExcel(data, options);
    }

    function exportExcel(data, options){
        options = {
            type: options.type || "xlsx",
            sheetName: options.sheetName || "SheetJS",
            fileName: options.fileName || "test",
        };

        var ws_name = options.sheetName;
        var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
        /* add worksheet to workbook */
        wb.SheetNames.push(ws_name);
        wb.Sheets[ws_name] = ws;
        var wopts = { bookType:options.type, bookSST:false, type:'binary' };
        /* write file */
        var wbout = XLSX.write(wb, wopts);

        /* the saveAs call downloads a file on the local machine */
        saveAs(new Blob([s2ab(wbout)],{type:""}), options.fileName+'.'+options.type)
    }

    function datenum(v, date1904) {
        if(date1904) v+=1462;
        var epoch = Date.parse(v);
        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }

    function sheet_from_array_of_arrays(data, opts) {
        var ws = {};
        var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
        for(var R = 0; R != data.length; ++R) {
            for(var C = 0; C != data[R].length; ++C) {
                if(range.s.r > R) range.s.r = R;
                if(range.s.c > C) range.s.c = C;
                if(range.e.r < R) range.e.r = R;
                if(range.e.c < C) range.e.c = C;
                var cell = {v: data[R][C] };
                if(cell.v == null) continue;
                var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

                if(typeof cell.v === 'number') cell.t = 'n';
                else if(typeof cell.v === 'boolean') cell.t = 'b';
                else if(cell.v instanceof Date) {
                    cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                    cell.v = datenum(cell.v);
                }
                else cell.t = 's';

                ws[cell_ref] = cell;
            }
        }
        if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
        return ws;
    }

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
    }

    function Workbook() {
        if(!(this instanceof Workbook)) return new Workbook();
        this.SheetNames = [];
        this.Sheets = {};
    }

})();
/***************************************************
Description: Helpers
****************************************************/
var helperJs = (function() {
    'use strict';
    return {
        detectScrollDirection: detectScrollDirection,       // Bắt sự kiện scroll lên hoặc scroll xuống
        clearFileInput: clearFileInput,                     // Xóa nội dung input["file"]
        isUndefinedNullEmpty: isUndefinedNullEmpty,         // Kiểm tra dữ liệu
        getQueryString: getQueryString,                     // Lấy tham số trên URL
        formatMoney: formatMoney,                           // Định dạng đơn vị tiền tệ
        enterFullScreen: enterFullScreen,                   // Bật chế độ xem toàn màn hình
        exitFullScreen: exitFullScreen,                     // Tắt chế độ xem toàn màn hình
        debounce: debounce,                                 // Trì hoãn thực thi hàm khi hoàn thành thao tác
        throttle: throttle,                                 // Trì hoãn thực thi hàm theo thời gian cố định
        hexToRgb: hexToRgb,                                 // Chuyển đổi màu sắc Hex sang RGBA
        preloader: preloader,                               // Các tài nguyên sẽ được tải trước
        scrollToElement: scrollToElement,                   // Tự động cuộn tới đối tượng chỉ định
        scrollToTop: scrollToTop,                           // Tự động cuộn lên trên
        randomRangeFloat: randomRangeFloat,                 // Tạo số thực ngẫu nhiên
        randomRangeInt: randomRangeInt,                     // Tạo số nguyên ngẫu nhiên
        extend: extend ,                                    // Kế thừa đối tượng
        findObject: findObject ,                            // Tìm đối tượng trong mảng đối tượng
    };

    function findObject(field, value, array){
        function findCherries(fruit) { 
            return fruit[field] === value;
        }

        return array.find(findCherries);
    }

    function detectScrollDirection(){
        var previousScroll = 0;

        $(window).on('scroll', function(event) {
            var currentScroll = $(this).scrollTop();
            if (currentScroll > previousScroll){
                console.log('down');
            } else {
                console.log('up');
            }
            previousScroll = currentScroll;
        });
    }


    function clearFileInput(obj) {
        obj.replaceWith(obj.val('').clone(true));
    }

    function isUndefinedNullEmpty(data) {
        var output = true;
        if(!isNaN(data)){
            output = false;
        } else if(data === null || data === undefined){
            output = true;
        } else {
            for(var key in data) {
                if(data.hasOwnProperty(key)){
                    output = false;
                }
            }
        }
        return output;
    }
    /******************************************************************
    1. Array
    2. Image
    3. Markup
    *******************************************************************/

    function getQueryString(url, name) {
        var a = name.replace(/[\[]/, '\\\[').replace(/[\]]/, '\\\]');
        var regexS = '[\\?&]' + a + '=([^&#]*)';
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (results === null) return '';
        else return decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    function formatMoney(number, places, symbol, thousand, decimal) {
        number = number || 0;
        places = !isNaN(places = Math.abs(places)) ? places : 0;
        symbol = symbol !== undefined ? symbol : '';
        thousand = thousand || '.';
        decimal = decimal || ',';
        var negative = number < 0 ? '-' : '',
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + '',
        j = (j = i.length) > 3 ? j % 3 : 0;
        return symbol + negative + (j ? i.substr(0, j) + thousand : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : '');
    }

    function enterFullScreen(element) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    }

    function exitFullScreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }

    function debounce(fn, ms) {
        var timer = null;
        return function() {
            var context = this,
            args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function() {
                fn.apply(context, args);
            }, ms);
        };
    }

    function throttle(fn, ms, scope) {
        ms || (ms = 250);
        var last,
        deferTimer;
        return function () {
            var context = scope || this;

            var now = +new Date,
            args = arguments;
            if (last && now < last + ms) {
                clearTimeout(deferTimer);
                deferTimer = setTimeout(function () {
                    last = now;
                    fn.apply(context, args);
                }, ms);
            } else {
                last = now;
                fn.apply(context, args);
            }
        };
    }

    function hexToRgb(hex, opacity){
        var h = hex.replace('#', '');
        h =  h.match(new RegExp('(.{'+h.length/3+'})', 'g'));

        for(var i=0; i<h.length; i++){
            h[i] = parseInt(h[i].length==1? h[i]+h[i]:h[i], 16);
        }

        if (typeof opacity != 'undefined') {
            h.push(opacity);
        }

        return 'rgba('+h.join(',')+')';
    }

    function preloader(fileList, callback){
        var loaded = 0;
        var len = fileList.length;
        if(len){
            for (var i = 0; i < len; i++) {
                var img = new Image();
                img.src = fileList[i];
                img.onload = function(event){
                    check(len);
                    console.info('File loaded: ', event.target.currentSrc);
                };

                img.onerror = function(event){
                    check(len);
                    console.info('Cannot load file: ', event.target.currentSrc);
                };
            };
        } else {
            complete();
        }

        function check(count){
            loaded++;
            if(loaded === count){
                complete();
            }
        }

        function complete(){
            if(typeof callback === 'function'){
                callback();
            }
        }
    }

    function scrollToElement(selector, time, verticalOffset) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        verticalOffset = typeof(verticalOffset) !== 'undefined' ? verticalOffset : 0;
        var offset = $(selector).offset();
        var offsetTop = offset.top + verticalOffset;
        $('html,body').animate({ scrollTop: offsetTop }, time);
    }

    function scrollToTop(time) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        $('html,body').animate({ scrollTop: 0 }, time);
    }

    function randomRangeFloat(min, max) {
        return Math.random() * (max - min + 1) + min;
    }

    function randomRangeInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function extend(a, b){
        for(var key in b){
            if(b.hasOwnProperty(key)){
                a[key] = b[key];
            }
        }
        return a;
    }
})();
(function() {
    'use strict';
    $.fn.bzAccordion = function(autoCollapse, expandFirstItem) {
        var $accord = this.find('.item');
        if (expandFirstItem) {
            $accord.first().find('.question').addClass('expanded');
            $accord.first().find('.answer').show();
        }
        $accord.find('.question').click(function() {
            if ($(this).hasClass('expanded')) {
                $(this).removeClass('expanded');
                $(this).parent().find('.answer').slideUp(200);
            } else {
                if (autoCollapse) {
                    $.each($accord.find('.question'), function(i, o) {
                        $(o).removeClass('expanded');
                        $(o).parent().find('.answer').slideUp(200);
                    });
                }
                $(this).addClass('expanded');
                $(this).parent().find('.answer').slideDown(200);
            }
        });
    };
})();
(function() {
    'use strict';

    /******************************************************************
    Array
    *******************************************************************/
    Array.prototype.getIndexBy = function(name, value) {
        for (var i = 0; i < this.length; i++) {
            if (this[i][name] == value) {
                return i;
            }
        }
        return -1;
    };

    Array.prototype.removeAt = function(index) {
        var b = this.splice(index, 1);
        return b;
    };
    /******************************************************************
    String
    *******************************************************************/
    String.prototype.format = function() {
        var args = arguments;
        return this.replace(/\{\{|\}\}|\{(\d+)\}/g, function(m, n) {
            if (m == '{{') {
                return '{';
            }
            if (m == '}}') {
                return '}';
            }
            return args[n];
        });
    };

    String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
})();



/***************************************************
Description: Sort algorithms
****************************************************/
var sortJs = (function(){

    return {
        bubble: bubbleSort,
        quick: quickSort,
        merge: mergeSort,
        selection: selectionSort,
        insertion: insertionSort
    };

    function bubbleSort(arr) {
        if (arr.length <= 1) return arr;
        var alen = arr.length;
        for (var i = 0; i < alen; i++) {
            for (var j = 0; j < alen - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    var temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    function quickSort(arr) {
        if (arr.length <= 1) return arr;
        var pivot = Math.floor((arr.length - 1) / 2),
        pivotValue = arr[pivot],
        left = [],
        right = [];
        arr = arr.slice(0, pivot).concat(arr.slice(pivot + 1));
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] < pivotValue) {
                left.push(arr[i]);
            } else {
                right.push(arr[i]);
            }
        }
        return [].concat(quickSort(left), [pivotValue], quickSort(right));
    }

    function mergeSort(arr) {
        if (arr.length <= 1) return arr;
        var mid = Math.floor(arr.length / 2),
        left = arr.slice(0, mid),
        right = arr.slice(mid);

        var merge = function merge(left, right){
            var result = [];
            while (left.length && right.length) {
                if (left[0] < right[0]) {
                    result.push(left.shift());
                } else {
                    result.push(right.shift());
                }
            }
            return result.concat(left).concat(right);
        };
        return merge(mergeSort(left), mergeSort(right));
    }

    function selectionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var min = i;
            for (var j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[min]) {
                    min = j;
                }
            }
            if (min != i) {
                var temp = arr[min];
                arr[min] = arr[i];
                arr[i] = temp;
            }
        }
        return arr;
    }

    function insertionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var j = i - 1,
            temp = arr[i];
            while (j >= 0 && arr[j] > temp) {
                arr[j + 1] = arr[j];
                arr[j] = temp;
                j--;
            }
        }
        return arr;
    }
})();
var Storage = (function() {
	'use strict';
	return {
		get: get,
		set: set,
		remove: remove,
		clear: clear
	};

	function get(name) {
		var date = new Date(),
		current = Math.round(+date / 1000),
		storedData = JSON.parse(localStorage.getItem(settingJs.appPrefix + '.' + name)) || {},
		storedTime = storedData.storageExpireTime || 0;

		if (storedTime && storedTime < current) {
			remove(settingJs.appPrefix + '.' + name);
			return undefined;
		} else {
			return storedData.store;
		}
	}

	function set(name, value, seconds) {
		var date = new Date(),
		schedule = Math.round((date.setSeconds(date.getSeconds() + seconds)) / 1000),
		data = JSON.stringify({storageExpireTime: schedule, store: value});
		try {
			localStorage.setItem(settingJs.appPrefix + '.' + name, data);
		} catch (e) {
			if (e == QUOTA_EXCEEDED_ERR) {
				alert('Quota exceeded!');
			}
		}

		return data;
	}

	function remove(name) {
		localStorage.removeItem(settingJs.appPrefix + '.' + name);
	}

	function clear() {
		localStorage.clear();
	}
})();
var Application = (function () {
    'use strict';

    var appName = 'bzApp';
    var appDependencies = [
        'ui.bootstrap',
        'ngSanitize',
        'ngAnimate',
        'ngMessages',
        'ngResource',
        'ui.router',
        'toastr',
        'ngPopup',
        'daterangepicker',
        'angularjs-datetime-picker',
        'ngTable',
        'ngFileUpload',
        'ui.select2',
        'ckeditor',
    ];
    var routers = [];

    angular
        .module(appName, appDependencies)
        .provider('routerHelper', routerHelperProvider)
        .config(config)
        .run(run);

    angular.element(document).ready(function () {
        //Facebook SDK
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        angular.bootstrap(document, [appName]);
    });

    function registerModule(name) {
        angular.module(appName).requires.push(name);
    }

    function registerRouter(router) {
        routers.push(router);
    }

    function routerHelperProvider($stateProvider, $urlRouterProvider) {
        this.$get = RouterHelper;

        function RouterHelper($state) {
            var hasOtherwise = false;

            return {
                configureStates: configureStates,
                getStates: getStates
            };

            function configureStates(states, otherwisePath) {
                states.forEach(function (state) {
                    state.config.params = state.config.params || {};
                    $stateProvider.state(state.state, state.config);
                });
                if (otherwisePath && !hasOtherwise) {
                    hasOtherwise = true;
                    $urlRouterProvider.otherwise(otherwisePath);
                }
            }

            function getStates() {
                return $state.get();
            }
        }
    }

    function config(
        $qProvider,
        $httpProvider,
        $locationProvider,
        $bzPopupProvider,
        toastrConfig,
        $interpolateProvider,
        $resourceProvider
    ) {
        /*fix error (Possibly unhandled rejection) angular > 1.5.5*/
        $qProvider.errorOnUnhandledRejections(false);

        $bzPopupProvider.setMessageTemplate('assets/global/message/view.html');

        angular.extend(toastrConfig, {
            extendedTimeOut: 1000,
            timeOut: 1000,
            newestOnTop: true,
            positionClass: 'toast-bottom-right',
            preventDuplicates: false,
            preventOpenDuplicates: false,
            tapToDismiss: true,
            allowHtml: true,
            closeButton: true,
            target: 'body'
        });

        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');

        // Configs HTML5 API Pushstate
        $locationProvider.html5Mode(false).hashPrefix('!');

        $httpProvider.defaults.withCredentials = true;
        $httpProvider.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8';

        // $resourceProvider.defaults.stripTrailingSlashes = false;
    }

    function run(
        routerHelper,
        $rootScope,
        $window,
        $document,
        $state,
        $timeout,
        authSvc,
        notiSvc) {

        //Init Facebook
        window.fbAsyncInit = function () {
            FB.init({
                appId: settingJs.configs.facebookAppId,
                status: true,
                xfbml: true,
                version: 'v2.9'
            });
        };

        routerHelper.configureStates(routers, '/');

        angular.element('body').removeClass('hide');

        $rootScope._ = window._;
        // $rootScope.socket = io(settingJs.configs.socketUrl);

        // Global variables
        $rootScope.pageData = {};
        // $rootScope.noti = {
        //     dupTotal: 0,
        //     dupCSale: 0,
        //     dupCEviction: 0
        // };

        // Global methods
        $rootScope.pageMethods = {};
        $rootScope.pageMethods.authSvc = authSvc;
        $rootScope.pageMethods.redirect = redirect;

        /*Sự kiện khi muốn update noti*/
        // $rootScope.$on('angular-changeNoti', function(data){
        //     console.log('oopp');
        //     $rootScope.socket.emit('socket-postNoti',{_sale_usermember: authSvc.getProfile().id});
        // });

        /*Khởi tạo socket noti*/
        // $rootScope.socket.emit('socket-postNoti',{_sale_usermember: authSvc.getProfile().id});
        // $rootScope.socket.on('socket-getNoti', function(data){
        //     $rootScope.noti = data;
        //     $rootScope.$apply();
        //     console.log('ppp',$rootScope.noti);
        // });

        /*Sự kiện trạng thái state*/
        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
            $rootScope.pageData.title = toState.data.title;
            $rootScope.pageData.className = toState.name;
            $rootScope.pageData.menuType = toState.data.menuType;

            /*Update lại thông báo*/
            // $timeout(function(){
            //     notiSvc.getDupContact().then(function(resp){
            //         $rootScope.noti = resp;
            //     });
            // },2000);
        });

        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
            $window.scrollTop = $document[0].body.scrollTop = $document[0].documentElement.scrollTop = 0;

            $rootScope.pageData.currentState = toState;
            $rootScope.pageData.currentParams = toParams;
        });

        function redirect(state, params, notify) {
            $state.go(state, params, notify);
        }

        // Khuyến mãi cho order giao vào buổi chiều
        $rootScope.promotionForOrderDeleveryOnAffternoon = {
            value: 0,
            status: false,
            type: "PC"
        }

        // khuyến mãi cho đơn hàng đầu tiên
        $rootScope.promotionForFirstOrder = {
            value: 0,
            status: false,
            type: "PC"
        };

        $rootScope.freeShipUrban = {
            value: 999999999,
            status: false,
            type: "MN"
        }; // Nội thành
        $rootScope.freeShipSuburb = {
            value: 999999999,
            status: false,
            type: "MN"
        }; // Ngoại thành


    }

    return {
        registerModule: registerModule,
        registerRouter: registerRouter
    };
})();


(function () {
    'use strict';

    angular
        .module('bzApp')
        .service('bzUtilsSvc', bzUtilsSvc)
        .service('bzResourceSvc', bzResourceSvc)
        .factory('bzPreloadSvc', bzPreloadSvc)
        .service('authSvc', authSvc)
        .service('notiSvc', notiSvc)
        .factory('userApiFac', userApiFac)
        .service('orderApiSvc', orderApiSvc)
        .service('bzUpload', bzUpload);

    function orderApiSvc($q, $window, $rootScope, bzResourceSvc) {
        return {
            getCart: getCart,
            update: update,
        }
        /**
         * Update product
         * @param {*} type enum: 'add-product' || 'set-quantity' || 'delete-product' || 'delete-cart'
         * @param {*} data custom by type: {product: id_product, quantity: number || string}
         */
        function update(type, data) {
            var defer = $q.defer();
            if (type === 'add-product')
                return addProduct(data.product, data.quantity);

            if (type === 'set-quantity')
                return setQuantity(data.product, data.quantity);

            if (type === 'delete-product')
                return deleteProduct(data.product);

            if (type === 'delete-cart')
                return deleteCart();

            defer.reject('Type mismach');
            return defer.promise;
        }

        function getCart() {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/cart')
                .get({}, function (resp) {
                    $rootScope.Cart = resp.cart;
                    $rootScope.$broadcast('Cart:getCart', resp.cart);
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function deleteCart() {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/delete-cart')
                .get({}, function (resp) {
                    $rootScope.Cart = { items: [], total: 0 };
                    $rootScope.$broadcast('Cart:getCart', resp.cart);
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function deleteProduct(product) {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/delete-product/' + product)
                .get({}, function (resp) {
                    $rootScope.Cart = resp.cart;
                    $rootScope.$broadcast('Cart:getCart', resp.cart);
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function setQuantity(product, new_quantity) {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/set-quantity/' + product + '/' + new_quantity)
                .get({}, function (resp) {
                    if (resp.success) {
                        $rootScope.Cart = resp.cart;
                        $rootScope.$broadcast('Cart:getCart', resp.cart);
                    }
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function addProduct(product, quantity) {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.userApiUrl + '/order/' + product + '/' + quantity)
                .get({}, function (resp) {
                    if (resp.success) {
                        $rootScope.Cart = resp.cart;
                        $rootScope.$broadcast('Cart:getCart', resp.cart);
                    }
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

    }
    function userApiFac($window, bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.userApiUrl + '/user/:method/:id', { method: '@method', id: '@id' });
    }

    function bzUpload($q, bzResourceSvc) {
        return {
            uploadBase64: uploadBase64
        };
        function uploadBase64(data) {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.userApiUrl + '/upload/base64')
                .save(data, function (resp) {
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });

            return defer.promise;
        }
    }

    function notiSvc($q, bzResourceSvc) {
        return {
            getDupContact: getDupContact,
        };

        function getDupContact() {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.adminUrl + '/noti-dup-contact')
                .get({}, {}, function (resp) {
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });

            return defer.promise;
        }
    }

    function authSvc($uibModal, $q, $window, userApiFac, bzResourceSvc) {
        $window.user = $window.user || {};

        return {
            /*Role*/
            isSuperAdmin: isSuperAdmin,
            isAdmin: isAdmin,
            hasPermission: hasPermission,
            // isSale: isSale,
            // isSaleManager: isSaleManager,
            exist: exist,
            /* */
            register: register,
            /*Info*/
            getProfile: getProfile,
            setProfile: setProfile,
            isSignedIn: isSignedIn,
            siteLogin: siteLogin,
            siteLogout: siteLogout,
            popLogin: popLogin,
            popRegister: popRegister,
            popForgotPass: popForgotPass,
            popChangePass: popChangePass,
            postChangePass: postChangePass,
            forgotPassword: forgotPassword,
            resetPassword: resetPassword,
            // create    : create,
            update: update,
            /*Facebook*/
            getFacebook: getFacebook,
            facebookLogin: facebookLogin
        };

        /*ROLES*/
        function isSuperAdmin() {
            if (_.intersection($window.user.scope, ['super-admin']).length === 0)
                return false;
            return true;
        }

        function isAdmin() {
            if (_.intersection($window.user.scope, ['admin']).length === 0)
                return false;
            return true;
        }

        function hasPermission(resource, permission) {
            var isString = typeof permission == 'string' ? true : false;
            var permissions = $window.permissions;
            var p = null;

            angular.forEach(permissions, function (value, key) {
                if (key === resource) {
                    p = value;
                }
            });
            if (p) {
                if (p[0] === '*') {
                    // console.log(1);
                    return true;
                }

                if (isString) {
                    if (_.intersection([permission], p).length === 1) {
                        // console.log(2);
                        return true;
                    }
                }

                if (_.intersection(permission, p).length === permission.length) {
                    // console.log(3);
                    return true;
                }

            }
            return false;


        }
        // function isSale(){
        //     $window.user.saleman = $window.user.saleman || {};
        //     if(_.intersection($window.user.scope, ['sale']).length !== 0 && $window.user.saleman.active === true)
        //         return true;
        //     return false;
        // }

        // function isSaleManager(){
        //     $window.user.saleman = $window.user.saleman || {};
        //     if(isSale() && $window.user.saleman.manager === true)
        //         return true;
        //     return false;
        // }

        function exist(roles) {
            return _.intersection($window.user.scope, roles).length > 0;
        }
        /* */
        function register(data) {


            var register = new userApiFac(data);

            return register.$save({ method: 'register' });
        }

        /*INFO*/
        function getProfile() {
            var profileData = $window.user;
            return profileData;
        }

        function setProfile(data) {
            Storage.set(settingJs.appPrefix + 'bzp', data, settingJs.storageExpireTime);
            Storage.set(settingJs.appPrefix + 'bzl', true, settingJs.storageExpireTime);
            return data;
        }

        function isSignedIn() {
            var log = Storage.get(settingJs.appPrefix + 'bzl');
            return log ? true : false;
        }

        function siteLogin(data, successCb, errorCb) {
            var defer = $q.defer();

            bzResourceSvc.api($window.settings.services.apiUrl + '/user/login')
                .save({}, data, function (resp) {
                    setProfile(resp);
                    defer.resolve(resp);
                    if (angular.isFunction(successCb)) {
                        successCb(resp);
                    }
                }, function (err) {
                    defer.reject(err);
                    if (angular.isFunction(errorCb)) {
                        errorCb(err);
                    }
                });

            return defer.promise;
        }

        function siteLogout(callback) {
            var profile = getProfile();
            bzResourceSvc.api($window.settings.services.apiUrl + '/user/logout')
                .save({}, {}, function (resp) {
                    setProfile(undefined);
                    if (angular.isFunction(callback)) {
                        callback(resp);
                    }
                    $window.location.href = settings.services.webUrl;
                });
        }
        function popLogin(urlRedirect) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/login/view.html',
                controller: 'popLoginCtrl',
                controllerAs: 'vmLogin',
            });
            modalInstance.result.then(function (resp) {
                if (!resp) {
                    if (urlRedirect) {
                        $window.location.href = urlRedirect;
                    }
                    else {
                        $window.location.reload();
                    }

                }
                return resp;

            });
        }
        function popRegister() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/register/view.html',
                controller: 'popRegisterCtrl',
                controllerAs: 'vmRegister',
            });
        }
        function popForgotPass() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/forgot-pass/view.html',
                controller: 'popForgotPassCtrl',
                controllerAs: 'vmForgotPass',
            });
        }
        function popChangePass() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'modules/admin-user/view/client/popup/change-pass/view.html',
                controller: 'popChangePassCtrl',
                controllerAs: 'mvCPass',
            });
        }

        function postChangePass(data) {
            var postChangePass = new userApiFac(data);

            return postChangePass.$save({ method: 'change-password' });
        }

        function forgotPassword(data) {
            var forgotPassword = new userApiFac(data);

            return forgotPassword.$save({ method: 'forgot-password' });
        }

        function resetPassword(data) {
            var resetPassword = new userApiFac(data);

            return resetPassword.$save({ method: 'reset-password' });
        }
        // function create(data, id){
        //     var createData = new userFac(data);

        //     return createData.$save({method: 'user'});
        // }

        function update(data, id) {
            var createData = new userApiFac(data);

            return createData.$update({ id: id });
        }

        /*FACEBOOK*/

        function getFacebook() {
            var deferred = $q.defer();
            FB.getLoginStatus(function (response) {
                if (response.status === "connected") {
                    var accessToken = response.authResponse.accessToken;
                    FB.api("/me", { fields: "id,name,email,picture" }, function (response) {
                        // console.log('da login',response);
                        deferred.resolve(response);
                    });
                } else {
                    FB.login(function (response) {
                        if (response.status === 'not_authorized') {
                            deferred.resolve({ error: 'Vui lòng đồng ý sử dụng ứng dụng để đăng nhập tài khoản' });
                        }
                        if (response.status === 'connected') {
                            var accessToken = response.authResponse.accessToken;
                            FB.api("/me", { fields: "id,name,email,picture" }, function (response) {
                                // console.log('moi login',response);
                                deferred.resolve(response);
                            });
                        }
                    }, { scope: "email" });
                }
            });

            return deferred.promise;
        }

        /*
        * Login by Facebook Account function
        */
        function facebookLogin(fbAccount, successCb, errorCb) {
            let defer = $q.defer();
            let data = {
                email: fbAccount.email,
                provider_id: fbAccount.id,
                name: fbAccount.name,
                profile_picture: fbAccount.profile_picture
            };

            bzResourceSvc.api($window.settings.services.userApi + '/user/facebook-login')
                .save({}, data, function (resp) {
                    setProfile(resp);
                    defer.resolve(resp);
                    if (angular.isFunction(successCb)) {
                        successCb(resp);
                    }
                }, function (err) {
                    defer.reject(err);
                    if (angular.isFunction(errorCb)) {
                        errorCb(err);
                    }
                });
            return defer.promise;
        }
    }

    function bzUtilsSvc($bzPopup) {
        return {
            recusive: recusive,
            cropAvatar: cropAvatar,
            findObject: findObject,					// Tìm đối tượng trong mảng đối tượng
            textToSlug: textToSlug,                 // genarator slug
            setLocalStorage: setLocalStorage,
            getLocalStorage: getLocalStorage,
            removeLocalStorage: removeLocalStorage,

            setInfoUser: setInfoUser,
            getInfoUser: getInfoUser,
            removeInfoUser: removeInfoUser,

        };
        function textToSlug(string) {
            if (string) {
                //Đổi chữ hoa thành chữ thường
                var slug = string.toLowerCase();

                //Đổi ký tự có dấu thành không dấu
                slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
                slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
                slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
                slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
                slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
                slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
                slug = slug.replace(/đ/gi, 'd');
                //Xóa các ký tự đặt biệt
                slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
                //Đổi khoảng trắng thành ký tự gạch ngang
                slug = slug.replace(/ /gi, "-");
                //Đổi nhiều ký tự gạch ngang liên tiếp thành 1 ký tự gạch ngang
                //Phòng trường hợp người nhập vào quá nhiều ký tự trắng
                slug = slug.replace(/\-\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-/gi, '-');
                slug = slug.replace(/\-\-/gi, '-');
                //Xóa các ký tự gạch ngang ở đầu và cuối
                slug = '@' + slug + '@';
                slug = slug.replace(/\@\-|\-\@|\@/gi, '');
                return slug;

            }

            return string;
        }

        function findObject(field, value, array) {
            function findCherries(fruit) {
                return fruit[field] === value;
            }

            return array.find(findCherries);
        }

        function recusive(data, parentId, seperator) {
            var output;
            var tmp = [];
            seperator = seperator || '';
            if (angular.isArray(data)) {
                var items = data.filter(function (item) { return item.parentId === parentId });
                if (items.length) {
                    for (var i = 0; i < items.length; i++) {
                        items[i].name = seperator + items[i].name;

                        tmp.push(items[i]);

                        var subs = recusive(data, items[i].id, seperator + "—");

                        for (var j = 0; j < subs.length; j++) {
                            tmp.push(subs[j]);
                        }
                    }
                }
                output = tmp;
            } else {
                output = data;
            }
            return output;
        }

        function cropAvatar() {
            $bzPopup.open({
                templateUrl: 'modules/popup/cropper/view.html',
                closeOnBg: false,
                data: {
                    ratio: 1,
                    width: 320,
                    height: 320,
                    type: 'image/jpeg',
                    event: 'bz:CropperAvatarSuccess',
                    image: 'images/demo.jpg',
                    props: {
                        btnOk: 'Lưu',
                        btnCancel: 'Huỷ bỏ',
                        btnOkEvent: 'bz:CropperAvatarOk', // hoặc function(){}
                        btnCancelEvent: 'bz:CroppperAvatarCancel' // hoặc function(){}
                    }
                }
            });
        }

        function setLocalStorage(key, data) {
            if (typeof (Storage) !== "undefined") {
                Storage.set(key, data, settingJs.storageExpireTime);
            } else {
                console.error('Sorry! The browser does not support Storage.');
            }
        }

        function getLocalStorage(key) {
            if (typeof (Storage) !== "undefined") {
                var data = Storage.get(key);
                return data;
            } else {
                console.error('Sorry! The browser does not support Storage.');
                return null;
            }
        }

        function removeLocalStorage(key) {
            if (typeof (Storage) !== "undefined") {
                Storage.remove(key);
            } else {
                console.error('Sorry! The browser does not support Storage.');
            };
        }

        function setInfoUser(data) {
            setLocalStorage(settingJs.appPrefix + '_infoUser', data);
        }

        function getInfoUser() {
            return getLocalStorage(settingJs.appPrefix + '_infoUser');
        }

        function removeInfoUser() {
            removeLocalStorage(settingJs.appPrefix + '_infoUser');
        }
    }

    function bzResourceSvc($resource) {
        return {
            api: api
        };

        function api(apiName, params, methods) {
            methods = methods || {};
            methods.get = angular.extend({}, methods.get);

            methods.query = angular.extend({
                isArray: true
            }, methods.query);

            methods.update = angular.extend({
                method: 'PUT'
            }, methods.update);

            methods.upload = angular.extend({
                method: 'POST',
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            }, methods.upload);

            return $resource(apiName, params, methods);
        }
    }

    function bzPreloadSvc($q) {
        return {
            load: function (list) {
                var defer = $q.defer();
                helperJs.preloader(list, function () {
                    defer.resolve();
                });
                return defer.promise;
            }
        };
    }
})();
(function () {
	'use strict';

	angular
		.module('bzApp')
		.filter('bzTrustHtml', bzTrustHtml)						// Cho phép hiển thị dữ liệu là html
		.filter('bzTrustResource', bzTrustResource)
		.filter('bzCurrency', bzCurrency)
		.filter('bzHexToRgb', bzHexToRgb)
		.filter('bzTripHtml', bzTripHtml)
		.filter('bzFormatDate', bzFormatDate)
		.filter('bzFirstPage', bzFirstPage)
		.filter('bzObjectKeysLength', bzObjectKeysLength);


	function bzTrustHtml($sce) {
		return function (data) {
			return $sce.trustAsHtml(data);
		};
	}
	function bzTrustResource($sce) {
		return function (data) {
			return $sce.trustAsResourceUrl(data);
		};
	}
	function bzCurrency() {
		return function (data) {
			return helperJs.formatMoney(data);
		};
	}

	function bzHexToRgb() {
		return function (data, alpha) {
			return helperJs.hexToRgb(data, alpha);
		};
	}

	function bzTripHtml() {
		return function (data) {
			return String(data).replace(/<[^>]+>/gm, '');
		};
	}

	function bzFormatDate() {
		return function (data, format) {
			var date = new Date(data);
			var convertedDate = moment(date).format(format);
			return convertedDate;
		};
	}

	function bzFirstPage() {
		return function (data, start) {
			start = +start;
			if (angular.isArray(data)) {
				return data.slice(start);
			} else {
				return data;
			}
		};
	}

	function bzObjectKeysLength() {
		return function (obj) {
			return Object.keys(obj).length;
		};
	}
})();
(function () {
    'use strict';
    angular
        .module('bzApp')

        .directive('bzColorPicker', bzColorPicker)
        .directive('autogrow', autogrow)
        .directive('ckEditor', ckEditor)
        .directive('bzInputMask', bzInputMask)
        .directive('bzLoadingProgress', bzLoadingProgress)
        .directive('bzPlaceholder', bzPlaceholder)
        .directive('bzFileModel', bzFileModel)
        .directive('bzInputControls', bzInputControls)                         // Sự kiện cuộn chuột giữa và nhấn phím mũi tên
        .directive('bzValidPasswordMatch', bzValidPasswordMatch)               // Kiểm tra mật khẩu trùng khớp
        .directive('bzValidPassword', bzValidPassword)                         // Kiểm tra độ an toàn của mật khẩu
        .directive('bzPasswordStrength', bzPasswordStrength)                   // Kiểm tra mật khẩu (Ký tự đặc biệt, in hoa, thường, ký tự số)
        .directive('bzWordCount', bzWordCount)                                 // Giới hạn số từ được nhập
        .directive('bzValidExist', bzValidExist)                               // Kiểm tra dữ liệu trong database
        .directive('bzValidFileInput', bzValidFileInput)                       // Kiểm tra tập tin upload
        .directive('bzSubmit', bzSubmit)                                       // Nút submit có trạng thái loading
        .directive('bzPageTransition', bzPageTransition)                       // Hiệu ứng chuyển trang
        .directive('bzTimePicker', bzTimePicker)                               // Popup chọn thời gian
        .directive('bzDatePicker', bzDatePicker)                               // Popup chọn ngày
        .directive('bzDateTimePicker', bzDateTimePicker)                       // Popup chọn ngày
        .directive('bzDateRangePicker', bzDateRangePicker)                     // Popup chọn ngày
        .directive('bzMedia', bzMedia)                                         // Điều khiển HTML5 Audio, video
        .directive('bzLoading', bzLoading)                                     // Trạng thái loading
        .directive('bzCustomScrollbar', bzCustomScrollbar)                     // Giao diện scrollbar
        .directive('bzRepeatCompleted', bzRepeatCompleted)                     // Sự kiện khi ng-repeat hoàn thành
        .directive('bzPager', bzPager)                                         // Tạo phân trang cho dữ liệu
        .directive('bzParallax', bzParallax)                                   // Hiệu ứng parallax
        .directive('bzFancybox', bzFancybox)                                   // Lightbox
        .directive('bzInfinityScroll', bzInfinityScroll)
        .directive('bzFullframe', bzFullframe)
        .directive('bzTag', bzTag)
        .directive('bzInputNumber', bzInputNumber)
        .directive('bzCheckDate', bzCheckDate)
        .directive('iCheck', iCheck)
        .directive('atrDateTimePicker', atrDateTimePicker)
        .directive('singleDateTimePicker', singleDateTimePicker)               //Single date time by xuantoan
        .directive('bzCropper', bzCropper)
        .directive('bzInputOnlyDigits', bzInputOnlyDigits);
    // .directive('bzInputMatch', bzInputMatch);

    /*Icheck vu.dev@antoree.com*/
    function iCheck($timeout, $parse) {
        return {
            require: 'ngModel',
            // scope: {
            //     checkboxClass: '=checkboxClass'
            // },
            link: function ($scope, element, $attrs, ngModel) {
                return $timeout(function () {
                    var checkboxClass = $attrs['checkboxClass'];
                    var value;
                    value = $attrs['value'];

                    $scope.$watch($attrs['ngModel'], function (newValue) {
                        $(element).iCheck('update');
                    })

                    return $(element).iCheck({
                        // checkboxClass: 'icheckbox_square',
                        radioClass: 'iradio_square-blue',
                        checkboxClass: checkboxClass || 'icheckbox_square-blue',
                        increaseArea: '20%'

                    }).on('ifChanged', function (event) {
                        if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {
                            $scope.$apply(function () {
                                return ngModel.$setViewValue(event.target.checked);
                            });
                        }
                        if ($(element).attr('type') === 'radio' && $attrs['ngModel']) {
                            return $scope.$apply(function () {
                                return ngModel.$setViewValue(value);
                            });
                        }
                    });
                });
            }
        };
    }
    /*End Icheck vu.dev@antoree.com*/

    /*DateTime vu.dev@antoree.com*/
    function atrDateTimePicker() {
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function (scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale: {
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                element.daterangepicker(options);
                /*Khi date thay đổi*/
                element.on('apply.daterangepicker', function (ev, picker) {
                    var value = {
                        startDate: picker.startDate,
                        endDate: picker.endDate,
                    };

                    /*khi chọn single, mutil datetime*/
                    if (!options.singleDatePicker) {
                        picker.element.val(picker.startDate.format(picker.locale.format) + ' - ' + picker.endDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value);
                    } else {
                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    }
                });

                /*Render lần đầu vào page model trc khi init datetime*/
                if (!ngModel) return;
                ngModel.$render = function () {
                    if (ngModel.$viewValue) {
                        var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                        element.val(convertedDate || '');
                    }
                };
            }
        };
    }


    /*End DateTime vu.dev@antoree.com*/

    /*Start: DateTime for single date xuantoancth541994@gmail.com*/

    // Only use for select single datetime picker
    function singleDateTimePicker($timeout) {
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function (scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale: {
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                $timeout(function () {
                    element.daterangepicker(options);
                    /*Khi date thay đổi*/
                    element.on('apply.daterangepicker', function (ev, picker) {
                        var value = {
                            startDate: picker.startDate,
                            endDate: picker.endDate,
                        };

                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    });

                    /*Render lần đầu vào page model trc khi init datetime*/
                    if (!ngModel) return;
                    ngModel.$render = function () {
                        if (ngModel.$viewValue) {
                            var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                            element.val(convertedDate || '');
                        }
                    };
                }, 10);
            }
        };
    }
    /*Start: DateTime for single date xuantoancth541994@gmail.com*/



    function bzColorPicker($timeout) {
        return {
            require: 'ngModel',
            scope: {
                modelValue: '=ngModel'
            },
            link: function (scope, iElement, iAttr, ngModel) {
                $timeout(function () {
                    var a = iElement.colorpicker({
                        color: scope.modelValue
                    });

                    a.on('changeColor', function (data) {
                        scope.$apply(function () {
                            ngModel.$setViewValue(data.color.toString());
                        });
                    });
                });
            }
        };
    }

    function autogrow($timeout, $window) {
        return {
            link: function (scope, iElement, iAttr) {
                process(0);

                scope.$on('bz:redrawAutogrow', function () {
                    process(100);
                });

                function process(ms) {
                    $timeout(function () {
                        autosize(iElement);
                    }, ms);
                }
            }
        }
    }

    function ckEditor($timeout) {
        return {
            require: '?ngModel',
            transclude: true,
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                var editor, updateModel;

                $timeout(function () {
                    editor = CKEDITOR.replace(iElement[0], {});
                    if (!ngModel) {
                        return;
                    }

                    editor.on('instanceReady', function () {
                        return editor.setData(ngModel.$viewValue);
                    });
                    editor.on('change', updateModel);
                    editor.on('dataReady', updateModel);
                    editor.on('key', updateModel);
                    editor.on('paste', updateModel);
                    editor.on('selectionChange', updateModel);

                    function updateModel() {
                        return scope.$apply(function () {
                            return ngModel.$setViewValue(editor.getData());
                        });
                    };

                    return ngModel.$render = function () {
                        return editor.setData(ngModel.$viewValue);
                    };
                });
            }
        };
    }

    function bzInputMask() {
        return {
            link: function (scope, iElement, iAttrs) {
                var mask = scope.$eval(iAttrs.bzInputMask);
                Inputmask(mask).mask(iElement[0]);
            }
        };
    }

    function bzLoadingProgress() {
        return {
            restrict: 'E',
            replace: true,
            template: '<div id="bz-progressbar">' +
            '<div></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    setTimeout(function () {
                        iElement.find('>div').css('width', 0);
                        iElement.fadeIn(200);
                    }, 500);

                    run(0);

                    function run(value) {
                        setTimeout(function () {
                            if (value < 90) {
                                var randomVal = helperJs.randomRangeInt(value, value + 10);
                                iElement.find('>div').css('width', randomVal + '%');
                                value += randomVal;
                                run(value);
                            }
                        }, helperJs.randomRangeInt(200, 500));
                    }
                });

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    iElement.find('>div').css('width', '100%');
                    setTimeout(function () {
                        iElement.fadeOut(200);
                    }, 500);
                });
            }
        };
    }

    function bzPlaceholder() {
        return {
            replace: true,
            transclude: true,
            template: '<div>' +
            '<img ng-src="{{icon}}" />' +
            '<span>{{caption}}</span>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                var input = angular.element(iAttrs.for);
                scope.caption = iAttrs.caption;
                scope.icon = iAttrs.icon;

                iElement.on('click', function (event) {
                    iElement.hide();
                    input.focus();
                });

                input.on('focus', function (event) {
                    iElement.hide();
                });

                input.on('blur', function (event) {
                    var val = input.val();

                    if (!val.length) {
                        iElement.show();
                    }
                });
            }
        };
    }

    function bzFileModel($parse) {
        return {
            link: function (scope, iElement, iAttrs) {
                var model = $parse(iAttrs.bzFileModel);
                var modelSetter = model.assign;

                iElement.bind('change', function () {
                    scope.$apply(function () {
                        modelSetter(scope, iElement[0].files);
                    });
                });
            }
        };
    }

    function bzInputControls($state, $timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var len = settingJs.pageTransitionSequence.length - 1,
                    currentPage = '',
                    direction = '',
                    currentIdx = 0;

                scope.allowInputControls = true;

                scope.$on('bz:allowInputControls', function (event, data) {
                    scope.allowInputControls = data;
                });

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    currentPage = toState.name;
                    currentIdx = settingJs.pageTransitionSequence.getIndexBy('stateName', currentPage);

                    $timeout(function () {
                        scope.allowInputControls = true;
                    }, settingJs.pageTransitionDelay);
                });

                iElement.on('keydown', function (event) {
                    currentPage = $state.current.name;
                    if (event.keyCode === 38 || event.keyCode === 39) {
                        direction = 'down';
                        gotoPage(currentPage, direction);
                    }
                    if (event.keyCode === 37 || event.keyCode === 40) {
                        direction = 'up';
                        gotoPage(currentPage, direction);
                    }
                });

                iElement.mousewheel(function (event, delta, deltaX, deltaY) {
                    direction = delta > 0 ? 'down' : 'up';
                    gotoPage(currentPage, direction);
                });

                function gotoPage(page, dir) {
                    if (scope.allowInputControls) {
                        scope.allowInputControls = false;
                        if (dir === 'up') {
                            currentIdx++;
                        } else {
                            currentIdx--;
                        }
                        if (settingJs.pageTransitionLoop) {
                            if (currentIdx > len) currentIdx = 0;
                            if (currentIdx < 0) currentIdx = len;
                        } else {
                            if (currentIdx > len) currentIdx = len;
                            if (currentIdx < 0) currentIdx = 0;
                            $timeout(function () {
                                scope.allowInputControls = true;
                            }, settingJs.pageTransitionDelay);
                        }
                        $state.go(settingJs.pageTransitionSequence[currentIdx].stateName);
                    }
                }
            }
        };
    }

    function bzValidPasswordMatch() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var pw = $(iAttrs.bzValidPasswordMatch);

                ngModel.$parsers.push(function (value) {
                    ngModel.$setValidity('match', value !== '' && value === pw[0].value);
                    return value;
                });
            }
        };
    }

    function bzPasswordStrength() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var PASSWORD_PATTERN = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
                var element = $(iAttrs.bzPasswordStrength);

                iElement.on('focus', function (event) {
                    element.show();
                });

                iElement.on('blur', function (event) {
                    element.hide();
                });

                ngModel.$parsers.push(function (value) {
                    var level = 0;
                    if (value.length >= 8) {
                        angular.forEach(PASSWORD_PATTERN, function (regex) {
                            if (regex.test(value)) {
                                level++;
                            }
                        });
                        scope.passwordStrength = level;
                    }
                });
            }
        };
    }

    function bzWordCount() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var maxW = parseInt(iAttrs.maxWords);
                var minW = parseInt(iAttrs.minWords) || 0;
                var wordCount = 0;

                ngModel.$parsers.push(function (value) {
                    wordCount = value.trim().replace(/(\r\n|\n|\r)/gm, ' ').replace(/\.\s+/g, ' ').split(' ').length;
                    ngModel.$setValidity('mixwords', wordCount >= minW);
                    ngModel.$setValidity('maxwords', wordCount <= maxW);
                    return value;
                });
            }
        };
    }

    function bzValidExist($resource) {
        return {
            require: 'ngModel',
            scope: {
                bzValidExist: '='
            },
            link: function (scope, iElement, iAttrs, ngModel) {
                var data = scope.bzValidExist;
                iElement.on('focus', function (event) {
                    $(data.selector).hide();
                });

                iElement.on('blur', function (event) {
                    data.value = ngModel.$viewValue;
                    var User = $resource(data.url);
                    var userInfo = new User(data);

                    userInfo.$save(function (resp) {
                        //ngModel.$setValidity('recordexist', !resp.status);
                        if (resp.status) {
                            $(data.selector).show();
                        }
                    });

                    scope.$apply();
                });
            }
        };
    }

    function bzValidPassword() {
        var PASSWORD_FORMATS = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    var status = true;

                    angular.forEach(PASSWORD_FORMATS, function (regex) {
                        status = status && regex.test(value);
                    });

                    ngModel.$setValidity('passwordcharacters', status);
                    return value;
                });
            }
        };
    }

    function bzValidFileInput($parse) {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var fileSelected = [],
                    fileSize = iAttrs.fileSize,
                    fileType = iAttrs.fileType.split(',');

                var model = $parse(iAttrs.ngModel);
                var modelSetter = model.assign;

                scope.$on('bz:clearFileInput', function () {
                    ngModel.$setViewValue(null);
                    ngModel.$render();
                    iElement.val('');
                });

                iElement.on('change', function () {
                    scope.$apply(function () {
                        fileSelected = iElement[0].files;
                        modelSetter(scope, iElement[0].files);

                        customValidator(iElement.val());
                    });
                });

                function customValidator(value) {
                    var ouputSize = [];
                    var ouputType = [];

                    for (var i = 0; i < fileSelected.length; i++) {
                        if (fileSelected[i].size > fileSize) {
                            ouputSize.push(fileSelected[i]);
                        }
                        if (fileType.indexOf(fileSelected[i].type) === -1) {
                            ouputType.push(fileSelected[i]);
                        }
                    }

                    ngModel.$setValidity('filesize', ouputSize.length === 0);
                    ngModel.$setValidity('filetype', ouputType.length === 0);

                    return value;
                }
            }
        };
    }

    function bzSubmit() {
        return {
            replace: true,
            transclude: true,
            template: '<button>' +
            '<ng-transclude></ng-transclude>' +
            '<div class="circle animFade" ng-if="type===\'circle\'"></div>' +
            '<div class="bar animFade" ng-if="type===\'bar\'">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '</div>' +
            '</button>',
            link: function (scope, iElement, iAttrs) {
                scope.type = iAttrs.loadingIcon || 'circle';
            }
        };
    }

    function bzPageTransition($animate, bzValueSvc) {
        return {
            link: function (scope, iElement, iAttrs) {
                var inClass = '', outClass = '';
                var curAnim = iAttrs.bzPageTransition.split(',');

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    var uiView = $('.mainView');

                    if (bzValueSvc.loadCounter > 1) {
                        if (is.desktop()) {
                            var animFrom = 0, animTo = 0;

                            if (toState.name === fromState.name) {
                                animData(0);
                                uiView.eq(0).addClass(inClass);
                                uiView.eq(1).addClass(outClass);
                            } else {
                                for (var i = 0; i < settingJs.pageTransitionSequence.length; i++) {
                                    if (settingJs.pageTransitionSequence[i].stateName === fromState.name) {
                                        animFrom = i;
                                    }
                                    if (settingJs.pageTransitionSequence[i].stateName === toState.name) {
                                        animTo = i;
                                    }
                                }

                                uiView.removeClass(inClass + ' ' + outClass);

                                // Next
                                if (animFrom < animTo) {
                                    animData(parseInt(curAnim[0]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                                // Prev
                                if (animFrom > animTo) {
                                    animData(parseInt(curAnim[1]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                            }
                        }

                        $animate.on('enter', uiView.eq(0), function (element, phase) {
                            if (phase === 'close') {
                                scope.$broadcast('bz:pageTransitionCompleted', '');
                            }
                        });
                    } else {
                        animData(0);
                        uiView.eq(0).addClass(inClass);
                        uiView.eq(1).addClass(outClass);
                    }
                });

                function animData(index) {
                    switch (index) {
                        case 0:
                            outClass = 'pt-page-fadeOut';
                            inClass = 'pt-page-fadeIn';
                            break;
                        case 1:
                            outClass = 'pt-page-moveToLeft';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 2:
                            outClass = 'pt-page-moveToRight';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 3:
                            outClass = 'pt-page-moveToTop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 4:
                            outClass = 'pt-page-moveToBottom';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 5:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromRight pt-page-ontop';
                            break;
                        case 6:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromLeft pt-page-ontop';
                            break;
                        case 7:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromBottom pt-page-ontop';
                            break;
                        case 8:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromTop pt-page-ontop';
                            break;
                        case 9:
                            outClass = 'pt-page-moveToLeftFade';
                            inClass = 'pt-page-moveFromRightFade';
                            break;
                        case 10:
                            outClass = 'pt-page-moveToRightFade';
                            inClass = 'pt-page-moveFromLeftFade';
                            break;
                        case 11:
                            outClass = 'pt-page-moveToTopFade';
                            inClass = 'pt-page-moveFromBottomFade';
                            break;
                        case 12:
                            outClass = 'pt-page-moveToBottomFade';
                            inClass = 'pt-page-moveFromTopFade';
                            break;
                        case 13:
                            outClass = 'pt-page-moveToLeftEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 14:
                            outClass = 'pt-page-moveToRightEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 15:
                            outClass = 'pt-page-moveToTopEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 16:
                            outClass = 'pt-page-moveToBottomEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 17:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromRight pt-page-ontop';
                            break;
                        case 18:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromLeft pt-page-ontop';
                            break;
                        case 19:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromBottom pt-page-ontop';
                            break;
                        case 20:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromTop pt-page-ontop';
                            break;
                        case 21:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-scaleUpDown pt-page-delay300';
                            break;
                        case 22:
                            outClass = 'pt-page-scaleDownUp';
                            inClass = 'pt-page-scaleUp pt-page-delay300';
                            break;
                        case 23:
                            outClass = 'pt-page-moveToLeft pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 24:
                            outClass = 'pt-page-moveToRight pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 25:
                            outClass = 'pt-page-moveToTop pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 26:
                            outClass = 'pt-page-moveToBottom pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 27:
                            outClass = 'pt-page-scaleDownCenter';
                            inClass = 'pt-page-scaleUpCenter pt-page-delay400';
                            break;
                        case 28:
                            outClass = 'pt-page-rotateRightSideFirst';
                            inClass = 'pt-page-moveFromRight pt-page-delay200 pt-page-ontop';
                            break;
                        case 29:
                            outClass = 'pt-page-rotateLeftSideFirst';
                            inClass = 'pt-page-moveFromLeft pt-page-delay200 pt-page-ontop';
                            break;
                        case 30:
                            outClass = 'pt-page-rotateTopSideFirst';
                            inClass = 'pt-page-moveFromTop pt-page-delay200 pt-page-ontop';
                            break;
                        case 31:
                            outClass = 'pt-page-rotateBottomSideFirst';
                            inClass = 'pt-page-moveFromBottom pt-page-delay200 pt-page-ontop';
                            break;
                        case 32:
                            outClass = 'pt-page-flipOutRight';
                            inClass = 'pt-page-flipInLeft pt-page-delay500';
                            break;
                        case 33:
                            outClass = 'pt-page-flipOutLeft';
                            inClass = 'pt-page-flipInRight pt-page-delay500';
                            break;
                        case 34:
                            outClass = 'pt-page-flipOutTop';
                            inClass = 'pt-page-flipInBottom pt-page-delay500';
                            break;
                        case 35:
                            outClass = 'pt-page-flipOutBottom';
                            inClass = 'pt-page-flipInTop pt-page-delay500';
                            break;
                        case 36:
                            outClass = 'pt-page-rotateFall pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 37:
                            outClass = 'pt-page-rotateOutNewspaper';
                            inClass = 'pt-page-rotateInNewspaper pt-page-delay500';
                            break;
                        case 38:
                            outClass = 'pt-page-rotatePushLeft';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 39:
                            outClass = 'pt-page-rotatePushRight';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 40:
                            outClass = 'pt-page-rotatePushTop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 41:
                            outClass = 'pt-page-rotatePushBottom';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 42:
                            outClass = 'pt-page-rotatePushLeft';
                            inClass = 'pt-page-rotatePullRight pt-page-delay180';
                            break;
                        case 43:
                            outClass = 'pt-page-rotatePushRight';
                            inClass = 'pt-page-rotatePullLeft pt-page-delay180';
                            break;
                        case 44:
                            outClass = 'pt-page-rotatePushTop';
                            inClass = 'pt-page-rotatePullBottom pt-page-delay180';
                            break;
                        case 45:
                            outClass = 'pt-page-rotatePushBottom';
                            inClass = 'pt-page-rotatePullTop pt-page-delay180';
                            break;
                        case 46:
                            outClass = 'pt-page-rotateFoldLeft';
                            inClass = 'pt-page-moveFromRightFade';
                            break;
                        case 47:
                            outClass = 'pt-page-rotateFoldRight';
                            inClass = 'pt-page-moveFromLeftFade';
                            break;
                        case 48:
                            outClass = 'pt-page-rotateFoldTop';
                            inClass = 'pt-page-moveFromBottomFade';
                            break;
                        case 49:
                            outClass = 'pt-page-rotateFoldBottom';
                            inClass = 'pt-page-moveFromTopFade';
                            break;
                        case 50:
                            outClass = 'pt-page-moveToRightFade';
                            inClass = 'pt-page-rotateUnfoldLeft';
                            break;
                        case 51:
                            outClass = 'pt-page-moveToLeftFade';
                            inClass = 'pt-page-rotateUnfoldRight';
                            break;
                        case 52:
                            outClass = 'pt-page-moveToBottomFade';
                            inClass = 'pt-page-rotateUnfoldTop';
                            break;
                        case 53:
                            outClass = 'pt-page-moveToTopFade';
                            inClass = 'pt-page-rotateUnfoldBottom';
                            break;
                        case 54:
                            outClass = 'pt-page-rotateRoomLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomLeftIn';
                            break;
                        case 55:
                            outClass = 'pt-page-rotateRoomRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomRightIn';
                            break;
                        case 56:
                            outClass = 'pt-page-rotateRoomTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomTopIn';
                            break;
                        case 57:
                            outClass = 'pt-page-rotateRoomBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomBottomIn';
                            break;
                        case 58:
                            outClass = 'pt-page-rotateCubeLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeLeftIn';
                            break;
                        case 59:
                            outClass = 'pt-page-rotateCubeRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeRightIn';
                            break;
                        case 60:
                            outClass = 'pt-page-rotateCubeTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeTopIn';
                            break;
                        case 61:
                            outClass = 'pt-page-rotateCubeBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeBottomIn';
                            break;
                        case 62:
                            outClass = 'pt-page-rotateCarouselLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselLeftIn';
                            break;
                        case 63:
                            outClass = 'pt-page-rotateCarouselRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselRightIn';
                            break;
                        case 64:
                            outClass = 'pt-page-rotateCarouselTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselTopIn';
                            break;
                        case 65:
                            outClass = 'pt-page-rotateCarouselBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselBottomIn';
                            break;
                        case 66:
                            outClass = 'pt-page-rotateSidesOut';
                            inClass = 'pt-page-rotateSidesIn pt-page-delay200';
                            break;
                        case 67:
                            outClass = 'pt-page-rotateSlideOut';
                            inClass = 'pt-page-rotateSlideIn';
                            break;
                    }
                }
            }
        };
    }

    function bzTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                iElement.timepicker();
            }
        };
    }

    function bzDatePicker() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                if (!ngModel) return;

                ngModel.$render = function () {
                    if (ngModel.$viewValue) {
                        var convertedDate = moment(ngModel.$viewValue).format('DD/MM/YYYY');
                        iElement.val(convertedDate || '');
                    }
                };

                iElement.on('blur keyup change', function () {
                    scope.$evalAsync(read);
                });

                read();

                function read() {
                    var date = iElement.val();
                    var convertedDate = moment(date, 'DD/MM/YYYY').toDate();
                    ngModel.$setViewValue(convertedDate);
                }

                iElement.datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onSelect: function (date, data) {
                        scope.$evalAsync(read);
                    }
                });
            }
        };
    }

    function bzDateTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                iElement.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    showTime: false,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                });
            }
        };
    }

    function bzDateRangePicker($timeout) {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                //$timeout(function(){
                var txtStateDate = iElement.find('#dpFrom');
                var txtEndDate = iElement.find('#dpTo');

                console.log(txtStateDate)

                txtStateDate.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onClose: function (dateText, inst) {
                        // if (txtEndDate.val() != '') {
                        //     var testStartDate = txtStateDate.datetimepicker('getDate');
                        //     var testEndDate = txtEndDate.datetimepicker('getDate');
                        //     if (testStartDate > testEndDate)
                        //         txtEndDate.datetimepicker('setDate', testStartDate);
                        // }
                        // else {
                        //     txtEndDate.val(dateText);
                        // }
                    },
                    onSelect: function (selectedDateTime) {
                        txtEndDate.datetimepicker('option', 'minDate', txtStateDate.datetimepicker('getDate'));
                        txtStateDate.datepicker("hide");
                    }
                });
                txtEndDate.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onClose: function (dateText, inst) {
                        // if (txtStateDate.val() != '') {
                        //     var testStartDate = txtStateDate.datetimepicker('getDate');
                        //     var testEndDate = txtEndDate.datetimepicker('getDate');
                        //     if (testStartDate > testEndDate)
                        //         txtStateDate.datetimepicker('setDate', testEndDate);
                        // }
                        // else {
                        //     txtStateDate.val(dateText);
                        // }
                    },
                    onSelect: function (selectedDateTime) {
                        txtStateDate.datetimepicker('option', 'maxDate', txtEndDate.datetimepicker('getDate'));
                        txtEndDate.datepicker("hide");
                    }
                });
                //});
            }
        };
    }

    function bzMedia(bzEvents) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var player = iElement[0];
                registerEvents();

                scope.$on(bzEvents.media.PLAY, function () {
                    play();
                });

                scope.$on(bzEvents.media.PAUSE, function () {
                    pause();
                });

                scope.$on(bzEvents.media.STOP, function () {
                    stop();
                });

                scope.$on(bzEvents.media.SEEK, function (event, data) {
                    seek(data);
                });

                scope.$on(bzEvents.media.VOLUME, function (event, data) {
                    setVolume(data);
                });

                scope.$on(bzEvents.media.FULLSCREEN, function (event, data) {
                    console.log('request Fullscreen');
                    if (data) {
                        helperJs.enterFullScreen(player);
                    } else {
                        helperJs.exitFullScreen();
                    }
                });

                scope.$on(bzEvents.media.ENTER_FULLSCREEN, function (event) {
                    console.log('enter Fullscreen');
                });

                scope.$on(bzEvents.media.EXIT_FULLSCREEN, function (event) {
                    console.log('exit Fullscreen');
                });

                function registerEvents() {
                    document.addEventListener("fullscreenchange", onFullscreenChange, false);
                    document.addEventListener("webkitfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("mozfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("MSFullscreenChange", onFullscreenChange, false);
                    player.addEventListener('webkitendfullscreen', onFullscreenChange, false);
                    iElement.on('ended', function (event) {
                        onEnded();
                    });
                }

                function play() {
                    player.play();
                }

                function pause() {
                    player.pause();
                }

                function stop() {
                    player.pause();
                    player.currentTime = 0;
                }

                function seek(value) {
                    player.currentTime = value;
                }

                function setVolume(value) {
                    player.volume = value;
                }

                function onEnded() {
                    scope.$emit(bzEvents.media.ENDED);
                }

                function onFullscreenChange() {
                    var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
                    if (fullscreenElement) {
                        scope.$emit(bzEvents.media.ENTER_FULLSCREEN);
                    } else {
                        scope.$emit(bzEvents.media.EXIT_FULLSCREEN);
                    }
                }
            }
        };
    }

    function bzLoading() {
        var markup =
            '<div class="loading-mask">' +
            '<div id="bar-wave" class="bar-wave loading-style">' +
            '<div class="bar">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '<div class="rect4"></div>' +
            '<div class="rect5"></div>' +
            '</div>' +
            '</div>' +
            '<div id="circle-spread" class="circle-spread loading-style">' +
            '<div></div>' +
            '<div></div>' +
            '<div></div>' +
            '</div>' +
            '<div id="circle-line-spread" class="circle-line-spread loading-style">' +
            '<div></div>' +
            '<div></div>' +
            '<div></div>' +
            '</div>' +
            '<div id="hoz-load-bar" class="hoz-load-bar loading-style">' +
            '<div class="bar1"></div>' +
            '<div class="bar2"></div>' +
            '<div class="bar3"></div>' +
            '<div class="bar4"></div>' +
            '<div class="bar5"></div>' +
            '<div class="bar6"></div>' +
            '<div class="bar7"></div>' +
            '<div class="bar8"></div>' +
            '</div>' +
            '</div>';
        return {
            restrict: 'E',
            templateUrl: markup,
            replace: true,
            link: function (scope, iElement, iAttrs) {
                iElement.find(iAttrs.loadingType).show();
            }
        };
    }

    function bzCustomScrollbar($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var o = {
                    selector: iElement[0],
                    theme: iAttrs.scrollbarTheme || 'light',
                    scrollbarPosition: iAttrs.scrollbarPosition || 'inside',
                    mouseWheel: {
                        scrollAmount: 20
                    },
                    scrollButtons: {
                        enable: iAttrs.scrollbarArrow === 'true'
                    }
                };

                scope.$on('bz:CustomScrollbarRender', function () {
                    render();
                });

                $timeout(function () {
                    render();
                }, 500);

                function render() {
                    $(o.selector).mCustomScrollbar(o);
                }
            }
        };
    }

    function bzRepeatCompleted() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var arrEvents = iAttrs.bzRepeatCompleted.split(',');
                if (scope.$last) {
                    for (var i = 0; i < arrEvents.length; i++) {
                        scope.$emit(arrEvents[i]);
                    }
                }
            }
        };
    }

    function bzPager($state) {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                pageParams: '=',
                pageState: '@'
            },
            template: '<div class="bz-pager">' +
            '<a class="prev" ng-if="pageParams.page > 1" ui-sref="{{pageState}}({page: pageParams.page - 1 < 1 ? 1 : pageParams.page - 1})"><i class="fa fa-chevron-left"></i></a>' +
            '<a class="first" ng-if="pageParams.page > 3" ui-sref="{{pageState}}({page: 1})">1</a>' +
            '<a class="dot" ng-if="pageParams.page > 3">...</a>' +
            '<a class="num" ng-class="{active: page === pageParams.page}" ng-href="{{toHref(page)}}" ng-repeat="page in pageVisible">{{page}}</a>' +
            '<a class="dot" ng-if="pageParams.page < pageParams.pageCount - 2">...</a>' +
            '<a class="last" ng-if="pageParams.page < pageParams.pageCount - 2" ui-sref="{{pageState}}({page: pageParams.pageCount})">{{pageParams.pageCount}}</a>' +
            '<a class="next" ng-if="pageParams.page < pageParams.pageCount" ui-sref="{{pageState}}({page: (pageParams.page > pageParams.pageCount) ? pageParams.pageCount : (pageParams.page + 1)})"><i class="fa fa-chevron-right"></i></a>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                scope.pageParams.page = parseInt(scope.pageParams.page);
                scope.toHref = toHref;

                processPage();

                scope.$on('bz:pageRefresh', function (event, data) {
                    scope.pageParams.pageCount = data;
                    processPage();
                });

                function toHref(page) {
                    return $state.href(scope.pageState, { page: page });
                };

                function processPage() {
                    scope.pageVisible = [];
                    var pageMin = Math.ceil(Math.min(Math.max(1, scope.pageParams.page - (settingJs.pageVisibleCount / 2)), Math.max(1, scope.pageParams.pageCount - settingJs.pageVisibleCount + 1)));
                    var pageMax = Math.ceil(Math.min(scope.pageParams.pageCount, pageMin + settingJs.pageVisibleCount - 1));
                    for (var i = pageMin; i <= pageMax; i++) {
                        scope.pageVisible.push(i);
                    }
                }
            }
        };
    }

    function bzParallax($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                if (is.desktop()) {
                    scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                        $timeout(function () {
                            iElement.find(iAttrs.bzParallax).parallax();
                        }, 1000);
                    });

                    scope.$on('$destroy', function () {
                        iElement.find(iAttrs.bzParallax).parallax('disable');
                    });
                }
            }
        };
    }

    function bzFancybox($rootScope) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                if (helperJs.isUndefinedNullEmpty(iAttrs.bzFancybox)) {
                    scope.$on('bz:fancyBox', function () {
                        fancyBox();
                    });
                } else if (iAttrs.bzFancybox === 'static') {
                    fancyBox();
                }

                function fancyBox() {
                    iElement.find('a.fancybox').fancybox({
                        beforeLoad: function () {
                            $rootScope.$broadcast('bz:allowInputControls', false);
                        },
                        beforeClose: function () {
                            $rootScope.$broadcast('bz:allowInputControls', true);
                        }
                    });
                }
            }
        }
    }

    function bzInfinityScroll() {
        return {
            restrict: 'A',
            scope: {
                bzInfinityScroll: '&',
                bzInfinityBottom: '@'
            },
            link: function (scope, iElement, iAttrs) {
                var win = $(window);
                scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    if (fromState.name !== toState.name) {
                        win.off('scroll.infinity');
                    }
                });

                win.on('scroll.infinity', helperJs.debounce(function (event) {
                    var offset = isNaN(scope.bzInfinityBottom) ? $(scope.bzInfinityBottom).position().top : parseInt(scope.bzInfinityBottom);
                    if (win.scrollTop() + win.height() >= $(document).height() - offset) {
                        scope.bzInfinityScroll();
                    }
                }, 500));
            }
        };
    }

    function bzFullframe() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var jRes = jRespond([
                    { label: 'handheld', enter: 0, exit: 1023 },
                    { label: 'desktop', enter: 1024, exit: 10000 }
                ]);

                jRes.addFunc({
                    breakpoint: 'handheld',
                    enter: function () {
                        $('html').removeClass(iAttrs.bzFullframe);
                    }
                });

                jRes.addFunc({
                    breakpoint: 'desktop',
                    enter: function () {
                        $('html').addClass(iAttrs.bzFullframe);
                    }
                });
            }
        };
    }

    function bzTag() {
        return {
            require: '?ngModel',
            replace: true,
            template: '<div class="bz-tag form-control">' +
            '<ul>' +
            '<li ng-repeat="key in keys track by $index">{{key}}<i class="glyphicon glyphicon-remove" ng-click="remove($index)"></i></li>' +
            '</ul>' +
            '<input type="text" placeholder="Enter để thêm từ khoá" />' +
            '<div class="clearfix"></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs, ngModel) {
                scope.keys = [];
                scope.remove = remove;

                iElement.find('input').on('keypress', function (event) {
                    if (event.keyCode === 13) {
                        var text = $.trim($(this).val());
                        if (scope.keys.indexOf(text) === -1 && text.length > 0) {
                            scope.keys.push(text);
                            console.log(scope.keys);

                            $(this).val('');
                            ngModel.$setViewValue(scope.keys);
                        }

                        scope.$apply();

                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                });

                function remove(index) {
                    scope.keys.splice(index, 1);
                    ngModel.$setViewValue(scope.keys);
                }
            }
        };
    }
    function bzCheckDate() {
        return {
            require: "ngModel",
            link: function (scope, elem, attr, modelCtrl) {

                modelCtrl.$parsers.push(function (value) {
                    modelCtrl.$setValidity('isdate', moment(value, ["DD/MM/YYYY"], true).isValid() == true || value =='');
                    return value;
                });
            }
        }
    }
    function bzInputNumber() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                iElement.on('keypress', function (event) {
                    // Start: Allow Dot
                    if (iAttrs.allowDot == '1') {
                        if (event.which != 8 && event.which != 0 && event.which != 46 && (event.which < 48 || event.which > 57)) {
                            return false;
                        }
                    }
                    // Start: Allow Dot
                    else {
                        if (event.which != 8 && event.which != 0 && (event.which < 48 || event.which > 57)) {
                            return false;
                        }
                    }
                });
            }
        };
    }

    function bzCropper($state, $timeout) {
        return {
            replace: true,
            templateUrl: '/assets/global/cropper/crop.html',
            link: function (scope, iElement, iAttrs) {
                var cropper = null,
                    flipCircle = 0,
                    fileInput = iElement.find('#cropper-input-file'),
                    imgCrop = iElement.find('#cropper-img');

                scope.showButtonCrop = false;
                scope.loading = false;

                scope.getImage = getImage;
                scope.setImage = setImage;
                scope.fileTrigger = fileTrigger;
                scope.zoom = zoom;
                scope.rotate = rotate;
                scope.scale = scale;

                scope.$on('$destroy', function () {
                    cropper.cropper('destroy');
                });

                if (iAttrs.cropImage) {
                    scope.loading = true;
                    imgCrop[0].crossOrigin = 'anonymous';
                    imgCrop[0].src = iAttrs.cropImage;

                    $timeout(function () {
                        scope.showButtonCrop = true;
                        initCropper();
                    }, 1000);

                } else {
                    initCropper();
                }

                function fileTrigger() {
                    console.log(123);
                    iElement.find('#cropper-input-file').click();
                }

                function zoom(val) {
                    cropper.cropper('zoom', val);
                }

                function rotate(val) {
                    if (val) {
                        cropper.cropper('rotate', val);
                    } else {
                        cropper.cropper('rotate', 90)
                    }
                }

                function scale(val) {
                    if (val) {
                        cropper.cropper('scale', val);
                    } else {
                        flipCircle++;
                        switch (flipCircle) {
                            case 1: cropper.cropper('scale', -1, 1); break;
                            case 2: cropper.cropper('scale', 1, -1); break;
                            case 3: cropper.cropper('scale', -1, -1); break;
                            case 4: cropper.cropper('scale', 1, 1); flipCircle = 0; break;
                        }
                    }
                }

                function initCropper() {
                    cropper = imgCrop.cropper({
                        aspectRatio: iAttrs.cropRatio,
                        guides: false
                    });
                    scope.loading = false;
                }

                function setImage(obj) {
                    var URL = window.URL || window.webkitURL,
                        blobURL;

                    if (URL) {
                        blobURL = URL.createObjectURL(obj.files[0]);
                        imgCrop.one('built.cropper', function () {
                            URL.revokeObjectURL(blobURL);
                        }).cropper('reset').cropper('replace', blobURL);

                        setTimeout(function () {
                            scope.$apply(function () {
                                scope.showButtonCrop = true;
                            });
                        })

                    }
                }

                function getImage() {
                    var canvasData = cropper.cropper('getCroppedCanvas', {
                        width: iAttrs.cropWidth,
                        height: iAttrs.cropHeight
                    });

                    var imgCropped = canvasData.toDataURL(iAttrs.cropMime);

                    scope.$root.$broadcast(iAttrs.cropEvent, { image: imgCropped });
                }
            }
        };
    }

    // bzRestrictInput by The Boss
    function bzInputOnlyDigits() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function (inputValue) {
                    if (inputValue == undefined) return '';
                    var transformedInput = inputValue.replace(/[^0-9]/g, '');
                    if (transformedInput !== inputValue) {
                        modelCtrl.$setViewValue(transformedInput);
                        modelCtrl.$render();
                    }
                    return transformedInput;
                });
            }
        }
    }
})();


// function bzInputMatch() {
//     return {
//         restrict: 'A',
//         scope: true,
//         require: 'ngModel',
//         link: function (scope, elem, attrs, control) {
//             var checker = function () {

//                 //lấy giá trị 
//                 var e1 = scope.$eval(attrs.ngModel);

//                 //lấy giá trị của xác nhận
//                 var e2 = scope.$eval(attrs.bzInputMatch);
//                 return e1 == e2;
//             };
//             scope.$watch(checker, function (n) {


//                 control.$setValidity("unique", n);
//             });
//         }
//     };
// }
(function(){
	'use strict';

	angular
	.module('bzApp')
	/*https://github.com/linhmtran168/vietnam-gis-crawler/edit/master/data.json*/
	.constant('VIETNAM_MAP',[
	{  
		"1":{  
			"name":"Thành phố Cần Thơ",
			"districts":{  
				"66":"Huyện Cờ Đỏ",
				"67":"Huyện Phong Điền",
				"68":"Huyện Thới Lai",
				"69":"Huyện Vĩnh Thạnh",
				"70":"Quận Bình Thủy",
				"71":"Quận Cái Răng",
				"72":"Quận Ninh Kiều",
				"73":"Quận Ô Môn",
				"74":"Quận Thốt Nốt"
			}
		},
		"2":{  
			"name":"Thành phố Đà Nẵng",
			"districts":{  
				"76":"Huyện Hòa Vang",
				"77":"Huyện Hoàng Sa",
				"78":"Quận Cẩm Lệ",
				"79":"Quận Hải Châu",
				"80":"Quận Liên Chiểu",
				"81":"Quận Ngũ Hành Sơn",
				"82":"Quận Sơn Trà",
				"83":"Quận Thanh Khê"
			}
		},
		"3":{  
			"name":"Thành phố Hà Nội",
			"districts":{  
				"85":"Huyện Ba Vì",
				"86":"Huyện Chương Mỹ",
				"87":"Huyện Đan Phượng",
				"88":"Huyện Đông Anh",
				"89":"Huyện Gia Lâm",
				"90":"Huyện Hoài Đức",
				"91":"Huyện Mê Linh",
				"92":"Huyện Mỹ Đức",
				"93":"Huyện Phú Xuyên",
				"94":"Huyện Phúc Thọ",
				"95":"Huyện Quốc Oai",
				"96":"Huyện Sóc Sơn",
				"97":"Huyện Thạch Thất",
				"98":"Huyện Thanh Oai",
				"99":"Huyện Thanh Trì",
				"100":"Huyện Thường Tín",
				"101":"Huyện Từ Liêm",
				"102":"Huyện ứng Hòa",
				"103":"Quận Ba Đình",
				"104":"Quận Cầu Giấy",
				"105":"Quận Đống Đa",
				"106":"Quận Hà Đông",
				"107":"Quận Hai Bà Trưng",
				"108":"Quận Hoàn Kiếm",
				"109":"Quận Hoàng Mai",
				"110":"Quận Long Biên",
				"111":"Quận Tây Hồ",
				"112":"Quận Thanh Xuân",
				"113":"Thị xã Sơn Tây"
			}
		},
		"4":{  
			"name":"Thành phố Hải Phòng",
			"districts":{  
				"115":"Huyện An Dương",
				"116":"Huyện An Lão",
				"117":"Huyện Bạch Long Vĩ",
				"118":"Huyện Cát Hải",
				"119":"Huyện Kiến Thụy",
				"120":"Huyện Thủy Nguyên",
				"121":"Huyện Tiên Lãng",
				"122":"Huyện Vĩnh Bảo",
				"123":"Quận Đồ Sơn",
				"124":"Quận Dương Kinh",
				"125":"Quận Hải An",
				"126":"Quận Hồng Bàng",
				"127":"Quận Kiến An",
				"128":"Quận Lê Chân",
				"129":"Quận Ngô Quyền"
			}
		},
		"5":{  
			"name":"Thành phố Hồ Chí Minh",
			"districts":{  
				"131":"Huyện Bình Chánh",
				"132":"Huyện Cần Giờ",
				"133":"Huyện Củ Chi",
				"134":"Huyện Hóc Môn",
				"135":"Huyện Nhà Bè",
				"136":"Quận 1",
				"137":"Quận 10",
				"138":"Quận 11",
				"139":"Quận 12",
				"140":"Quận 2",
				"141":"Quận 3",
				"142":"Quận 4",
				"143":"Quận 5",
				"144":"Quận 6",
				"145":"Quận 7",
				"146":"Quận 8",
				"147":"Quận 9",
				"148":"Quận Bình Tân",
				"149":"Quận Bình Thạnh",
				"150":"Quận Gò Vấp",
				"151":"Quận Phú Nhuận",
				"152":"Quận Tân Bình",
				"153":"Quận Tân Phú",
				"154":"Quận Thủ Đức"
			}
		},
		"6":{  
			"name":"Tỉnh An Giang",
			"districts":{  
				"155":"Huyện An Phú",
				"156":"Huyện Châu Phú",
				"157":"Huyện Châu Thành",
				"158":"Huyện Chợ Mới",
				"159":"Huyện Phú Tân",
				"160":"Huyện Thoại Sơn",
				"161":"Huyện Tịnh Biên",
				"162":"Huyện Tri Tôn",
				"163":"Thành phố Long Xuyên",
				"164":"Thị xã Châu Đốc",
				"165":"Thị xã Tân Châu"
			}
		},
		"7":{  
			"name":"Tỉnh Bà Rịa-Vũng Tàu",
			"districts":{  
				"166":"Huyện Châu Đức",
				"167":"Huyện Côn Đảo",
				"168":"Huyện Đất Đỏ",
				"169":"Huyện Long Điền",
				"170":"Huyện Tân Thành",
				"171":"Huyện Xuyên Mộc",
				"172":"Thành phố Vũng Tàu",
				"173":"Thị xã Bà Rịa"
			}
		},
		"8":{  
			"name":"Tỉnh Bắc Giang",
			"districts":{  
				"174":"Huyện Hiệp Hòa",
				"175":"Huyện Lạng Giang",
				"176":"Huyện Lục Nam",
				"177":"Huyện Lục Ngạn",
				"178":"Huyện Sơn Động",
				"179":"Huyện Tân Yên",
				"180":"Huyện Việt Yên",
				"181":"Huyện Yên Dũng",
				"182":"Huyện Yên Thế",
				"183":"Thành phố Bắc Giang"
			}
		},
		"9":{  
			"name":"Tỉnh Bắc Kạn",
			"districts":{  
				"184":"Huyện Ba Bể",
				"185":"Huyện Bạch Thông",
				"186":"Huyện Chợ Đồn",
				"187":"Huyện Chợ Mới",
				"188":"Huyện Na Rì",
				"189":"Huyện Ngân Sơn",
				"190":"Huyện Pác Nặm",
				"191":"Thị xã Bắc Kạn"
			}
		},
		"10":{  
			"name":"Tỉnh Bạc Liêu",
			"districts":{  
				"192":"Huyện Đông Hải",
				"193":"Huyện Giá Rai",
				"194":"Huyện Hòa Bình",
				"195":"Huyện Hồng Dân",
				"196":"Huyện Phước Long",
				"197":"Huyện Vĩnh Lợi",
				"198":"Thành Phố Bạc Liêu"
			}
		},
		"11":{  
			"name":"Tỉnh Bắc Ninh",
			"districts":{  
				"199":"Huyện Gia Bình",
				"200":"Huyện Lương Tài",
				"201":"Huyện Quế Võ",
				"202":"Huyện Thuận Thành",
				"203":"Huyện Tiên Du",
				"204":"Huyện Yên Phong",
				"205":"Thành phố Bắc Ninh",
				"206":"Thị xã Từ Sơn"
			}
		},
		"12":{  
			"name":"Tỉnh Bến Tre",
			"districts":{  
				"207":"Huyện Ba Tri",
				"208":"Huyện Bình Đại",
				"209":"Huyện Châu Thành",
				"210":"Huyện Chợ Lách",
				"211":"Huyện Giồng Trôm",
				"212":"Huyện Mỏ Cày Bắc",
				"213":"Huyện Mỏ Cày Nam",
				"214":"Huyện Thạnh Phú",
				"215":"Thành phố Bến Tre"
			}
		},
		"13":{  
			"name":"Tỉnh Bình Định",
			"districts":{  
				"216":"Huyện An Lão",
				"217":"Huyện An Nhơn",
				"218":"Huyện Hoài  Ân",
				"219":"Huyện Hoài Nhơn",
				"220":"Huyện Phù Mỹ",
				"221":"Huyện Phù cát",
				"222":"Huyện Tây Sơn",
				"223":"Huyện Tuy Phước",
				"224":"Huyện Vân Canh",
				"225":"Huyện Vĩnh Thạnh",
				"226":"Thành phố Quy Nhơn"
			}
		},
		"14":{  
			"name":"Tỉnh Bình Dương",
			"districts":{  
				"227":"Huyện Bến Cát",
				"228":"Huyện Dầu Tiếng",
				"229":"Huyện Dĩ An",
				"230":"Huyện Phú Giáo",
				"231":"Huyện Tân Uyên",
				"232":"Huyện Thuận An",
				"233":"Thị xã Thủ Dầu Một"
			}
		},
		"15":{  
			"name":"Tỉnh Bình Phước",
			"districts":{  
				"234":"Huyện Bù Đăng",
				"235":"Huyện Bù Đốp",
				"236":"Huyện Bù Gia Mập",
				"237":"Huyện Chơn Thành",
				"238":"Huyện Đồng Phú",
				"239":"Huyện Hớn Quản",
				"240":"Huyện Lộc Ninh",
				"241":"Thị xã Bình Long",
				"242":"Thị xã Đồng Xoài",
				"243":"Thị xã Phước Long"
			}
		},
		"16":{  
			"name":"Tỉnh Bình Thuận",
			"districts":{  
				"244":"Huyện  Đức Linh",
				"245":"Huyện Bắc Bình",
				"246":"Huyện Hàm Tân",
				"247":"Huyện Hàm Thuận Bắc",
				"248":"Huyện Hàm Thuận Nam",
				"249":"Huyện Phú Qúi",
				"250":"Huyện Tánh Linh",
				"251":"Huyện Tuy Phong",
				"252":"Thành phố Phan Thiết",
				"253":"Thị xã La Gi"
			}
		},
		"17":{  
			"name":"Tỉnh Cà Mau",
			"districts":{  
				"254":"Huyện Cái Nước",
				"255":"Huyện Đầm Dơi",
				"256":"Huyện Năm Căn",
				"257":"Huyện Ngọc Hiển",
				"258":"Huyện Phú Tân",
				"259":"Huyện Thới Bình",
				"260":"Huyện Trần Văn Thời",
				"261":"Huyện U Minh",
				"262":"Thành phố Cà Mau"
			}
		},
		"18":{  
			"name":"Tỉnh Cao Bằng",
			"districts":{  
				"263":"Huyện Bảo Lạc",
				"264":"Huyện Bảo Lâm",
				"265":"Huyện Hạ Lang",
				"266":"Huyện Hà Quảng",
				"267":"Huyện Hòa An",
				"268":"Huyện Nguyên Bình",
				"269":"Huyện Phục Hòa",
				"270":"Huyện Quảng Uyên",
				"271":"Huyện Thạch An",
				"272":"Huyện Thông Nông",
				"273":"Huyện Trà Lĩnh",
				"274":"Huyện Trùng Khánh",
				"275":"Thị xã Cao Bằng"
			}
		},
		"19":{  
			"name":"Tỉnh Đắk Lắk",
			"districts":{  
				"276":"Huyện Buôn Đôn",
				"277":"Huyện Cư Kuin",
				"278":"Huyện Cư MGar",
				"279":"Huyện Ea Kar",
				"280":"Huyện Ea Súp",
				"281":"Huyện EaHLeo",
				"282":"Huyện Krông Ana",
				"283":"Huyện Krông Bông",
				"284":"Huyện Krông Búk",
				"285":"Huyện Krông Năng",
				"286":"Huyện Krông Pắc",
				"287":"Huyện Lắk",
				"288":"Huyện MDrắk",
				"289":"Thành phố Buôn Ma Thuột",
				"290":"Thị xã Buôn Hồ"
			}
		},
		"20":{  
			"name":"Tỉnh Đắk Nông",
			"districts":{  
				"291":"Huyện Cư Jút",
				"292":"Huyện Đắk GLong",
				"293":"Huyện Đắk Mil",
				"294":"Huyện Đắk RLấp",
				"295":"Huyện Đắk Song",
				"296":"Huyện KRông Nô",
				"297":"Huyện Tuy Đức",
				"298":"Thị xã Gia Nghĩa"
			}
		},
		"21":{  
			"name":"Tỉnh Điện Biên",
			"districts":{  
				"299":"Huyện Điện Biên",
				"300":"Huyện Điện Biên Đông",
				"301":"Huyện Mường Chà",
				"302":"Huyện Mương Nhé",
				"303":"Huyện Mường ảng",
				"304":"Huyện Tủa Chùa",
				"305":"Huyện Tuần Giáo",
				"306":"Thành phố Điện Biên phủ",
				"307":"Thị xã Mường Lay"
			}
		},
		"22":{  
			"name":"Tỉnh Đồng Nai",
			"districts":{  
				"308":"Huyện Cẩm Mỹ",
				"309":"Huyện Định Quán",
				"310":"Huyện Long Thành",
				"311":"Huyện Nhơn Trạch",
				"312":"Huyện Tân Phú",
				"313":"Huyện Thống Nhất",
				"314":"Huyện Trảng Bom",
				"315":"Huyện Vĩnh Cửu",
				"316":"Huyện Xuân Lộc",
				"317":"Thành phố Biên Hòa",
				"318":"Thị xã Long Khánh"
			}
		},
		"23":{  
			"name":"Tỉnh Đồng Tháp",
			"districts":{  
				"319":"Huyện Cao Lãnh",
				"320":"Huyện Châu Thành",
				"321":"Huyện Hồng Ngự",
				"322":"Huyện Lai Vung",
				"323":"Huyện Lấp Vò",
				"324":"Huyện Tam Nông",
				"325":"Huyện Tân Hồng",
				"326":"Huyện Thanh Bình",
				"327":"Huyện Tháp Mười",
				"328":"Thành phố Cao Lãnh",
				"329":"Thị xã Hồng Ngự",
				"330":"Thị xã Sa Đéc"
			}
		},
		"24":{  
			"name":"Tỉnh Gia Lai",
			"districts":{  
				"331":"Huyện Chư Păh",
				"332":"Huyện Chư Pưh",
				"333":"Huyện Chư Sê",
				"334":"Huyện ChưPRông",
				"335":"Huyện Đăk Đoa",
				"336":"Huyện Đăk Pơ",
				"337":"Huyện Đức Cơ",
				"338":"Huyện Ia Grai",
				"339":"Huyện Ia Pa",
				"340":"Huyện KBang",
				"341":"Huyện KBang",
				"342":"Huyện Kông Chro",
				"343":"Huyện Krông Pa",
				"344":"Huyện Mang Yang",
				"345":"Huyện Phú Thiện",
				"346":"Thành phố Plei Ku",
				"347":"Thị xã AYun Pa",
				"348":"Thị xã An Khê"
			}
		},
		"25":{  
			"name":"Tỉnh Hà Giang",
			"districts":{  
				"349":"Huyện Bắc Mê",
				"350":"Huyện Bắc Quang",
				"351":"Huyện Đồng Văn",
				"352":"Huyện Hoàng Su Phì",
				"353":"Huyện Mèo Vạc",
				"354":"Huyện Quản Bạ",
				"355":"Huyện Quang Bình",
				"356":"Huyện Vị Xuyên",
				"357":"Huyện Xín Mần",
				"358":"Huyện Yên Minh",
				"359":"Thành Phố Hà Giang"
			}
		},
		"26":{  
			"name":"Tỉnh Hà Nam",
			"districts":{  
				"360":"Huyện Bình Lục",
				"361":"Huyện Duy Tiên",
				"362":"Huyện Kim Bảng",
				"363":"Huyện Lý Nhân",
				"364":"Huyện Thanh Liêm",
				"365":"Thành phố Phủ Lý"
			}
		},
		"27":{  
			"name":"Tỉnh Hà Tĩnh",
			"districts":{  
				"366":"Huyện Cẩm Xuyên",
				"367":"Huyện Can Lộc",
				"368":"Huyện Đức Thọ",
				"369":"Huyện Hương Khê",
				"370":"Huyện Hương Sơn",
				"371":"Huyện Kỳ Anh",
				"372":"Huyện Lộc Hà",
				"373":"Huyện Nghi Xuân",
				"374":"Huyện Thạch Hà",
				"375":"Huyện Vũ Quang",
				"376":"Thành phố Hà Tĩnh",
				"377":"Thị xã Hồng Lĩnh"
			}
		},
		"28":{  
			"name":"Tỉnh Hải Dương",
			"districts":{  
				"378":"Huyện Bình Giang",
				"379":"Huyện Cẩm Giàng",
				"380":"Huyện Gia Lộc",
				"381":"Huyện Kim Thành",
				"382":"Huyện Kinh Môn",
				"383":"Huyện Nam Sách",
				"384":"Huyện Ninh Giang",
				"385":"Huyện Thanh Hà",
				"386":"Huyện Thanh Miện",
				"387":"Huyện Tứ Kỳ",
				"388":"Thành phố Hải Dương",
				"389":"Thị xã Chí Linh"
			}
		},
		"29":{  
			"name":"Tỉnh Hậu Giang",
			"districts":{  
				"390":"Huyện Châu Thành",
				"391":"Huyện Châu Thành A",
				"392":"Huyện Long Mỹ",
				"393":"Huyện Phụng Hiệp",
				"394":"Huyện Vị Thủy",
				"395":"Thành Phố Vị Thanh",
				"396":"Thị xã Ngã Bảy"
			}
		},
		"30":{  
			"name":"Tỉnh Hòa Bình",
			"districts":{  
				"397":"Huyện Cao Phong",
				"398":"Huyện Đà Bắc",
				"399":"Huyện Kim Bôi",
				"400":"Huyện Kỳ Sơn",
				"401":"Huyện Lạc Sơn",
				"402":"Huyện Lạc Thủy",
				"403":"Huyện Lương Sơn",
				"404":"Huyện Mai Châu",
				"405":"Huyện Tân Lạc",
				"406":"Huyện Yên Thủy",
				"407":"Thành phố Hòa Bình"
			}
		},
		"31":{  
			"name":"Tỉnh Hưng Yên",
			"districts":{  
				"408":"Huyện Ân Thi",
				"409":"Huyện Khoái Châu",
				"410":"Huyện Kim Động",
				"411":"Huyện Mỹ Hào",
				"412":"Huyện Phù Cừ",
				"413":"Huyện Tiên Lữ",
				"414":"Huyện Văn Giang",
				"415":"Huyện Văn Lâm",
				"416":"Huyện Yên Mỹ",
				"417":"Thành phố Hưng Yên"
			}
		},
		"32":{  
			"name":"Tỉnh Khánh Hòa",
			"districts":{  
				"418":"Huyện Cam Lâm",
				"419":"Huyện Diên Khánh",
				"420":"Huyện Khánh Sơn",
				"421":"Huyện Khánh Vĩnh",
				"422":"Huyện Ninh Hòa",
				"423":"Huyện Trường Sa",
				"424":"Huyện Vạn Ninh",
				"425":"Thành phố Nha Trang",
				"426":"Thị xã Cam Ranh"
			}
		},
		"33":{  
			"name":"Tỉnh Kiên Giang",
			"districts":{  
				"427":"Huyện An Biên",
				"428":"Huyện An Minh",
				"429":"Huyện Châu Thành",
				"430":"Huyện Giang Thành",
				"431":"Huyện Giồng Riềng",
				"432":"Huyện Gò Quao",
				"433":"Huyện Hòn Đất",
				"434":"Huyện Kiên Hải",
				"435":"Huyện Kiên Lương",
				"436":"Huyện Phú Quốc",
				"437":"Huyện Tân Hiệp",
				"438":"Huyện U Minh Thượng",
				"439":"Huyện Vĩnh Thuận",
				"440":"Thành phố Rạch Giá",
				"441":"Thị xã Hà Tiên"
			}
		},
		"34":{  
			"name":"Tỉnh Kon Tum",
			"districts":{  
				"442":"Huyện Đắk Glei",
				"443":"Huyện Đắk Hà",
				"444":"Huyện Đắk Tô",
				"445":"Huyện Kon Plông",
				"446":"Huyện Kon Rẫy",
				"447":"Huyện Ngọc Hồi",
				"448":"Huyện Sa Thầy",
				"449":"Huyện Tu Mơ Rông",
				"450":"Thành phố Kon Tum"
			}
		},
		"35":{  
			"name":"Tỉnh Lai Châu",
			"districts":{  
				"451":"Huyện Mường Tè",
				"452":"Huyện Phong Thổ",
				"453":"Huyện Sìn Hồ",
				"454":"Huyện Tam Đường",
				"455":"Huyện Tân Uyên",
				"456":"Huyện Than Uyên",
				"457":"Thị xã Lai Châu"
			}
		},
		"36":{  
			"name":"Tỉnh Lâm Đồng",
			"districts":{  
				"458":"Huyện Bảo Lâm",
				"459":"Huyện Cát Tiên",
				"460":"Huyện Đạ Huoai",
				"461":"Huyện Đạ Tẻh",
				"462":"Huyện Đam Rông",
				"463":"Huyện Di Linh",
				"464":"Huyện Đơn Dương",
				"465":"Huyện Đức Trọng",
				"466":"Huyện Lạc Dương",
				"467":"Huyện Lâm Hà",
				"468":"Thành phố Bảo Lộc",
				"469":"Thành phố Đà Lạt"
			}
		},
		"37":{  
			"name":"Tỉnh Lạng Sơn",
			"districts":{  
				"470":"Huyện Bắc Sơn",
				"471":"Huyện Bình Gia",
				"472":"Huyện Cao Lộc",
				"473":"Huyện Chi Lăng",
				"474":"Huyện Đình Lập",
				"475":"Huyện Hữu Lũng",
				"476":"Huyện Lộc Bình",
				"477":"Huyện Tràng Định",
				"478":"Huyện Văn Lãng",
				"479":"Huyện Văn Quan",
				"480":"Thành phố Lạng Sơn"
			}
		},
		"38":{  
			"name":"Tỉnh Lào Cai",
			"districts":{  
				"481":"Huyện Bắc Hà",
				"482":"Huyện Bảo Thắng",
				"483":"Huyện Bảo Yên",
				"484":"Huyện Bát Xát",
				"485":"Huyện Mường Khương",
				"486":"Huyện Sa Pa",
				"487":"Huyện Si Ma Cai",
				"488":"Huyện Văn Bàn",
				"489":"Thành phố Lào Cai"
			}
		},
		"39":{  
			"name":"Tỉnh Long An",
			"districts":{  
				"490":"Huyện Bến Lức",
				"491":"Huyện Cần Đước",
				"492":"Huyện Cần Giuộc",
				"493":"Huyện Châu Thành",
				"494":"Huyện Đức Hòa",
				"495":"Huyện Đức Huệ",
				"496":"Huyện Mộc Hóa",
				"497":"Huyện Tân Hưng",
				"498":"Huyện Tân Thạnh",
				"499":"Huyện Tân Trụ",
				"500":"Huyện Thạnh Hóa",
				"501":"Huyện Thủ Thừa",
				"502":"Huyện Vĩnh Hưng",
				"503":"Thành phố Tân An"
			}
		},
		"40":{  
			"name":"Tỉnh Nam Định",
			"districts":{  
				"504":"Huyện Giao Thủy",
				"505":"Huyện Hải Hậu",
				"506":"Huyện Mỹ Lộc",
				"507":"Huyện Nam Trực",
				"508":"Huyện Nghĩa Hưng",
				"509":"Huyện Trực Ninh",
				"510":"Huyện Vụ Bản",
				"511":"Huyện Xuân Trường",
				"512":"Huyện ý Yên",
				"513":"Thành phố Nam Định"
			}
		},
		"41":{  
			"name":"Tỉnh Nghệ An",
			"districts":{  
				"514":"Huyện Anh Sơn",
				"515":"Huyện Con Cuông",
				"516":"Huyện Diễn Châu",
				"517":"Huyện Đô Lương",
				"518":"Huyện Hưng Nguyên",
				"519":"Huyện Kỳ Sơn",
				"520":"Huyện Nam Đàn",
				"521":"Huyện Nghi Lộc",
				"522":"Huyện Nghĩa Đàn",
				"523":"Huyện Quế Phong",
				"524":"Huyện Quỳ Châu",
				"525":"Huyện Quỳ Hợp",
				"526":"Huyện Quỳnh Lưu",
				"527":"Huyện Tân Kỳ",
				"528":"Huyện Thanh Chương",
				"529":"Huyện Tương Dương",
				"530":"Huyện Yên Thành",
				"531":"Thành phố Vinh",
				"532":"Thị xã Cửa Lò",
				"533":"Thị xã Thái Hòa"
			}
		},
		"42":{  
			"name":"Tỉnh Ninh Bình",
			"districts":{  
				"534":"Huyện Gia Viễn",
				"535":"Huyện Hoa Lư",
				"536":"Huyện Kim Sơn",
				"537":"Huyện Nho Quan",
				"538":"Huyện Yên Khánh",
				"539":"Huyện Yên Mô",
				"540":"Thành phố Ninh Bình",
				"541":"Thị xã Tam Điệp"
			}
		},
		"43":{  
			"name":"Tỉnh Ninh Thuận",
			"districts":{  
				"542":"Huyên Bác ái",
				"543":"Huyện Ninh Hải",
				"544":"Huyện Ninh Phước",
				"545":"Huyện Ninh Sơn",
				"546":"Huyện Thuận Bắc",
				"547":"Huyện Thuận Nam",
				"548":"Thành phố Phan Rang-Tháp Chàm"
			}
		},
		"44":{  
			"name":"Tỉnh Phú Thọ",
			"districts":{  
				"549":"Huyện Cẩm Khê",
				"550":"Huyện Đoan Hùng",
				"551":"Huyện Hạ Hòa",
				"552":"Huyện Lâm Thao",
				"553":"Huyện Phù Ninh",
				"554":"Huyện Tam Nông",
				"555":"Huyện Tân Sơn",
				"556":"Huyện Thanh Ba",
				"557":"Huyện Thanh Sơn",
				"558":"Huyện Thanh Thủy",
				"559":"Huyện Yên Lập",
				"560":"Thành phố Việt Trì",
				"561":"Thị xã Phú Thọ"
			}
		},
		"45":{  
			"name":"Tỉnh Phú Yên",
			"districts":{  
				"562":"Huyện Đông Hòa",
				"563":"Huyện Đồng Xuân",
				"564":"Huyện Phú Hòa",
				"565":"Huyện Sơn Hòa",
				"566":"Huyện Sông Hinh",
				"567":"Huyện Tây Hòa",
				"568":"Huyện Tuy An",
				"569":"Thành phố Tuy Hòa",
				"570":"Thị xã Sông Cầu"
			}
		},
		"46":{  
			"name":"Tỉnh Quảng Bình",
			"districts":{  
				"571":"Huyện Bố Trạch",
				"572":"Huyện Lệ Thủy",
				"573":"Huyện MinhHoá",
				"574":"Huyện Quảng Ninh",
				"575":"Huyện Quảng Trạch",
				"576":"Huyện Tuyên Hoá",
				"577":"Thành phố Đồng Hới"
			}
		},
		"47":{  
			"name":"Tỉnh Quảng Nam",
			"districts":{  
				"578":"Huyện Bắc Trà My",
				"579":"Huyện Đại Lộc",
				"580":"Huyện Điện Bàn",
				"581":"Huyện Đông Giang",
				"582":"Huyện Duy Xuyên",
				"583":"Huyện Hiệp Đức",
				"584":"Huyện Nam Giang",
				"585":"Huyện Nam Trà My",
				"586":"Huyện Nông Sơn",
				"587":"Huyện Núi Thành",
				"588":"Huyện Phú Ninh",
				"589":"Huyện Phước Sơn",
				"590":"Huyện Quế Sơn",
				"591":"Huyện Tây Giang",
				"592":"Huyện Thăng Bình",
				"593":"Huyện Tiên Phước",
				"594":"Thành phố Hội An",
				"595":"Thành phố Tam Kỳ"
			}
		},
		"48":{  
			"name":"Tỉnh Quảng Ngãi",
			"districts":{  
				"596":"Huyện Ba Tơ",
				"597":"Huyện Bình Sơn",
				"598":"Huyện Đức Phổ",
				"599":"Huyện Lý sơn",
				"600":"Huyện Minh Long",
				"601":"Huyện Mộ Đức",
				"602":"Huyện Nghĩa Hành",
				"603":"Huyện Sơn Hà",
				"604":"Huyện Sơn Tây",
				"605":"Huyện Sơn Tịnh",
				"606":"Huyện Tây Trà",
				"607":"Huyện Trà Bồng",
				"608":"Huyện Tư Nghĩa",
				"609":"Thành phố Quảng Ngãi"
			}
		},
		"49":{  
			"name":"Tỉnh Quảng Ninh",
			"districts":{  
				"610":"Huyện Ba Chẽ",
				"611":"Huyện Bình Liêu",
				"612":"Huyện Cô Tô",
				"613":"Huyện Đầm Hà",
				"614":"Huyện Đông Triều",
				"615":"Huyện Hải Hà",
				"616":"Huyện Hoành Bồ",
				"617":"Huyện Tiên Yên",
				"618":"Huyện Vân Đồn",
				"619":"Huyện Yên Hưng",
				"620":"Thành phố Hạ Long",
				"621":"Thành phố Móng Cái",
				"622":"Thị xã Cẩm Phả",
				"623":"Thị xã Uông Bí"
			}
		},
		"50":{  
			"name":"Tỉnh Quảng Trị",
			"districts":{  
				"624":"Huyện Cam Lộ",
				"625":"Huyện Cồn Cỏ",
				"626":"Huyện Đa Krông",
				"627":"Huyện Gio Linh",
				"628":"Huyện Hải Lăng",
				"629":"Huyện Hướng Hóa",
				"630":"Huyện Triệu Phong",
				"631":"Huyện Vính Linh",
				"632":"Thành phố Đông Hà",
				"633":"Thị xã Quảng Trị"
			}
		},
		"51":{  
			"name":"Tỉnh Sóc Trăng",
			"districts":{  
				"634":"Huyện Châu Thành",
				"635":"Huyện Cù Lao Dung",
				"636":"Huyện Kế Sách",
				"637":"Huyện Long Phú",
				"638":"Huyện Mỹ Tú",
				"639":"Huyện Mỹ Xuyên",
				"640":"Huyện Ngã Năm",
				"641":"Huyện Thạnh Trị",
				"642":"Huyện Trần Đề",
				"643":"Huyện Vĩnh Châu",
				"644":"Thành phố Sóc Trăng"
			}
		},
		"52":{  
			"name":"Tỉnh Sơn La",
			"districts":{  
				"645":"Huyện Bắc Yên",
				"646":"Huyện Mai Sơn",
				"647":"Huyện Mộc Châu",
				"648":"Huyện Mường La",
				"649":"Huyện Phù Yên",
				"650":"Huyện Quỳnh Nhai",
				"651":"Huyện Sông Mã",
				"652":"Huyện Sốp Cộp",
				"653":"Huyện Thuận Châu",
				"654":"Huyện Yên Châu",
				"655":"Thành phố Sơn La"
			}
		},
		"53":{  
			"name":"Tỉnh Tây Ninh",
			"districts":{  
				"656":"Huyện Bến Cầu",
				"657":"Huyện Châu Thành",
				"658":"Huyện Dương Minh Châu",
				"659":"Huyện Gò Dầu",
				"660":"Huyện Hòa Thành",
				"661":"Huyện Tân Biên",
				"662":"Huyện Tân Châu",
				"663":"Huyện Trảng Bàng",
				"664":"Thị xã Tây Ninh"
			}
		},
		"54":{  
			"name":"Tỉnh Thái Bình",
			"districts":{  
				"665":"Huyện Đông Hưng",
				"666":"Huyện Hưng Hà",
				"667":"Huyện Kiến Xương",
				"668":"Huyện Quỳnh Phụ",
				"669":"Huyện Thái Thụy",
				"670":"Huyện Tiền Hải",
				"671":"Huyện Vũ Thư",
				"672":"Thành phố Thái Bình"
			}
		},
		"55":{  
			"name":"Tỉnh Thái Nguyên",
			"districts":{  
				"673":"Huyện Đại Từ",
				"674":"Huyện Định Hóa",
				"675":"Huyện Đồng Hỷ",
				"676":"Huyện Phổ Yên",
				"677":"Huyện Phú Bình",
				"678":"Huyện Phú Lương",
				"679":"Huyện Võ Nhai",
				"680":"Thành phố Thái Nguyên",
				"681":"Thị xã Sông Công"
			}
		},
		"56":{  
			"name":"Tỉnh Thanh Hóa",
			"districts":{  
				"682":"Huyện Bá Thước",
				"683":"Huyện Cẩm Thủy",
				"684":"Huyện Đông Sơn",
				"685":"Huyện Hà Trung",
				"686":"Huyện Hậu Lộc",
				"687":"Huyện Hoằng Hóa",
				"688":"Huyện Lang Chánh",
				"689":"Huyện Mường Lát",
				"690":"Huyện Nga Sơn",
				"691":"Huyện Ngọc Lặc",
				"692":"Huyện Như Thanh",
				"693":"Huyện Như Xuân",
				"694":"Huyện Nông Cống",
				"695":"Huyện Quan Hóa",
				"696":"Huyện Quan Sơn",
				"697":"Huyện Quảng Xương",
				"698":"Huyện Thạch Thành",
				"699":"Huyện Thiệu Hóa",
				"700":"Huyện Thọ Xuân",
				"701":"Huyện Thường Xuân",
				"702":"Huyện Tĩnh Gia",
				"703":"Huyện Triệu Sơn",
				"704":"Huyện Vĩnh Lộc",
				"705":"Huyện Yên Định",
				"706":"Thành phố Thanh Hóa",
				"707":"Thị xã Bỉm Sơn",
				"708":"Thị xã Sầm Sơn"
			}
		},
		"57":{  
			"name":"Tỉnh Thừa Thiên Huế",
			"districts":{  
				"709":"Huyện A Lưới",
				"710":"Huyện Hương Trà",
				"711":"Huyện Nam Dông",
				"712":"Huyện Phong Điền",
				"713":"Huyện Phú Lộc",
				"714":"Huyện Phú Vang",
				"715":"Huyện Quảng Điền",
				"716":"Thành phố Huế",
				"717":"thị xã Hương Thủy"
			}
		},
		"58":{  
			"name":"Tỉnh Tiền Giang",
			"districts":{  
				"718":"Huyện Cái Bè",
				"719":"Huyện Cai Lậy",
				"720":"Huyện Châu Thành",
				"721":"Huyện Chợ Gạo",
				"722":"Huyện Gò Công Đông",
				"723":"Huyện Gò Công Tây",
				"724":"Huyện Tân Phú Đông",
				"725":"Huyện Tân Phước",
				"726":"Thành phố Mỹ Tho",
				"727":"Thị xã Gò Công"
			}
		},
		"59":{  
			"name":"Tỉnh Trà Vinh",
			"districts":{  
				"728":"Huyện Càng Long",
				"729":"Huyện Cầu Kè",
				"730":"Huyện Cầu Ngang",
				"731":"Huyện Châu Thành",
				"732":"Huyện Duyên Hải",
				"733":"Huyện Tiểu Cần",
				"734":"Huyện Trà Cú",
				"735":"Thành phố Trà Vinh"
			}
		},
		"60":{  
			"name":"Tỉnh Tuyên Quang",
			"districts":{  
				"736":"Huyện Chiêm Hóa",
				"737":"Huyện Hàm Yên",
				"738":"Huyện Na hang",
				"739":"Huyện Sơn Dương",
				"740":"Huyện Yên Sơn",
				"741":"Thành phố Tuyên Quang"
			}
		},
		"61":{  
			"name":"Tỉnh Vĩnh Long",
			"districts":{  
				"742":"Huyện Bình Minh",
				"743":"Huyện Bình Tân",
				"744":"Huyện Long Hồ",
				"745":"Huyện Mang Thít",
				"746":"Huyện Tam Bình",
				"747":"Huyện Trà Ôn",
				"748":"Huyện Vũng Liêm",
				"749":"Thành phố Vĩnh Long"
			}
		},
		"62":{  
			"name":"Tỉnh Vĩnh Phúc",
			"districts":{  
				"750":"Huyện Bình Xuyên",
				"751":"Huyện Lập Thạch",
				"752":"Huyện Sông Lô",
				"753":"Huyện Tam Đảo",
				"754":"Huyện Tam Dương",
				"755":"Huyện Vĩnh Tường",
				"756":"Huyện Yên Lạc",
				"757":"Thành phố Vĩnh Yên",
				"758":"Thị xã Phúc Yên"
			}
		},
		"63":{  
			"name":"Tỉnh Yên Bái",
			"districts":{  
				"759":"Huyện Lục Yên",
				"760":"Huyện Mù Cang Chải",
				"761":"Huyện Trạm Tấu",
				"762":"Huyện Trấn Yên",
				"763":"Huyện Văn Chấn",
				"764":"Huyện Văn Yên",
				"765":"Huyện Yên Bình",
				"766":"Thành phố Yên Bái",
				"767":"Thị xã Nghĩa Lộ"
			}
		}
	}
	]);
})();
;
(function() {
    'use strict';

    Application.registerModule('bzUser');

    angular
        .module('bzUser', ['xeditable'])
        // .constant('salemanScopes', [
        //     { name: 'Kid', value: 'kid' },
        //     { name: 'Work', value: 'work' }
        // ])
        .run(run);

    function run(authSvc, editableOptions) {
        editableOptions.theme = 'bs3';
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzUnit');

    angular
        .module('bzUnit', [])
        .run(run);

    function run() {
        // console.log("Preparing to register module Unit");
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzTest');

    angular
        .module('bzTest', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzSupplier');

    angular
        .module('bzSupplier', [])
        .run(run);

    function run() {
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzTag');

    angular
        .module('bzTag', ['xeditable'])
        .run(run);

    function run(editableOptions) {
        editableOptions.theme = 'bs3';
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzShippingFee');

    angular
        .module('bzShippingFee', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzSearch');

    angular
        .module('bzSearch', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzReport');

    angular
        .module('bzReport', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzPromotion');

    angular
        .module('bzPromotion', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzProduct');

    angular
        .module('bzProduct', [])
        .run(run);

    function run() {
        
    }
})();
;
(function () {
    'use strict';

    Application.registerModule('bzOrder');

    angular
        .module('bzOrder', [])
        .run(run);

    function run() {

    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzAuditLog');

    angular
        .module('bzAuditLog', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzImportProduct');

    angular
        .module('bzImportProduct', [])
        .run(run);

    function run() {
        
    }
})();
;(function(){
	'use strict';

	Application.registerModule('bzDashboard');

	angular
	.module('bzDashboard', [])
	.run(run);

	function run(authSvc){

	}
})();
;
(function() {
    'use strict';

    Application.registerModule('bzCoupon');

    angular
        .module('bzCoupon', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzConfig');

    angular
        .module('bzConfig', [])
        .run(run);

    function run() {
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzCertificate');

    angular
        .module('bzCertificate', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzCategory');

    angular
        .module('bzCategory', ['angular-speakingurl'])
        .run(run);

    function run() {
    }
})();
;
(function () {
    'use strict';

    Application.registerModule('bzBlog');

    angular
        .module('bzBlog', [])
        .constant('CKEditorOptBlog', {
            imageUploadUrl: settings.services.uploadApi + '/upload/for-ckeditor/image-upload?type=blog_image&prefix=blog_image',
            filebrowserUploadUrl: settings.services.uploadApi + '/upload/for-ckeditor/file-browser-upload?type=blog_image&prefix=blog_image',
            removePlugins: 'about,bidi,flash,horizontalrule,language,save,specialchar'
            // filebrowserBrowseUrl : settings.services.uploadApi + '/list/img-content-product',
            // filebrowserWindowWidth : '1000',
            // filebrowserWindowHeight : '700' cke_button__save
        })
        .run(run);

    function run() {
    }
})();
;
(function () {
    'use strict';

    Application.registerModule('bzBanner');

    angular
        .module('bzBanner', [])
        .run(run);

    function run() {
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzPermission');

    angular
        .module('bzPermission', ['angular-speakingurl'])
        .run(run);

    function run() {
        
    }
})();
;(function(){
	'use strict';

	Application.registerModule('bzAuth');

	angular
	.module('bzAuth', [])
	.run(run);

	function run(authSvc){
		
	}
})();
(function () {
	'use strict';

	angular
		.module('bzUser')
		.constant('userRoles', [
			{ name: 'Super Admin', value: 'super-admin' },
			{ name: 'Admin', value: 'admin' },
			{ name: 'User', value: 'user' },
			{ name: 'Customer', value: 'customer' }
		]);
})();
;
(function () {
    'use strict';

    Application.registerModule('bzTag');

    angular
        .module('bzTag', [])
        .constant('listTagTypeBlog', [
            { name: 'Góc bếp', value: 'GB' },
            { name: 'Mẹo vặt', value: 'MV' },
            { name: 'Tin tức', value: 'TT' },
            // { name: 'Chương trình khuyến mãi', value: 'KM' },
        ]);
})();

;
(function () {
    'use strict';

    Application.registerModule('bzProduct');

    angular
        .module('bzProduct', [])
        .constant('CKEditorOptPro', {
            imageUploadUrl: settings.services.uploadApi + '/upload/for-ckeditor/image-upload?type=product_image&prefix=product_image',
            filebrowserUploadUrl: settings.services.uploadApi + '/upload/for-ckeditor/file-browser-upload?type=product_image&prefix=product_image',
            removePlugins: 'about,bidi,blockquote,div,flash,horizontalrule,language,pagebreak,save,smiley,sourcearea,specialchar'
            // filebrowserBrowseUrl : settings.services.uploadApi + '/list/img-content-product',
            // filebrowserWindowWidth : '1000',
            // filebrowserWindowHeight : '700' cke_button__save
        })
        .constant('statusProduct', [
            {
                value: 'HH',
                name: 'Hết hàng'
            },
            {
                value: 'HSV',
                name: 'Hàng sắp về'
            },
            {
                value: 'CH',
                name: 'Còn hàng'
            },
        ]);
})();
;
(function () {
    'use strict';

    Application.registerModule('bzOrder');

    angular
        .module('bzOrder', [])
        .constant('statusOrderList', [
            {
                value: 'PROCCESS',
                name: 'Đang xử lý',
                group: '',
                bgColor: '#6d90f5'
            },
            {
                value: 'FINISH',
                name: 'Hoàn thành',
                group: '',
                bgColor: '#0dd077'
            },
            {
                value: 'CANCEL',
                name: 'Đã hủy',
                group: '',
                bgColor: '#ed7a7c',
                showPopup: true
            },
        ]).constant('shipperList', [
            {
                value: 'MHV',
                name: 'Mua Hàng Việt',
                group: ''
            },
            {
                value: 'SPT',
                name: 'SPT',
                group: ''
            },
            {
                value: 'AHM',
                name: 'Ahamove',
                group: ''
            },
            {
                value: 'GHN',
                name: 'GHN',
                group: ''
            }
        ]).constant('listVocative', [
            { name: "Anh", value: "Anh" },
            { name: "Chị", value: "Chị" },
            { name: "Cô", value: "Cô" },
            { name: "Chú", value: "Chú" },
            { name: "Bác", value: "Bác" },
            { name: "Ông", value: "Ông" },
            { name: "Bà", value: "Bà" }
        ]);
})();
;
(function () {
    'use strict';

    Application.registerModule('bzPermisstion');

    angular
        .module('bzPermisstion', [])
        .constant('listResource', [
            'dashboard', 'blog', 'product', 'user', 'promotion', 'order', 'unit', 'supplier',
            'category', 'shipping', 'tag', 'coupon', 'config', 'certificate', 'import_product',
            'search', 'banner', 'acl', 'log'
        ])
        .constant('listAction', [
            { name: 'Xem', value: 'view' },
            { name: 'Thêm', value: 'add' },
            { name: 'Sửa', value: 'edit' },
            { name: 'Xoá', value: 'delete' },
            { name: 'Trích xuất', value: 'export' },
        ]);
    // .constant('listRole', [
    //     { name: 'Admin', value: 'admin' },
    //     { name: 'Super Admin', value: 'supper-admin' },
    //     { name: 'User', value: 'user' },
    //     { name: 'Customer', value: 'customer' },
    //     { name: 'Guest', value: 'guest' }
    // ]);
})();
(function () {
    'use strict';

    angular
        .module('bzUser')
        .service('userSvc', userSvc)
        .factory('userFac', userFac)

    function userFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function userSvc($q, $window, bzResourceSvc, userFac) {
        return {
            create: create,
            update: update,
            getRoles: getRoles,
        };

        function create(data, id) {
            var createData = new userFac(data);

            return createData.$save({ method: 'user' });
        }

        function update(data, id) {
            var createData = new userFac(data);

            return createData.$update({ method: 'user', id: id });
        }

        function getRoles() {
            var getData = new userFac();
            return getData.$get({ method: 'roles' });
        }
    }

})();
(function() {
    'use strict';

    angular
        .module('bzUnit')
        .service('unitSvc', unitSvc)
        .factory('unitFac', unitFac);

    function unitFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function unitSvc($q, $window, bzResourceSvc, unitFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get
        };

        function create(data, id) {
            var createData = new unitFac(data);

            return createData.$save({ method: 'unit' });
        }

        function update(data, id) {
            var unitFactory = new unitFac(data);
            return unitFactory.$update({ method: 'unit', id: id });
        }

        function getAll(data){
            var unitFactory = new unitFac(data);
            return unitFactory.$get({method: 'unit'});
        }
        function get (id){
             var unitFactory = new unitFac();
            return unitFactory.$get({method: 'unit', id: id});
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzTest')
        .service('testSvc', testSvc)
        .factory('testFac', testFac)
        .factory('testApiFac', testApiFac);


    function testFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function testApiFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function testSvc($q, $window, bzResourceSvc, testFac, testApiFac) {
        return {
            resize: resize,
            uploadBase64: uploadBase64
        };

        function resize(data) {
            var resizeData = new testFac(data);
            return resizeData.$save({ method: 'resize-img' });
        }

        function uploadBase64(data) {
            var uploadBase64Data = new testApiFac(data);
            return uploadBase64Data.$save({ method: 'upload', id: 'base64' });
        }

    }
})();
(function() {
    'use strict';

    angular
        .module('bzSupplier')
        .service('supplierSvc', supplierSvc)
        .factory('supplierFac', supplierFac);

    function supplierFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function supplierSvc($q, $window, bzResourceSvc, supplierFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get
        };

        function create(data, id) {
            var createData = new supplierFac(data);
            return createData.$save({ method: 'supplier' });
        }

        function update(data, id) {
            var supplierFactory = new supplierFac(data);
            return supplierFactory.$update({ method: 'supplier', id: id });
        }

        function getAll(data){
            var supplierFactory = new supplierFac(data);
            return supplierFactory.$get({method: 'supplier'});
        }
        function get (id){
             var supplierFactory = new supplierFac();
            return supplierFactory.$get({method: 'supplier', id: id});
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzTag')
        .factory('tagFac', tagFac)
        .service('tagSvc', tagSvc);

    function tagFac(bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.adminUrl + '/:method/:id/:type/:expire', { method: '@method', id: '@id', type: '@type', expire: '@expire' });
    }

    function tagSvc($q, tagFac) {
        return {
            getAll: getAll,
            get: get,
            create: create,
            update: update,
            getProductById: getProductById,
            getListProduct: getListProduct,
            getProductByTag: getProductByTag,

        };

        function getAll() {
            var list = new tagFac();
            // console.log(createData);

            return list.$get({ method: 'tag' });
        }

        function get(id) {
            var getByID = new tagFac();
            return getByID.$get({ method: 'tag', id: id, type: "" });
        }

        function create(data) {
            var createData = new tagFac(data);
            return createData.$save({ method: 'tag', type: "" });
        }

        function update(data, id) {
            var updateData = new tagFac(data);

            return updateData.$update({ method: 'tag', id: id, type: "" });
        }
        function getProductById(id) {
            var getProductById = new tagFac();
            return getProductById.$get({ method: 'product', id: id });
        }

        function getListProduct(id, type) {
            var getListProduct = new tagFac();
            return getListProduct.$get({ method: 'listProduct', id: id, type: type });
        }

        function getProductByTag(id, type, expire) {
            var getProductByTagFac = new tagFac();
            return getProductByTagFac.$get({ method: 'tagProduct', id: id, type: type, expire: expire });
        }




    }
})();
(function () {
    'use strict';

    angular
        .module('bzShippingFee')
        .factory('shippingfeeFac', shippingfeeFac)
        .service('shippingfeeSvc', shippingfeeSvc);

    function shippingfeeFac(bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.adminUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function shippingfeeSvc($q, shippingfeeFac) {
        return {
            getAll: getAll,
            getShippingFeeDefault: getShippingFeeDefault,
            getAllNoPaging: getAllNoPaging,
            get: get,
            create: create,
            update: update,
        };

        function getAll() {
            var list = new shippingfeeFac();
            return list.$get({ method: 'shippingfee' });
        }
        function getAllNoPaging() {
            var list = new shippingfeeFac();
            // console.log(createData);

            return list.$get({ method: 'all-shippingfee' });
        }

        function getShippingFeeDefault() {
            var list = new shippingfeeFac();
            return list.$get({ method: 'all-shippingfee-config' });
        }

        function getAllNoPaging() {
            var list = new shippingfeeFac();
            return list.$get({ method: 'all-shippingfee' });
        }

        function get(id) {
            var getByID = new shippingfeeFac();
            // console.log(createData);

            return getByID.$get({ method: 'shippingfee', id: id });
        }

        function create(data) {
            // console.log(data);
            var createData = new shippingfeeFac(data);
            // console.log(createData);

            return createData.$save({ method: 'shippingfee' });
        }

        function update(data, id) {
            var updateData = new shippingfeeFac(data);

            return updateData.$update({ method: 'shippingfee', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzSearch')
        .service('searchSvc', searchSvc)
        .service('searchFac', searchFac);

    function searchFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function searchSvc($q, $window, bzResourceSvc, searchFac) {
        return {
            getAll: getAll,
            create: create,
            active: active,
            edit: edit,
            update: update,
            del: del
        };

        function getAll(data) {
            data.method = 'search';
            var getData = new searchFac();
            return getData.$get(data);
        }

        function create(data) {
            var createData = new searchFac(data);
            return createData.$save({ method: 'search' });
        }

        function edit(id) {
            var editData = new searchFac();
            return editData.$get({ method: 'search', id: id });
        }

        function update(data, id) {
            var updateData = new searchFac(data);
            return updateData.$save({ method: 'search', id: id });
        }

        function del(id) {
            var deleteData = new searchFac();
            return deleteData.$delete({ method: 'search', id: id });
        }

        function active(id) {
            var activeData = new searchFac();
            return activeData.$get({ method: 'search-active', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzProduct')
        .service('reportSvc', reportSvc)
        .service('reportFac', reportFac);

    function reportFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function reportSvc($q, $window, bzResourceSvc, reportFac, apiFac) {
        return {
            reportProductOrder: reportProductOrder,
            reportProductADay: reportProductADay
        };

        function reportProductOrder(query) {
            query.method = 'report-product-order';
            var report = new reportFac();
            return report.$get(query);
        }

        function reportProductADay(query) {
            query.method = 'report-product-a-day';
            var report = new reportFac();
            return report.$get(query);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzPromotion')
        .factory('promotionFac', promotionFac)
        .service('promotionSvc', promotionSvc);

    function promotionFac(bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.adminUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function promotionSvc($q, promotionFac) {
        return {
            getAll: getAll,
            add: add,
            create: create,
            edit: edit,
            update: update,
            delete: del,
        };

        function getAll(query) {
            query.method = 'promotion';
            var data = new promotionFac()
            return data.$get(query);
        }

        function add(data) {
            var addData = new promotionFac(data);
            return addData.$get({ method: 'promotion-add' });
        }

        function create(data) {
            var createData = new promotionFac(data);
            return createData.$save({ method: 'promotion' });
        }

        function edit(id) {
            var editData = new promotionFac();
            return editData.$get({ method: 'promotion', id: id });
        }

        function update(data, id) {
            var updateData = new promotionFac(data);
            return updateData.$save({ method: 'promotion', id: id});
        }

        function del(id) {
            var deleteData = new promotionFac();
            return deleteData.$delete({ method: 'promotion', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzProduct')
        .service('productSvc', productSvc)
        .service('productFac', productFac)
        .service('apiFac', apiFac);

    function productFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function apiFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function productSvc($q, $window, bzResourceSvc, productFac, apiFac) {
        return {
            getAll: getAll,
            get: get,
            add: add,
            create: create,
            updateProduct: updateProduct,
            deleteProduct: deleteProduct,
            activeProduct: activeProduct,
            getProductBySlug: getProductBySlug,
            updateTag: updateTag,
            getProductByID: getProductByID,
            formatYoutube: formatYoutube,
            uploadBase64: uploadBase64,
            thumbToImage: thumbToImage,
            imageToThumb: imageToThumb,
            testResize: testResize,
            changeToSlug: changeToSlug,
            checkImgOld: checkImgOld,
            fixImgProductDetail: fixImgProductDetail,
            getCategoryParent: getCategoryParent,
        };

        function getAll(query) {
            query.method = 'product';
            var getAll = new productFac();
            return getAll.$get(query);
        }

        function get(id) {
            var getByID = new productFac();
            return getByID.$get({ method: 'product', id: id });
        }

        function add(data) {
            var addData = new productFac(data);
            return addData.$get({ method: 'product-add' });
        }

        function create(data) {
            var createData = new productFac(data);
            return createData.$save({ method: 'product' });
        }
        function updateProduct(data, id) {
            var updateData = new productFac(data);
            return updateData.$save({ method: 'product', id: id });
        }

        function deleteProduct(id) {
            var deleteData = new productFac();
            return deleteData.$delete({ method: 'product', id: id });
        }

        function activeProduct(id) {
            var activeData = new productFac();
            return activeData.$save({ method: 'product-active', id: id });
        }

        function getProductBySlug(slug) {
            var getProduct = new productFac();
            return getProduct.$get({ method: 'product-edit', id: slug });
        }

        function getProductByID(id) {
            var getProduct = new productFac();
            return getProduct.$get({ method: 'product-edit', id: id });
        }

        function updateTag(data) {
            var updateTag = new productFac(data);
            return updateTag.$save({ method: 'product-tag' });
        }

        function uploadBase64(data) {
            var updateTag = new apiFac(data);
            return updateTag.$save({ method: 'upload', id: 'base64' });
        }

        function formatYoutube(link) {
            if (link.indexOf("watch?v=") != -1)
                link = link.replace('watch?v=', 'embed/');
            if (link.indexOf("&") != -1) {
                link = link.split('&')[0];
            }
            return link;
        }

        function thumbToImage(name) {
            var thumb_split = name.split('.');
            var thumb_name_split = thumb_split[0].split('_');
            thumb_name_split.pop();
            var image_name = thumb_name_split.join('_') + '.' + thumb_split[1];
            return image_name;
        }

        function imageToThumb(name) {
            var thumb_split = name.split('.');
            return thumb_split[0] + '_248x248.' + thumb_split[1]
        }

        function testResize(data) {
            var test = new productFac(data);
            return test.$save({ method: 'test-resize' });
        }

        function changeToSlug(string) {
            if (string) {
                //Đổi chữ hoa thành chữ thường
                var slug = string.toLowerCase();

                //Đổi ký tự có dấu thành không dấu
                slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
                slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
                slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
                slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
                slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
                slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
                slug = slug.replace(/đ/gi, 'd');
                //Xóa các ký tự đặt biệt
                slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
                //Đổi khoảng trắng thành ký tự gạch ngang
                slug = slug.replace(/ /gi, "-");
                //Đổi nhiều ký tự gạch ngang liên tiếp thành 1 ký tự gạch ngang
                //Phòng trường hợp người nhập vào quá nhiều ký tự trắng
                slug = slug.replace(/\-\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-/gi, '-');
                slug = slug.replace(/\-\-/gi, '-');
                //Xóa các ký tự gạch ngang ở đầu và cuối
                slug = '@' + slug + '@';
                slug = slug.replace(/\@\-|\-\@|\@/gi, '');
                return slug;

            }

            return string;
        }

        // Fix for transfer database
        function checkImgOld(new_url, image) {
            if (image) {
                var tmp_arr = image.split('/');
                if (tmp_arr.length > 1) {
                    var url = settingJs.configs.uploadDirectory.media_old_product.slice(0, -1);
                    return url + image;
                }
            }

            return new_url + image;
        }

        function fixImgProductDetail(content) {
            let urlReplaceLeft = new RegExp('{{media url="', 'g');
            let urlReplaceRight = new RegExp('"}}', 'g');
            let replaceUrl2 = new RegExp("//mhv-live.bizzon.com.vn", 'g')

            return content.replace(urlReplaceLeft, settings.services.webUrl + settingJs.configs.uploadDirectory.media_old).replace(urlReplaceRight, '').replace(replaceUrl2, settings.services.webUrl);
        }

        function getCategoryParent(category) {
            if (category.parent_category) return getCategoryParent(category.parent_category);
            return category;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzOrder')
        .service('orderSvc', orderSvc)
        .service('orderFac', orderFac);

    function orderFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function orderSvc($q, $window, bzResourceSvc, orderFac) {
        return {
            getAll: getAll,
            add: add,
            create: create,
            edit: edit,
            update: update,
            delete: del,
            checkCoupon: checkCoupon,
            formatCurrency: formatCurrency,
            isFirstOrder: isFirstOrder
        };

        function getAll(query) {
            query.method = 'order';
            var data = new orderFac();
            return data.$get(query);
        }

        function add() {
            var data = new orderFac();
            return data.$get({ method: 'order-add' });
        }

        function create(data) {
            var data = new orderFac(data);
            return data.$save({ method: 'order' });
        }

        function edit(id) {
            var data = new orderFac();
            return data.$get({ method: 'order', id: id });
        }

        function update(data_send, id) {
            var data = new orderFac(data_send);
            return data.$save({ method: 'order', id: id });
        }

        function del(id) {
            var data = new orderFac();
            return data.$delete({ method: 'order', id: id });
        }

        function formatCurrency(money) {
            return money.toFixed().replace(/./g, function (c, i, a) {
                return i > 0 && c !== "." && (a.length - i) % 3 === 0 ? "." + c : c;
            });
        }

        function checkCoupon(order, coupon) {
            var data = new orderFac(order);
            return data.$save({ method: 'check-coupon', id: coupon });
        }

        function isFirstOrder(user_id) {
            var data = new orderFac();
            return data.$get({ method: 'is-first-order', id: user_id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzAuditLog')
        .service('auditLogSvc', auditLogSvc)
        .factory('auditLogFac', auditLogFac);

    function auditLogFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function auditLogSvc($q, $window, bzResourceSvc, auditLogFac) {
        return {
            getLog: getLog,
            getUsers: getUsers
        };

        function getLog(config) {
            config.method = 'log';
            var auditLogFactory = new auditLogFac();
            return auditLogFactory.$get(config);
        }

        function getUsers(config) {
            if (!config)
                config = {};
            config.method = 'log-users';
            var auditLogFactory = new auditLogFac();
            return auditLogFactory.$get(config);
        }


    }
})();
(function () {
    'use strict';

    angular
        .module('bzImportProduct')
        .service('importProductSvc', importProductSvc)
        .service('importProductFac', importProductFac);

    function importProductFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function importProductSvc($q, $window, bzResourceSvc, importProductFac) {
        return {
            getAll: getAll,
            getDataImport: getDataImport,
            importProduct: importProduct,
            edit: edit,
            update: update,
            del: del
        };

        function getAll(query) {
            query.method = 'import-product';
            var getDataImport = new importProductFac(query);
            return getDataImport.$get(query);
        }

        function getDataImport() {
            var getDataImport = new importProductFac();
            return getDataImport.$get({ method: 'import-product-add' });
        }

        function importProduct(data) {
            var importProduct = new importProductFac(data);
            return importProduct.$save({ method: 'import-product' });
        }
        function edit(id) {
            var editImportProduct = new importProductFac();
            return editImportProduct.$get({ method: 'import-product', id: id });
        }

        function update(data, id) {
            var editImportProduct = new importProductFac(data);
            return editImportProduct.$save({ method: 'import-product', id: id });
        }

        function del(id) {
            var deleteImportProduct = new importProductFac();
            return deleteImportProduct.$delete({ method: 'import-product', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzCoupon')
        .factory('couponFac', couponFac)
        .service('couponSvc', couponSvc);

    function couponFac(bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.adminUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function couponSvc($q, couponFac) {
        return {
            getAll: getAll,
            get: get,
            create: create,
            update: update,
            getByCode: getByCode,
            checkIsset: checkIsset
        };

        function getAll(query, type) {
            query.method = 'coupon';
            query.type = type;
            var list = new couponFac();
            // console.log(createData);

            return list.$get(query);
        }

        function get(id) {
            var getByID = new couponFac();
            // console.log(createData);

            return getByID.$get({ method: 'coupon', id: id });
        }

        function create(data) {
            // console.log(data);
            var createData = new couponFac(data);
            // console.log(createData);

            return createData.$save({ method: 'coupon' });
        }

        function update(data, id) {
            var updateData = new couponFac(data);

            return updateData.$update({ method: 'coupon', id: id });
        }

        function getByCode(code) {
            var getByCode = new couponFac();
            return getByCode.$get({ method: 'coupon-code', id: code });
        }

        function checkIsset(data, id) {
            var query = { method: 'coupon', id: 'check-coupon' };
            if (id) {
                query.coupon_id = id;
            }
            var getByCode = new couponFac(data);
            return getByCode.$save(query);
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('bzSupplier')
        .service('configSvc', configSvc)
        .factory('configFac', configFac);

    function configFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function configSvc($q, $window, bzResourceSvc, configFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get
        };

        function create(data, id) {
            var createData = new configFac(data);
            return createData.$save({ method: 'config' });
        }

        function update(data, id) {
            var configFactory = new configFac(data);
            return configFactory.$update({ method: 'config', id: id });
        }

        function getAll(data){
            var configFactory = new configFac(data);
            return configFactory.$get({method: 'config'});
        }
        function get (id){
             var configFactory = new configFac();
            return configFactory.$get({method: 'config', id: id});
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzCertificate')
        .factory('certificateFac', certificateFac)
        .service('certificateSvc', certificateSvc);

    function certificateFac(bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.adminUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function certificateSvc($q, certificateFac) {
        return {
            getAll: getAll,
            get: get,
            create: create,
            update: update,
            getProductsByCerID : getProductsByCerID,
        };

        function getAll() {
            var list = new certificateFac();
            // console.log(createData);

            return list.$get({ method: 'certificate' });
        }

        function get(id) {
            var getByID = new certificateFac();
            return getByID.$get({ method: 'certificate', id: id });
        }

        function create(data) {
            var createData = new certificateFac(data);
            return createData.$save({ method: 'certificate' });
        }

        function update(data, id) {
            var updateData = new certificateFac(data);

            return updateData.$update({ method: 'certificate', id: id });
        }
        function getProductsByCerID(data,id) {
            var getProductsByCerID = new certificateFac(data);

            return getProductsByCerID.$get({ method: 'certificate-product', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzCategory')
        .service('categorySvc', categorySvc)
        .factory('categoryFac', categoryFac);

    function categoryFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function categorySvc($q, $window, bzResourceSvc, categoryFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get,
            add: add,
            getChild: getChild,
            getById: getById
        };

        function create(data, id) {
            var createData = new categoryFac(data);
            return createData.$save({ method: 'category' });
        }

        function add() {
            var categoryFactory = new categoryFac();
            return categoryFactory.$get({ method: 'category-add' });
        }

        function update(data, slug) {
            var categoryFactory = new categoryFac(data);
            return categoryFactory.$update({ method: 'category', id: slug });
        }

        function getAll(data) {
            var categoryFactory = new categoryFac(data);
            return categoryFactory.$get({ method: 'category' });
        }

        function get(slug) {
            var categoryFactory = new categoryFac();
            return categoryFactory.$get({ method: 'category', id: slug });
        }

        function getById(id) {
            var categoryFactory = new categoryFac();
            return categoryFactory.$get({ method: 'category_id', id: id });
        }

        function getChild(data, id) {
            var categoryFactory = new categoryFac(data);
            return categoryFactory.$get({ method: 'category_child', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzBlog')
        .service('blogSvc', blogSvc)
        .factory('blogFac', blogFac);

    function blogFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function blogSvc($q, $window, bzResourceSvc, blogFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get,
            getTagsBlog: getTagsBlog
        };

        function create(data) {
            var createData = new blogFac(data);
            return createData.$save({ method: 'blog' });
        }

        function update(data, slug) {
            var blogFactory = new blogFac(data);
            return blogFactory.$update({ method: 'blog', id: slug });
        }

        function getAll(data) {
            var blogFactory = new blogFac(data);
            return blogFactory.$get({ method: 'blog' });
        }

        function get(slug) {
            var blogFactory = new blogFac();
            return blogFactory.$get({ method: 'blog', id: slug });
        }

        function getTagsBlog(type) {
            var getData = new blogFac();
            return getData.$get({ method: 'blog-tag',id: type });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzBanner')
        .service('bannerSvc', bannerSvc)
        .service('bannerFac', bannerFac);

    function bannerFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function bannerSvc($q, $window, bzResourceSvc, bannerFac) {
        return {
            getAll: getAll,
            getHomeTop: getHomeTop,
            getHomeBanner: getHomeBanner,
            getCategoryTop: getCategoryTop,
            create: create,
            update: update,
            del: del
        };

        function getAll(data) {
            data.method = 'banner';
            var bannerList = new bannerFac();
            return bannerList.$get(data);
        }

        function getHomeTop() {
            var banner = new bannerFac();
            return banner.$get({ method: 'banner' });
        }

        function getHomeBanner() {
            var banner = new bannerFac();
            return banner.$get({ method: 'banner' });
        }

        function getCategoryTop() {
            var banner = new bannerFac();
            return banner.$get({ method: 'banner' });
        }

        function update(data, id) {
            var bannerUpdate = new bannerFac(data);
            return bannerUpdate.$save({ method: 'banner', id: id });
        }

        function create(data) {
            var createData = new bannerFac(data);
            return createData.$save({ method: 'banner' });
        }

        function del(id) {
            var deleteData = new bannerFac();
            return deleteData.$delete({ method: 'banner', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzPermisstion')
        .service('permissionSvc', permissionSvc)
        .service('permissionFac', permissionFac);

    function permissionFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:param1/:param2', { method: '@method', param1: '@param1', param2: '@param2' });
    }

    function permissionSvc($q, $window, bzResourceSvc, permissionFac) {
        return {
            create: create,
            get: get,
            update: update,
            getResoureRole: getResoureRole,
            addResource: addResource,
            removeRole: removeRole,
            removeResource: removeResource

        };

        function create(data, id) {
            var createData = new permissionFac(data);
            return createData.$save({ method: 'permission' });
        }

        function get() {
            var getFac = new permissionFac();
            return getFac.$get({ method: 'permission' });
        }

        function removeRole(role) {
            var deleteData = new permissionFac();
            return deleteData.$remove({ method: 'delete-role', param1: role });
        }
        function removeResource(role, resource) {
            var deleteData = new permissionFac();
            return deleteData.$remove({ method: 'delete-resource', param1: role, param2: resource });
        }

        function update(data, role, resource) {
            var putData = new permissionFac(data);
            return putData.$update({ method: 'permission', param1: role, param2: resource });
        }

        function getResoureRole(role) {
            var getFac = new permissionFac();
            return getFac.$get({ method: 'resources', param1: role });
        }

        function addResource(data, role) {
            var putData = new permissionFac(data);
            return putData.$update({ method: 'add-resource', param1: role });
        }
    }
})();
;(function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('popChangePassCtrl', popChangePassCtrl);

	function popChangePassCtrl($scope, $rootScope, $state, $bzPopup, $uibModalInstance, 
		authSvc){
		var mvCPass = this;

		// Vars
		mvCPass.queryParams = {};
		mvCPass.userCurent = authSvc.getProfile();
		
		// Methods
		mvCPass.submit = submit;

		// Init
		initFormData();

		function initFormData(){
			mvCPass.submitted = false;
			mvCPass.lockForm = false;

			mvCPass.formData = {
				currentPassword: '',
				newPassword:'',
				confirmNewPassword:'',
			};
		}

		function submit(isValid){
			mvCPass.submitted = true;

			if(!mvCPass.lockForm && isValid){
				mvCPass.lockForm = true;
				authSvc.postChangePass(mvCPass.formData).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: "Thành công",
							message: "Đổi mật khẩu thành công"
						}
					});
					$state.reload();
					$uibModalInstance.close();
					mvCPass.lockForm = false;
					authSvc.siteLogout()
				}).catch(function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: "Lỗi",
							message: err.data.message
						}
					});
					$state.reload();
					$uibModalInstance.close();
					mvCPass.lockForm = false;
				});
			}
		}
	}
})();
var updatetagProduct = (function () {
    'use strict';

    angular
        .module('bzCoupon')
        .controller('updatetagProduct', updatetagProduct);

    function updatetagProduct($scope, $state, $uibModal, $uibModalInstance, authSvc, data) {
        /* jshint validthis: true */

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('tag', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Methods
        $scope.update = update;
        // Vars
        $scope.submitted = false;
        $scope.data = data;
        $scope.formData = {
            id_tag: data.id_tag,
            expire_date: data.product.tag_product.expire_date,
            order: data.product.tag_product.order
        }
        // Init

        // Function
        function update() {
            $uibModalInstance.close($scope.formData);
        }

    }
})();
var popupOrderCtrl = (function () {
    'use strict';

    angular
        .module('bzOrder')
        .controller('popupOrderCtrl', popupOrderCtrl);

    function popupOrderCtrl($scope, $rootScope, $window, $state, $stateParams, $bzPopup, $uibModal, $uibModalInstance,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, orderSvc, order, statusOrderList, shipperList, permission, productSvc, shippingfeeSvc) {
        /* jshint validthis: true */

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('order', ['add', 'edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/


        // Vars
        $scope.statusOrder = statusOrderList;
        $scope.shipperList = shipperList;
        $scope.urlImg = settingJs.configs.uploadDirectory.thumb_product;
        $scope.listIdCateOnsaleAffternoon = $rootScope.promotionForOrderDeleveryOnAffternoon.listCateApply;
        $scope.listCateException = $rootScope.promotionForOrderDeleveryOnAffternoon.listCateException;

        // Init
        $scope.orderDetail = order;
        $scope.isFirstOder = false;
        checkFirstOrder();

        // Methods
        $scope.updateOrderDetail = updateOrderDetail;
        $scope.checkImgOld = productSvc.checkImgOld;
        $scope.onChangeDeliveryType = onChangeDeliveryType;
        $scope.caculatingOnSaleAffternoon = caculatingOnSaleAffternoon;
        $scope.totalNotOnSale = totalNotOnSale;
        // Function
        function updateOrderDetail(form) {

            // Caculating total pay
            $scope.orderDetail.total_pay = ($scope.orderDetail.total + $scope.orderDetail.payment_info.info.shipping_fee)
                - $scope.orderDetail.coupon.value
                - (($scope.orderDetail.delivery_time == 'CHIEU') ?
                    ($rootScope.promotionForOrderDeleveryOnAffternoon.type
                        == "PC" ?
                        (($rootScope.promotionForOrderDeleveryOnAffternoon.value / 100) * $scope.caculatingOnSaleAffternoon())
                        : $rootScope.promotionForOrderDeleveryOnAffternoon.value)
                    : 0)
                - ($scope.isFirstOder ?
                    ($rootScope.promotionForFirstOrder.type == "MN" ?
                        $rootScope.promotionForFirstOrder.value
                        : (($rootScope.promotionForFirstOrder.value / 100) * $scope.totalNotOnSale()))
                    : 0);

            orderSvc.update({
                order: $scope.orderDetail
            }, $scope.orderDetail._id).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Thành công!',
                        message: 'Cập nhật đơn hàng thành công!'
                    }
                });
                $uibModalInstance.close($scope.orderDetail);
            }).catch(function (err) {
                form.$submitted = false;
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Lỗi!',
                        message: resp.err.message
                    }
                });
            })
        }
        // Util intersection two array
        function intersection(a, b) {
            var t;
            if (b.length > a.length) t = b, b = a, a = t;
            return a.filter(function (e) {
                return b.indexOf(e) > -1;
            });
        }

        function caculatingOnSaleAffternoon() {
            var total_tmp = 0; // tổng các sản phầm thuộc category được áp dụng
            $scope.orderDetail.order_detail.forEach(function (item, index) {
                var catesProd = item.product.category.map(function (cat) {
                    return ('' + cat);
                });
                if (intersection(catesProd, $scope.listIdCateOnsaleAffternoon).length > 0 && item.id_promote.id == null && intersection(catesProd, $scope.listCateException).length == 0) {
                    total_tmp += item.total
                }
            });
            return total_tmp;
        };

        function totalNotOnSale() {
            let total_no_onsale = 0;
            $scope.orderDetail.order_detail.forEach(function (item, index) {
                if (item.id_promote.id == null) {
                    total_no_onsale += item.total;
                }
            });
            return total_no_onsale;
        }

        function onChangeDeliveryType() {
            if ($scope.orderDetail.delivery_type == 'CT') {
                $scope.orderDetail.payment_info.info.shipping_fee = 0;
            } else {
                $scope.orderDetail.payment_info.info.shipping_fee = order.shipping_fee.fee;
            }
        }

        function checkFirstOrder() {
            if ($scope.orderDetail.payment_info.info.user_id) {
                bzResourceSvc.api($window.settings.services.admin + '/order/' + $scope.orderDetail.payment_info.info.user_id._id + '-' + $scope.orderDetail._id)
                    .get({}, function (resp) {
                        if (!$scope.orderDetail.old_id && resp.success)
                            $scope.isFirstOder = resp.success;
                    }), function (err) {
                        console.log('checkFirstOrder', err);
                    };
            }
        }

        $scope.editUserShipping = function editUserShipping() {
            $state.go('user-shipping', { id: $scope.orderDetail.payment_info.info.user_id._id });
            $uibModalInstance.close($scope.orderDetail.payment_info.info.id_shipping_address);
        }
    }
})();
var popupLogCtrl = (function () {
    'use strict';

    angular
        .module('bzAuditLog')
        .controller('popupLogCtrl', popupLogCtrl);

    function popupLogCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, $uibModalInstance,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, detailLog) {
        $scope.log = detailLog;
        $scope.log.object = JSON.parse($scope.log.object);
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Methods

        // Vars

    }
})();
var popupGenaratorCodeCtrl = (function () {
    'use strict';

    angular
        .module('bzCoupon')
        .controller('popupGenaratorCodeCtrl', popupGenaratorCodeCtrl);

    function popupGenaratorCodeCtrl($scope, $state, $uibModal, $uibModalInstance, authSvc) {
        /* jshint validthis: true */

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('coupon', ['add', 'edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Methods
        $scope.genaratorCode = genaratorCode;
        $scope.onTypeCode = onTypeCode;
        $scope.onChangeRangeRamdom = onChangeRangeRamdom;

        // Vars
        $scope.data = {
            code: '',
            qty: 2,
            charecter: true,
            number: true,
            maxCode: 100
        }
        var ramdomRange = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const number = '0123456789'

        $scope.submitted = false;
        // Init

        // Function
        function genaratorCode(form) {
            $scope.submitted = true;
            if (form.$valid && (($scope.data.code.split('*').length - 1) >= 3) && ($scope.data.code.indexOf('*') != -1) && ramdomRange.length > 0) {
                var tmp = $scope.data.code.split('*');
                var code = '';


                var genarator = function () {
                    if (code.split(',').length > $scope.data.qty) {
                        code = code.substring(0, code.length - 1);
                        return code;
                    } else {
                        var codetmp = '';
                        var j = 0;
                        for (j = 0; j <= tmp.length - 1; j++) {
                            codetmp = codetmp + tmp[j] + ramdomRange[Math.round(Math.random() * (ramdomRange.length - 1))];
                        }
                        codetmp = codetmp.substring(0, codetmp.length - 1);
                        if (code.indexOf(codetmp) == -1) {
                            code += codetmp;
                            code += ',';
                        }
                        genarator();
                    }
                }

                genarator();
                $uibModalInstance.close({ code_group: code, code: tmp[0] });
            }
        }

        function onChangeRangeRamdom() {
            ramdomRange = '';
            $scope.data.maxCode = 0;
            if ($scope.data.charecter) {
                ramdomRange += chars;
                $scope.data.maxCode = 900;
            }
            if ($scope.data.number) {
                ramdomRange += number;
                $scope.data.maxCode += 100;
            }

            if (!$scope.data.charecter && !$scope.data.number) {
            }
        }

        function onTypeCode() {
            var tmp = $scope.data.code.split('*');
            tmp.forEach(function (t, i) {
                tmp[i] = textToSlug(t).toUpperCase();;
            });
            $scope.data.code = tmp.join('*');
        }

        function textToSlug(string) {
            if (string) {
                //Đổi chữ hoa thành chữ thường
                var slug = string.toLowerCase();

                //Đổi ký tự có dấu thành không dấu
                slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
                slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
                slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
                slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
                slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
                slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
                slug = slug.replace(/đ/gi, 'd');
                //Xóa các ký tự đặt biệt
                slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;/gi, '');
                //Đổi khoảng trắng thành ký tự gạch ngang
                slug = slug.replace(/ /gi, "-");
                //Đổi nhiều ký tự gạch ngang liên tiếp thành 1 ký tự gạch ngang
                //Phòng trường hợp người nhập vào quá nhiều ký tự trắng
                slug = slug.replace(/\-\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-/gi, '-');
                slug = slug.replace(/\-\-/gi, '-');
                //Xóa các ký tự gạch ngang ở đầu và cuối
                // slug = '@' + slug + '@';
                // slug = slug.replace(/\@\-|\-\@|\@/gi, '');
                return slug;

            }

            return string;
        }
    }
})();
var userShippingCtrl = (function () {
    'use strict';

    angular
        .module('bzUser')
        .controller('userShippingCtrl', userShippingCtrl);

    function userShippingCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, userSvc, editableOptions) {
        /* jshint validthis: true */
        var vmUserShipping = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('user', ['view'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmUserShipping.lockFOrm = false;
        vmUserShipping.submitted = false;
        vmUserShipping.userId = $stateParams.id;
        vmUserShipping.showForm = false;

        //Methods
        vmUserShipping.addUserShipping = addUserShipping;
        vmUserShipping.deleteUserShipping = deleteUserShipping;
        vmUserShipping.show = show;
        vmUserShipping.updateAddressShipping = updateAddressShipping;
        vmUserShipping.checkEmpty = checkEmpty;

        //Init
        getDistrict();
        getUser();

        function getDistrict() {
            bzResourceSvc.api($window.settings.services.admin + '/all-shippingfee')
                .get(function (resp) {
                    vmUserShipping.districts = resp.items;
                });
        };

        function getUser() {
            bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
                .get({ id: vmUserShipping.userId }, function (resp) {
                    vmUserShipping.user = resp;
                });
        }

        function updateAddressShipping(address) {
            // console.log(vmUserShipping.user);
            delete vmUserShipping.user.__v;
            delete vmUserShipping.user.password_token;
            delete vmUserShipping.user.created;
            delete vmUserShipping.user.provider;
            delete vmUserShipping.user.activeToken;

            vmUserShipping.user.cfpassword = vmUserShipping.user.password;
            if (!vmUserShipping.user.dob)
                vmUserShipping.user.dob = '';
            userSvc.update(vmUserShipping.user, vmUserShipping.userId).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Địa chỉ giao hàng',
                        message: "Cập nhật thành công"
                    }
                });
                $state.reload();
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Địa chỉ giao hàng',
                        message: err.data.message
                    }
                });
                userEdit.lockForm = false;
            });
        }

        function checkEmpty(data) {
            if (data == '' || data == null)
                return "Dữ liệu không được để trống";
        }

        function addUserShipping(isValid) {
            if (!vmUserShipping.user.dob)
                vmUserShipping.user.dob = '';
            vmUserShipping.submitted = true;
            vmUserShipping.lockForm = true;
            if (isValid) {
                var shipping_address = {
                    name: vmUserShipping.formData.txtName,
                    phone: vmUserShipping.formData.phone,
                    address_detail: vmUserShipping.formData.address,
                    id_shipping_fee: vmUserShipping.formData.district
                };

                bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
                    .get({ id: vmUserShipping.userId }, function (resp) {
                        delete resp.__v;
                        delete resp.password_token;
                        delete resp.created;
                        delete resp.provider;
                        delete resp.activeToken;

                        var user = resp;
                        if (!user.dob)
                            user.dob = '';
                        user.cfpassword = user.password;
                        user.customer.shipping_address.push(shipping_address);


                        // Cập nhập lại user
                        userSvc.update(user, vmUserShipping.userId).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Địa chỉ',
                                    message: "Thêm thành công"
                                }
                            });
                            $state.reload();
                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Địa chỉ',
                                    message: err.data.message
                                }
                            });
                            userEdit.lockForm = false;
                        });

                    });
            }


        };


        function deleteUserShipping(id_shipping_address) {
            if (!vmUserShipping.user.dob)
                vmUserShipping.user.dob = '';
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/message/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
                    $scope.ok = function () {

                        var user = vmUserShipping.user;

                        delete user.__v;
                        delete user.password_token;
                        delete user.created;
                        delete user.provider;
                        delete user.activeToken;
                        user.cfpassword = user.password;


                        // Tìm vị trí và xóa địa chỉ giao hàng trong user
                        var p = user.customer.shipping_address.find(function (x) {
                            return x._id == id_shipping_address;
                        });
                        var i = user.customer.shipping_address.indexOf(p);
                        user.customer.shipping_address.splice(i, 1);

                        // Cập nhập lại user
                        userSvc.update(user, vmUserShipping.userId).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Địa chỉ',
                                    message: "Xóa thành công"
                                }
                            });
                            $uibModalInstance.close();
                            $state.reload();
                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Địa chỉ',
                                    message: err.data.message
                                }
                            });
                            userEdit.lockForm = false;
                            $uibModalInstance.close();
                        });

                    };
                }
            });
        }

        function show() {
            vmUserShipping.showForm = !vmUserShipping.showForm;
        }

        //End function ctrl
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var usersCtrl = (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('usersCtrl', usersCtrl);

	function usersCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc) {
		/* jshint validthis: true */
		var vmUsers = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('user', ['view'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmUsers.loading = true;
		vmUsers.selectedItems = [];
		vmUsers.queryParams = $stateParams;
		vmUsers.keyword = $stateParams.keyword;
		vmUsers.role = $stateParams.role;
		vmUsers.status = $stateParams.status;
		vmUsers.deletedAt = $stateParams.deletedAt; //list normal or list deleted
		vmUsers.userRoles = userRoles;
		// console.log('test', userRoles);
		vmUsers.users = [];

		// Methods
		vmUsers.filter = filter;
		vmUsers.filterReset = filterReset;
		vmUsers.active = active;
		vmUsers.sort = sort;
		vmUsers.remove = remove;			// Xoá vào thùng rác :v
		vmUsers.restore = restore;			// Khôi phục
		vmUsers.deleteUser = deleteUser; 	// xoá vĩnh viễn
		vmUsers.exportExcel = exportExcel;
		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmUsers.queryParams.page = vmUsers.table.page();
			$state.go('.', $scope.vmUsers.queryParams);
		}, $scope, vmUsers.table);

		function getData() {
			bzResourceSvc.api($window.settings.services.apiUrl + '/user')
				.get(vmUsers.queryParams, function (resp) {
					vmUsers.totalItems = resp.totalItems;
					vmUsers.queryParams.pageCount = resp.totalPage;
					vmUsers.users = resp.items;
					vmUsers.table = new NgTableParams({ count: parseInt(vmUsers.queryParams.limit) || 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmUsers.users;
						}
					});
					vmUsers.table.page(vmUsers.queryParams.page);
					vmUsers.loading = false;
				}, function (err) {
					console.log(err);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'User',
							message: err.data.message
						}
					});
				});
		}

		function filter(keyword) {
			$state.go('.', {
				role: vmUsers.role != "" ? vmUsers.role : null,
				keyword: keyword,
				status: vmUsers.status != "" ? vmUsers.status : null,
				page: 1
			}).then(function () {
				$state.reload();
			});
		}

		function filterReset() {
			$state.go('.', {
				role: null,
				keyword: null,
				page: vmUsers.queryParams.page,
				status: null,
				// publish: null,
				// cateid: null,
				// limit: settingJs.admin.itemPerPage
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function active(id, value) {
			bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
				.update({ _id: id }, { status: value }, function (resp) {
					$bzPopup.toastr({
						type: 'success',
						data: {
							title: 'User',
							message: value === 1 ? 'Kích hoạt tài khoản thành công!' : 'Vô hiệu hóa tài khoản thành công!'
						}
					});

					$state.reload();
				});
		}

		function sort(id, value) {
			$bzPopup.toastr({
				type: 'success',
				data: {
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự bài viết thành công!'
				}
			});
		}

		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa tài khoản thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}

		function deleteUser(id, name) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa vĩnh viễn';
					$scope.message = 'Bạn chắc chắn xoá tài khoản ' + name + '?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/user/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa tài khoản thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}

		function restore(id, name) {

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Khôi phục xoá';
					$scope.message = 'Khôi phục tài khoản ' + name + '?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/restore-user/:id', { id: '@id' })
							.update({ id: id }, {}, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Khôi phục',
										message: 'Khôi phục tài khoản thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}

		// Export Excel
		function exportExcel(detail) {
			vmUsers.processingExport = true;
			var data = [[
				'STT', 'Danh xưng', 'Tên tài khoản', 'Điện thoại', 'Email', 'Ngày đăng ký', 'Trạng thái', 'Facebook', 'Ngày sinh'
			]];

			var options = {
				type: 'xlsx',
				sheetName: 'UserMHV',
				fileName: 'User_' + moment(new Date()).format('DD/MM/YYYY'),
			};
			var query = (JSON.parse(JSON.stringify(vmUsers.queryParams)));
			query.limit = vmUsers.totalItems;
			query.page = 1;

			bzResourceSvc.api($window.settings.services.apiUrl + '/user')
				.get(query, function (resp) {
					var checkPushData = function (data, value_default, array) {
						if (data && data !== 'undefined') array.push('' + data)
						else array.push(value_default);
						return array;
					}
					resp.items.forEach(function (item, index) {
						var row = [index + 1];
						row = checkPushData(item.vocative, '', row);
						row = checkPushData(item.name, '', row);
						row = checkPushData(item.phone, '', row);
						row = checkPushData(item.email, '', row);

						var createdAt = moment(item.createdAt).format('DD/MM/YYYY');
						row.push(createdAt);


						if (item.status) row.push('Acitve')
						else row.push('Inactive');

						if (item.provider_id) {
							row.push(('https://www.fb.com/' + item.provider_id));
						}
						else row.push('');

						if (item.dob) {
							var dob = moment(item.dob).format('DD/MM/YYYY');
							row.push(dob);
						}
						else row.push('');

						data.push(row);

					})

					ExcelJs.exportExcel(data, options);
					vmUsers.processingExport = false;

				}, function (err) {
					console.log(err);
					vmUsers.btnExport = false;
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Thất bại',
							message: 'Không thể xuất. Hãy thử lại'
						}
					});
				});
		}

	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var userEditProfileCtrl = (function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('userEditProfileCtrl', userEditProfileCtrl);

	function userEditProfileCtrl($scope, $window, $state, $stateParams, $bzPopup, userRoles, authSvc, userSvc, bzResourceSvc, salemanScopes){
		var mvUEP = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('user', ['edit'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/


		// Vars
		mvUEP.queryParams = $stateParams;
		mvUEP.userRoles = userRoles;
		mvUEP.salemanScopes = salemanScopes;
		mvUEP.isEditMode = mvUEP.queryParams.id !== undefined;

		// Methods
		mvUEP.save = save;

		// Init
		getData();

		function initFormData(data){
			mvUEP.lockForm = false;
			mvUEP.submitted = false;

			/*init user chung*/
			mvUEP.formData = {
				name: mvUEP.isEditMode ? data.name : '',
				email: mvUEP.isEditMode ? data.email : '',
				password: '',
				cfpassword: '',
				roles: mvUEP.isEditMode ? data.roles : ['user'],
				status: mvUEP.isEditMode ? data.status : false,
				saleman: {
					active: mvUEP.isEditMode ? data.saleman.active : false,
					manager: mvUEP.isEditMode ? data.saleman.manager : false,
					types: mvUEP.isEditMode ? data.saleman.types : [],
				}
			};
			/*init user module sale*/
			if(mvUEP.queryParams.module == 'sale'){
				mvUEP.formData.roles = ['admin', 'user', 'sale'];
				mvUEP.formData.status = mvUEP.isEditMode ? data.status : true;
			}
			/*end init user module sale*/
		}

		function getData(){
			if(mvUEP.isEditMode){
				bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', {id: '@id'})
				.get({id: mvUEP.queryParams.id}, function(resp){
					delete resp.__v;
					delete resp.password_token;
					delete resp.created;
					delete resp.provider;
					delete resp.activeToken;

					initFormData(resp);
				});
			} else {
				initFormData();
			}
		}

	// 	function save(isValid){
	// 		mvUEP.submitted = true;

	// 		if(!mvUEP.lockForm && isValid){
	// 			mvUEP.lockForm = true;

	// 			/*Format Status Đúng định dạng true false*/
	// 			if(mvUEP.formData.status == 1)
	// 				mvUEP.formData.status = true;
	// 			else if(mvUEP.formData.status == 0)
	// 				mvUEP.formData.status = false;

	// 			/*Thêm User*/
	// 			if(!mvUEP.isEditMode){
					
	// 				// delete mvUEP.formData.saleman;
	// 				mvUEP.formData.cfpassword = mvUEP.formData.password;
	// 				// console.log('testxx', mvUEP.formData);
	// 				// return;
	// 				userSvc.create(mvUEP.formData).then(function(resp){
	// 					$bzPopup.toastr({
	// 						type: 'success',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: resp.message
	// 						}
	// 					});

	// 					$state.go('user-sale', {id: null});
	// 				},function(err){
	// 					$bzPopup.toastr({
	// 						type: 'error',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: err.data.message
	// 						}
	// 					});
	// 					mvUEP.lockForm = false;
	// 				});
	// 			}

	// 			/*Sửa User*/
	// 			else if(mvUEP.isEditMode) {

	// 				/*Format Status Đúng định dạng true false*/
	// 				if(mvUEP.formData.status == 1)
	// 					mvUEP.formData.status = true;
	// 				else if(mvUEP.formData.status == 0)
	// 					mvUEP.formData.status = false;

	// 				/*Xét password mới cho user*/
	// 				mvUEP.formData.password = mvUEP.tmppassword;
	// 				mvUEP.formData.cfpassword = mvUEP.tmppassword;

	// 				// mvUEP.formData.cfpassword = mvUEP.tmpcfpassword;
	// 				console.log('test', mvUEP.formData);

	// 				userSvc.update(mvUEP.formData, mvUEP.queryParams.id).then(function(resp){
	// 					$bzPopup.toastr({
	// 						type: 'success',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: resp.message
	// 						}
	// 					});

	// 					$state.go('user-sale', {id: null});
	// 				},function(err){
	// 					$bzPopup.toastr({
	// 						type: 'error',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: err.data.message
	// 						}
	// 					});
	// 					mvUEP.lockForm = false;
	// 				});
	// 			}
	// 		}
	// 	}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var userEditCtrl = (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('userEditCtrl', userEditCtrl);

	function userEditCtrl($scope, $window, $state, $stateParams, $bzPopup, userRoles, authSvc, userSvc, bzResourceSvc) {
		var userEdit = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('user', ['edit'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		userEdit.formData = {};
		userEdit.queryParams = $stateParams;
		userEdit.userRoles = [];
		userEdit.loading = true;

		// Methods
		userEdit.isEdit = isEdit;
		userEdit.save = save;
		userEdit.initFormData = initFormData;
		userEdit.getData = getData;
		userEdit.listVocative = [{ name: 'Anh', value: 'Anh' },
		{ name: 'Chị', value: 'Chị' },
		{ name: 'Cô', value: 'Cô' },
		{ name: 'Chú', value: 'Chú' },
		{ name: 'Bác', value: 'Bác' },
		{ name: 'Ông', value: 'Ông' },
		{ name: 'Bà', value: 'Bà' }];


		// Init
		isEdit();
		getRolesUser();

		function isEdit() {
			userEdit.isEditMode = userEdit.queryParams.id !== undefined;
		}

		function getRolesUser() {
			userSvc.getRoles().then(function (resp) {
				if (resp.success) {
					userEdit.userRoles = resp.data;
				}
			})
		}

		function initFormData(data) {
			// console.log(data);
			userEdit.lockForm = false;
			userEdit.submitted = false;
			var aaa = userEdit.isEditMode ? data.name : '';
			/*init user chung*/
			userEdit.tmppassword = ""
			userEdit.formData = {
				name: (userEdit.isEditMode == true) ? data.name : '',
				phone: userEdit.isEditMode ? data.phone : '',
				email: userEdit.isEditMode ? data.email : '',
				password: userEdit.isEditMode ? data.password : '',
				// cfpassword: '',
				roles: userEdit.isEditMode ? data.roles : ['user'],
				vocative: userEdit.isEditMode ? data.vocative : 'Anh',
				dob: userEdit.isEditMode ? data.dob : '',
				status: userEdit.isEditMode ? data.status : true,
			};
			userEdit.loading = false;
		}

		function getData() {
			if (userEdit.isEditMode) {
				bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
					.get({ id: userEdit.queryParams.id }, function (resp) {
						delete resp.__v;
						delete resp.password_token;
						delete resp.created;
						delete resp.provider;
						delete resp.activeToken;

						initFormData(resp);

					});
			} else {
				initFormData();
			}
		}

		function save(isValid) {

			userEdit.submitted = true;
			if (!userEdit.formData.dob) userEdit.formData.dob = '';
			if (!userEdit.lockForm && isValid) {
				userEdit.lockForm = true;

				/*Format Status Đúng định dạng true false*/
				if (userEdit.formData.status == 1)
					userEdit.formData.status = true;
				else if (userEdit.formData.status == 0)
					userEdit.formData.status = false;

				/*Thêm User*/
				if (!userEdit.isEditMode) {
					userEdit.formData.cfpassword = userEdit.formData.password;
					userSvc.create(userEdit.formData).then(function (resp) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Thành viên',
								message: resp.message
							}
						});

						$state.go('users', { id: null });
					}, function (err) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Thành viên',
								message: err.data.message
							}
						});
						userEdit.lockForm = false;
					});
				}

				/*Sửa User*/
				else if (userEdit.isEditMode) {
					/*Format Status Đúng định dạng true false*/
					if (userEdit.formData.status == 1)
						userEdit.formData.status = true;
					else if (userEdit.formData.status == 0)
						userEdit.formData.status = false;

					/*Xét password mới cho user*/
					// userEdit.formData.cfpassword = userEdit.formData.password
					delete userEdit.formData.password;
					delete userEdit.formData.cfpassword;

					userSvc.update(userEdit.formData, userEdit.queryParams.id).then(function (resp) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Thành viên',
								message: "Sửa thành công"
							}
						});

						$state.go('users', { id: null });
					}, function (err) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Thành viên',
								message: err.data.message
							}
						});
						userEdit.lockForm = false;
					});
				}
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var unitsCtrl = (function(){
	'use strict';

	angular
	.module('bzUnit')
	.controller('unitsCtrl', unitsCtrl);

	function unitsCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
    userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, unitSvc){
		/* jshint validthis: true */
		var vmUnits = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('unit', ['view'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmUnits.loading = true;
		vmUnits.selectedItems = [];
		vmUnits.queryParams = $stateParams;

		vmUnits.userRoles = userRoles;
		// console.log('test', userRoles);
		vmUnits.units = [];

		// Methods
		vmUnits.filter = filter;
		vmUnits.filterReset = filterReset;
		vmUnits.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmUnits.queryParams.page = vmUnits.table.page();
			$state.go('.',$scope.vmUnits.queryParams);
		}, $scope, vmUnits.table);

		function getData(){
			bzResourceSvc.api($window.settings.services.admin + '/unit')
					.get(vmUnits.queryParams, function(resp){
						vmUnits.queryParams.pageCount = resp.totalPage;
						vmUnits.listUnit = resp.items;

						vmUnits.table = new NgTableParams({count: 20}, {
							counts: [],
							getData: function(params) {
								params.total(resp.totalItems);
								return vmUnits.listUnit;
							}
						});
						vmUnits.table.page(vmUnits.queryParams.page);
						vmUnits.loading = false;
					});
			// unitSvc.getAll().then(function(resp){
			// 	vmUnits.queryParams.pageCount = resp.totalPage;
			// 	vmUnits.units = resp.items;
			// 	// console.log('test',vmUnits.units);

			// 	vmUnits.table = new NgTableParams({count: 10}, {
			// 		counts: [],
			// 		getData: function(params) {
			// 			params.total(resp.totalItems);
			// 			return vmUnits.units;
			// 		}
			// 	});
			// 	vmUnits.table.page(vmUnits.queryParams.page);
			// 	vmUnits.loading = false;
			// }).catch(function (err){
			// 	$bzPopup.toastr({
            //             type: 'error',
            //             data: {
            //                 title: 'Lấy dữ liệu',
            //                 message: err.data.message
            //             }
            //         });
			// });
		}

		function filter(params){
			$state.go('.', angular.extend(params, saleContact.queryParams),
				{notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			$state.go('.', {
				publish: null,
				cateid: null,
				keyword: null,
				limit: settingJs.admin.itemPerPage
			}, {notify:false})
			.then(function(){
				$state.reload();
			});
		}


		function remove(id){
			var selected = {ids: [id]}; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'assets/global/message/view.html',
				controller: function($scope, $uibModalInstance){
					$scope.popTitle = 'Xóa'; 
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?'; 
					$scope.ok = function(){
						bzResourceSvc.api($window.settings.services.admin + '/unit/:id', {id: '@id'})
						.delete({id: selected.ids}, function(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Xóa',
									message: 'Xóa đơn vị thành công!'
								}
							});
							$state.reload();
							$uibModalInstance.close();
						});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var unitsCtrl = (function () {
    'use strict';

    angular
        .module('bzUnit')
        .controller('unitEditCtrl', unitAddCtrl);

    function unitAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, unitSvc) {
        var vmEditUnits = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('unit', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditUnits.lockFOrm = false;
        vmEditUnits.save = update;
        vmEditUnits.vmEditUnits = getUnit;
        vmEditUnits.submitted = false;

        //Init
        getUnit();

        function getUnit() {
            const id = $stateParams.id;
            unitSvc.get(id).then(function (res) {
                vmEditUnits.formData = res;
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Getting',
                        message: err.data
                    }
                });
            });
        };

        function update(isValid) {
            vmEditUnits.submitted = true;
            vmEditUnits.lockForm = true;
            if (isValid) {
                unitSvc.update(vmEditUnits.formData, vmEditUnits.formData._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Đơn vị',
                            message: resp.message
                        }
                    });
                    $state.go('units');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật đơn vị',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditUnits.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var unitsCtrl = (function () {
    'use strict';

    angular
        .module('bzUnit')
        .controller('unitAddCtrl', unitAddCtrl);

    function unitAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, unitSvc) {
        /* jshint validthis: true */
        var vmAddUnits = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('unit', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddUnits.formData = {};
        vmAddUnits.lockFOrm = false;
        vmAddUnits.save = create;
        vmAddUnits.submitted = false;

        //Init
      
        function create(isValid) {
            vmAddUnits.submitted = true;
            vmAddUnits.lockForm = true;
            if (isValid) {
                unitSvc.create(vmAddUnits.formData).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Đơn vị',
                            message: 'Thêm thành công'
                        }
                    });
                $state.go('units');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Thêm đơn vị',
                            message: error.data
                        }
                    });
                });
            }
            else {
                vmAddUnits.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var testResizeCtrl = (function () {
	'use strict';

	angular
		.module('bzTest')
		.controller('testResizeCtrl', testResizeCtrl);

	function testResizeCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, $filter,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, Upload, testSvc) {
		var vmTestResize = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/

		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmTestResize.thumbImgPath = settingJs.configs.uploadDirectory.thumb;
		vmTestResize.tempImgPath = settingJs.configs.uploadDirectory.tmp;


		vmTestResize.image = {
			old: null,
			new: null
		}
		vmTestResize.formData = {
			height: 300,
			width: 300,
			name: null,
		}
		vmTestResize.uploadImage = uploadImage;
		vmTestResize.resize = resize;
		vmTestResize.crop = crop;

		// Methods

		function crop() {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/cropper/view.html',
				controller: function ($scope, $uibModalInstance) {
					var popupScope = this;
					$scope.popupScope = {
						// image : 'http://muahangviet.local/files/banner_image/banner_image_1490065477542.png',
						event: 'crop:image',
						ratio: 3/4,
						width: 300,
						height: 400,
						// mimeType : 'image/jpeg'
					};
					$scope.$on('crop:image', function (event, res) {
						console.log('image', res);
						testSvc.uploadBase64({ directory: 'avatar', image: res.image }).then(function (resp) {
							console.log('success uplaod', resp);
						}).catch(function (err) {
							console.log('Error upload: ', err);
						});

					});
				}
			});
		}

		function resize() {
			testSvc.resize(vmTestResize.formData).then(function (resp) {
				vmTestResize.image.new = resp;
			}).catch(function (err) {
				console.log('err', err);
			})
		}

		function uploadImage(file) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
					Upload.upload({
						url: $window.settings.services.uploadApi + '/upload/file',
						data: {
							file: file[0],
							type: 'tmp',
							prefix: 'test_img',
						}
					}).then(function (resp) {
						console.log(resp);
						vmTestResize.image.old = resp.data;
						vmTestResize.formData.name = vmTestResize.image.old.filename;
					}, function (resp) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Lỗi!',
								message: resp.message
							}
						});
					}, function (evt) {
						$scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
					});
				}
				else {
					alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
					return;
				}
			}
		}
	}
	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var supplierListCtrl = (function(){
	'use strict';

	angular
	.module('bzSupplier')
	.controller('supplierListCtrl', supplierListCtrl);

	function supplierListCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
    userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, supplierSvc){
		/* jshint validthis: true */
		var vmListSupplier = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('supplier', ['view'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmListSupplier.loading = true;
		vmListSupplier.selectedItems = [];
		vmListSupplier.keyword = $stateParams.keyword;
		vmListSupplier.queryParams = $stateParams;

		vmListSupplier.userRoles = userRoles;
		// console.log('test', userRoles);
		vmListSupplier.listSupplier = [];

		// Methods
		vmListSupplier.filter = filter;
		vmListSupplier.filterReset = filterReset;
		vmListSupplier.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmListSupplier.queryParams.page = vmListSupplier.table.page();
			$state.go('.',$scope.vmListSupplier.queryParams);
		}, $scope, vmListSupplier.table);

		function getData(){
			//fix pagining
			bzResourceSvc.api($window.settings.services.admin + '/supplier')
			.get(vmListSupplier.queryParams, function(resp){
				vmListSupplier.queryParams.pageCount = resp.totalPage;
				vmListSupplier.listSupplier = resp.items;
				// console.log('test',vmListSupplier.users);

				vmListSupplier.table = new NgTableParams({count: parseInt(vmListSupplier.queryParams.limit) || 10}, {
					counts: [],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmListSupplier.listSupplier;
					}
				});
				vmListSupplier.table.page(vmListSupplier.queryParams.page);
				vmListSupplier.loading = false;
			});
		}

		function filter(keyword){
			$state.go('.', {
				keyword: keyword,
				page: vmListSupplier.queryParams.page,
			}, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			$state.go('.', {
				keyword: null,
				page: vmListSupplier.queryParams.page,
			}, {notify:false})
			.then(function(){
				$state.reload();
			});
		}


		function remove(id){
			var selected = {ids: [id]}; //id ? {ids: [id]} : getSelectedIds();
			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'assets/global/message/view.html',
				controller: function($scope, $uibModalInstance){
					$scope.popTitle = 'Xóa'; 
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?'; 
					$scope.ok = function(){
						bzResourceSvc.api($window.settings.services.admin + '/supplier/:id', {id: '@id'})
						.delete({id: selected.ids}, function(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Xóa',
									message: 'Xóa nhà cung cấp thành công!'
								}
							});
							$state.reload();
							$uibModalInstance.close();
						});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var supplierImportProductHistoryCtrl = (function () {
	'use strict';

	angular
		.module('bzSupplier')
		.controller('supplierImportProductHistoryCtrl', supplierImportProductHistoryCtrl);

	function supplierImportProductHistoryCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, supplierSvc) {
		var vmSupplierImportProductHistory = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('supplier', ['edit', 'export'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
        vmSupplierImportProductHistory.loading = true;
		vmSupplierImportProductHistory.queryParams = $stateParams;
        vmSupplierImportProductHistory.supplier = {};

		// Methods
        function getSupplier(){
            const id = $stateParams.id;
            supplierSvc.get(id).then(function(res){
                vmSupplierImportProductHistory.supplier = res;
            }).catch(function (err){
                 $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Nhà cung cấp',
                            message: err.data.message
                        }
                    });
            });
        };

		// Init
        getSupplier();
		getData();
        
        ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmSupplierImportProductHistory.queryParams.page = vmSupplierImportProductHistory.table.page();
			$state.go('.',$scope.vmSupplierImportProductHistory.queryParams);
		}, $scope, vmSupplierImportProductHistory.table);


		/*FUNCTION*/
		function getData() {
            bzResourceSvc.api($window.settings.services.admin + '/supplier/import-product/' + $stateParams.id)
			.get(vmSupplierImportProductHistory.queryParams, function(resp){
				vmSupplierImportProductHistory.filter = {};
                vmSupplierImportProductHistory.queryParams.pageCount = resp.totalPage;
				vmSupplierImportProductHistory.list = resp.items;
				vmSupplierImportProductHistory.params = resp.params;

				vmSupplierImportProductHistory.table = new NgTableParams({
					count: vmSupplierImportProductHistory.queryParams.limit
				}, {
					counts: [],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmSupplierImportProductHistory.list;
					}
				});

				vmSupplierImportProductHistory.table.page(vmSupplierImportProductHistory.queryParams.page);
				vmSupplierImportProductHistory.loading = false;
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var unitsCtrl = (function () {
    'use strict';

    angular
        .module('bzSupplier')
        .controller('supplierEditCtrl', supplierEditCtrl);

    function supplierEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, supplierSvc) {
        /* jshint validthis: true */
        var vmsupplierEdit = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('supplier', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmsupplierEdit.formData = {
            name: '',
            phone: '',
            fax: '',
            email: '',
            website: '',
            status: true,
            address: '',
            deputy: {
                name: '',
                phone: '',
                email: ''
            }
        };
        vmsupplierEdit.lockFOrm = false;
        vmsupplierEdit.save = update;
        vmsupplierEdit.submitted = false;

        //Init
        getSupplier();

        function getSupplier() {
            const id = $stateParams.id;
            supplierSvc.get(id).then(function (res) {
                vmsupplierEdit.formData = res;
                // console.log(res);
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Getting',
                        message: err.data.message
                    }
                });
            });
        };

        function update(isValid) {
            vmsupplierEdit.submitted = true;
            vmsupplierEdit.lockForm = true;
            // console.log(vmsupplierEdit.formData);
            if (isValid) {
                supplierSvc.update(vmsupplierEdit.formData, vmsupplierEdit.formData._id).then(function (resp) {
                    // console.log('success', resp);
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Nhà cung cấp',
                            message: resp.message
                        }
                    });
                    $state.go('suppliers');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Nhà cung cấp',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmsupplierEdit.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var unitsCtrl = (function () {
    'use strict';

    angular
        .module('bzSupplier')
        .controller('supplierAddCtrl', supplierAddCtrl);

    function supplierAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, supplierSvc) {
        /* jshint validthis: true */
        var vmsupplierAdd = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('supplier', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmsupplierAdd.formData = {
            name: '',
            phone: '',
            // fax: '',
            tax_code: '',
            bank_info: {
                name: '',
                account_number: '',
                bank_name: ''
            },
            email: '',
            website: '',
            status: true,
            address: '',
            deputy: {
                name: '',
                phone: '',
                email: ''
            }
        };
        vmsupplierAdd.lockFOrm = false;
        vmsupplierAdd.save = create;
        vmsupplierAdd.submitted = false;

        //Init

        function create(isValid) {
            vmsupplierAdd.submitted = true;
            vmsupplierAdd.lockForm = true;
            if (isValid) {
                supplierSvc.create(vmsupplierAdd.formData).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Nhà cung cấp',
                            message: resp.message
                        }
                    });
                    $state.go('suppliers');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Nhà cung cấp',
                            message: error.data.message
                        }
                    });
                    vmsupplierAdd.submitted = true;
                    vmsupplierAdd.lockForm = false;
                });
            }
            else {
                vmsupplierAdd.submitted = true;
                vmsupplierAdd.lockForm = false;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var tagProductCtrl = (function () {
	'use strict';

	angular
		.module('bzTag')
		.controller('tagProductCtrl', tagProductCtrl);

	function tagProductCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, tagSvc, productSvc, $filter) {
		/* jshint validthis: true */
		var vmTagProduct = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('tag', 'view')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmTagProduct.loading = true;
		vmTagProduct.selectedItems = [];
		vmTagProduct.queryParams = $stateParams;
		vmTagProduct.keyword = $stateParams.tag || '';
		vmTagProduct.userRoles = userRoles;
		vmTagProduct.formData = {};
		vmTagProduct.lockFOrm = false;
		vmTagProduct.submitted = false;
		vmTagProduct.optionTimePicker = {
			timePicker: true,
			timePickerIncrement: 30,
			singleDatePicker: false,
			locale: {
				format: 'h:ss DD/MM/YYYY'
			}
		};
		vmTagProduct.expire_date = $stateParams.expire ? $stateParams.expire : null;


		// Methods
		vmTagProduct.filter = filter;
		vmTagProduct.filterReset = filterReset;
		vmTagProduct.saveProduct = saveProduct;
		vmTagProduct.deleteProduct = deleteProduct;
		vmTagProduct.showForm = showForm;
		vmTagProduct.getListTag = getListTag;
		vmTagProduct.updateOrder = updateOrder;
		vmTagProduct.editExpire = editExpire;
		vmTagProduct.filterExpireDate = filterExpireDate;


		// Init
		getTagProduct();
		getListTag(vmTagProduct.keyword);

		function getTagProduct() {
			bzResourceSvc.api($window.settings.services.admin + '/tag')
				.get(vmTagProduct.queryParams, function (resp) {
					vmTagProduct.tagProduct = resp.items;
				});
		}

		function filterExpireDate(expire_date_product) {
			if (vmTagProduct.expire_date) {
				var end = moment(expire_date_product.endDate);
				var expire_date = moment(vmTagProduct.expire_date).subtract(1, 'days').endOf('day');
				if (end.isAfter(expire_date))
					return false;
				else
					return true;
			}
			else
				return true;
		}
		function getListTag(keyword) {
			vmTagProduct.tags = [];
			if (keyword) {
				//Lấy 1 tag
				tagSvc.get(keyword).then(function (resp) {
					vmTagProduct.tags.push(resp);
					vmTagProduct.tags.forEach(function (item, index) {
						let id_tag = item._id;
						let type_tag = item.type;
						//lấy list sản phẩm ko thuộc id tag đổ ra formData
						tagSvc.getListProduct(id_tag, type_tag).then(function (resp) {
							item.products = resp.data;
						});

						//lấy list sản phẩm theo id tag đổ ra table
						tagSvc.getProductByTag(id_tag, type_tag, vmTagProduct.expire_date).then(function (resp) {
							if (resp.data) {
								resp.data.forEach(function (product, i) {
									var tag_product = {}
									product.tag_product.forEach(function (tag) {
										if (id_tag == tag.id_tag) {
											tag_product = tag;
										}
									});
									product.tag_product = tag_product;
								});

								item.table = resp.data;
							}


						});
					});
				});
			}
			else {
				//Lấy nhiều tag
				bzResourceSvc.api($window.settings.services.admin + '/tag')
					.get(vmTagProduct.queryParams, function (resp) {
						vmTagProduct.tags = resp.items;
						vmTagProduct.tags.forEach(function (item, index) {
							let id_tag = item._id;
							let type_tag = item.type;
							//lấy list sản phẩm ko thuộc id tag đổ ra formData
							tagSvc.getListProduct(id_tag, type_tag).then(function (resp) {
								item.products = resp.data;
							});

							//lấy list sản phẩm theo id tag đổ ra table
							tagSvc.getProductByTag(id_tag, type_tag, vmTagProduct.expire_date).then(function (resp) {
								if (resp.data) {
									resp.data.forEach(function (product, i) {
										var tag_product = {}
										product.tag_product.forEach(function (tag) {
											if (id_tag == tag.id_tag) {
												tag_product = tag;
											}

										});
										product.tag_product = tag_product;
									});
									item.table = resp.data;
								}
							});
						});
					});
			}

		}

		function filter(keyword) {
			var expire = vmTagProduct.expire_date ? vmTagProduct.expire_date : null;
			if (expire) {
				expire = moment(expire).format('MM-DD-YYYY');
				if (expire.format() == 'Invalid Date')
					expire = null;
			}
			$state.go('.', {
				tag: keyword,
				expire: expire
			}).then(function () {
				$state.reload();
			});
		}


		function filterReset() {
			$state.go('.', {
				tag: null,
				expire: null
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}
		function checkCategory(product, tag) {
			var count = 0;
			var t = true;
			if (product.category_list.length > 0) {

				product.category_list.forEach(function (product_category) {
					count = 0;
					tag.table.forEach(function (value) {

						value.category_list.forEach(function (list_category) {
							var product_cate_nin_table = product_category.parent_category || product_category;
							var product_cate_in_table = list_category.parent_category || list_category;
							if (product_cate_nin_table._id == product_cate_in_table._id) {
								count = count + 1;
							}
						});

					});
					if (count >= 12)
						t = false;
				});

			} else {
				return true;
			}
			return t;
		}

		function saveProduct(isValid, tag) {
			vmTagProduct.submitted = true;
			vmTagProduct.lockForm = true;
			if (isValid) {
				var tagProduct = {
					id_tag: tag._id,
					expire_date: tag.formData.expire_date
				};
				var idProducts = tag.formData.idProducts;
				for (var i = 0; i < idProducts.length; i++) {
					var idProduct = idProducts[i];

					//lấy ra sản phẩm theo id
					tagSvc.getProductById(idProduct).then(function (resp) {
						var product = resp;
						//check category sản phẩm có lớn hơn 12 ko?

						product.tag_product.push(tagProduct);
						productSvc.updateTag({ data: product }).then(function (resp) {
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công',
									message: 'Thêm sản phẩm ' + product.name + ' thành công'
								}
							});
							$state.reload();
						}).catch(function (error) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Thất bại',
									message: error.data.message
								}
							});
						});
					});
				}

			}
			else {
				vmTagProduct.submitted = true;
				vmTagProduct.lockForm = false;
			}
		}

		function updateOrder(data, product, id_tag, order_product) {
			tagSvc.getProductById(product._id).then(function (resp) {
				var index = 0;
				var p = resp.tag_product.find(function (item, key) {
					index = key;
					return item.id_tag == id_tag;
				});
				resp.tag_product[index].order = order_product;
				productSvc.updateTag({ data: resp }).then(function (resp) {
					$state.reload();
				});
			});

		}

		function deleteProduct(product, id_tag) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						// Search index tag
						tagSvc.getProductById(product._id).then(function (resp) {
							var index = 0;
							var p = resp.tag_product.find(function (item, key) {
								index = key;
								return item.id_tag == id_tag;
							});
							resp.tag_product.splice(index, 1);
							productSvc.updateTag({ data: resp }).then(function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công',
										message: 'Xóa nhãn thành công.'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							}).catch(function (error) {
								$bzPopup.toastr({
									type: 'error',
									data: {
										title: 'aaa',
										message: error.data.message
									}
								});
								$uibModalInstance.close();
							});
						});



					};
				}
			});
		}

		function showForm(item) {
			if (typeof item.showForm == "undefined")
				item.showForm = true;
			else {
				item.showForm = !item.showForm;
			}
		}

		function editExpire(product, id_tag) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'modules/admin-tag/view/client/popup/edit-tag-product/view.html',
				controller: 'updatetagProduct',
				resolve: {
					data: function () {
						return angular.copy({ product: product, id_tag: id_tag, optionTimePicker: vmTagProduct.optionTimePicker });
					}
				}
			});

			modalInstance.result.then(function (newData) {
				tagSvc.getProductById(product._id).then(function (resp) {
					var index = 0;
					var p = resp.tag_product.find(function (item, key) {
						index = key;
						return item.id_tag == id_tag;
					});
					//update tag data
					resp.tag_product[index] = newData;

					productSvc.updateTag({ data: resp }).then(function (resp) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Thành công',
								message: 'Cập nhật nhãn thành công.'
							}
						});
						$state.reload();
						$uibModalInstance.close();
					}).catch(function (error) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Cập nhật nhãn',
								message: error.data.message
							}
						});
						$uibModalInstance.close();
					});
				});
			}, function () {
			});
		}


	}


	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var tagProcesssingCtrl = (function () {
	'use strict';

	angular
		.module('bzTag')
		.controller('tagProcesssingCtrl', tagProcesssingCtrl);

	function tagProcesssingCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, tagSvc, productSvc) {
		/* jshint validthis: true */
		var vmTagProcessing = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('tag','view') ))){
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmTagProcessing.loading = true;
		vmTagProcessing.selectedItems = [];
		vmTagProcessing.queryParams = $stateParams;

		vmTagProcessing.userRoles = userRoles;
		// console.log('test', userRoles);
		vmTagProcessing.tags = [];
		vmTagProcessing.formData = {};
		vmTagProcessing.lockFOrm = false;
		vmTagProcessing.submitted = false;
		vmTagProcessing.optionTimePicker = {
			timePicker: true,
			timePickerIncrement: 30,
			singleDatePicker: false,
			locale: {
				format: 'h:mm DD/MM/YYYY'
			}
		};


		// Methods
		// vmTagProcessing.filter = filter;
		// vmTagProcessing.filterReset = filterReset;
		// vmTagProcessing.sort = sort;
		// vmTagProcessing.getProduct = getProduct;
		vmTagProcessing.saveProduct = saveProduct;
		vmTagProcessing.deleteProduct = deleteProduct;
		vmTagProcessing.showForm = showForm;
		vmTagProcessing.findTag = findTag;
		// vmTagProcessing.remove = remove;

		// Init
		getListTag();

		// ngTableEventsChannel.onPagesChanged(function() {
		// 	$scope.vmTagProcessing.queryParams.page = vmTagProcessing.table.page();
		// 	$state.go('.',$scope.vmTagProcessing.queryParams);
		// }, $scope, vmTagProcessing.table);

		function getListTag() {
			vmTagProcessing.productByTag = [];
			bzResourceSvc.api($window.settings.services.admin + '/tag')
			.get(vmTagProcessing.queryParams, function(resp){
				vmTagProcessing.tags = resp.items;
				vmTagProcessing.tags.forEach(function (item, index) {
					let id_tag = item._id;
					let type_tag = item.type;

					//lấy list sản phẩm ko thuộc id tag đổ ra formData
					tagSvc.getListProduct(id_tag, type_tag).then(function (resp) {
						item.products = resp.data;
					});

					//lấy list sản phẩm theo id tag đổ ra table
					tagSvc.getProductByTag(id_tag, type_tag).then(function (resp) {
						item.table = resp.data;
					});
				});
			});
		}


		function saveProduct(isValid, tag) {
			vmTagProcessing.submitted = true;
			vmTagProcessing.lockForm = true;
			if (isValid) {
				var tagProduct = {
					id_tag: tag._id,
				};
				
				var idProducts = tag.formData.idProducts;
				for (var i = 0; i < idProducts.length; i++) {
					var idProduct =  idProducts[i];

					tagSvc.getProductById(idProduct).then(function (resp) {
						var product = resp;
						product.tag_processing.push(tagProduct);

						productSvc.updateTag({ data: product}).then(function (resp) {
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công',
									message: 'Thêm nhãn thành công'
								}
							});
							$state.reload();
						}).catch(function (error) {
							console.log('error', error);
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'aaa',
									message: error.data.message
								}
							});
						});

					});
				}
					

			}
			else {
				vmTagProcessing.submitted = true;
			}
		}

		function deleteProduct(product, id_tag) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						// Search index tag
						var index = 0;
						var p = product.tag_processing.find(function (item, key) {
							index = key;
							return item.id_tag == id_tag;
						});
						product.tag_processing.splice(index, 1);
						productSvc.updateTag({ data: product}).then(function (resp) {
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công',
									message: 'Thêm nhãn thành công'
								}
							});
							$state.reload();
							$uibModalInstance.close();
						}).catch(function (error) {
							console.log('error', error);
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'aaa',
									message: error.data.message
								}
							});
							$uibModalInstance.close();
						});
					};
				}
			});
		}

		function showForm(item) {
			if (typeof item.showForm == "undefined")
				item.showForm = true;
			else {
				item.showForm = !item.showForm;
			}
		}

		function findTag(id_tag, product){
			return product.tag_processing.find(function(item){
				return item.id_tag == id_tag;
			})
		}
	}


	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var tagCtrl = (function () {
	'use strict';

	angular
		.module('bzTag')
		.controller('tagCtrl', tagCtrl);

	function tagCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, tagSvc) {
		/* jshint validthis: true */
		var vmTags = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('tag', 'view')))) {
			$state.go('error403');
		}

		vmTags.showBtnAdd = authSvc.hasPermission('tag', 'add');
		vmTags.showBtnEdit = authSvc.hasPermission('tag', ['add', 'edit']);
		vmTags.showBtnDelete = authSvc.hasPermission('tag', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmTags.loading = true;
		vmTags.selectedItems = [];
		vmTags.queryParams = $stateParams;
		vmTags.keyword = $stateParams.keyword;
		vmTags.type = $stateParams.type;
		vmTags.userRoles = userRoles;
		// console.log('test', userRoles);
		vmTags.tags = [];

		// Methods
		vmTags.filter = filter;
		vmTags.filterReset = filterReset;
		vmTags.sort = sort;
		vmTags.remove = remove;
		vmTags.setNameDisplayType = setNameDisplayType;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmTags.queryParams.page = vmTags.table.page();
			$state.go('.', $scope.vmTags.queryParams);
		}, $scope, vmTags.table);

		function getData() {
			bzResourceSvc.api($window.settings.services.admin + '/tag')
				.get(vmTags.queryParams, function (resp) {
					vmTags.queryParams.pageCount = resp.totalPage;
					vmTags.tags = resp.items;

					vmTags.table = new NgTableParams({ count: 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmTags.tags;
						}
					});
					vmTags.table.page(vmTags.queryParams.page);
					vmTags.loading = false;
				});
		}


		function filter(keyword) {
			$state.go('.', {
				keyword: keyword ? keyword : null,
				type: vmTags.type ? vmTags.type : null,
				page: 1
			}).then(function () {
				$state.reload();
			});
		}


		function filterReset() {
			$state.go('.', {
				keyword: null,
				type: null,
				page: 1,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}



		function sort(id, value) {
			$bzPopup.toastr({
				type: 'success',
				data: {
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự nhãn thành công!'
				}
			});
		}

		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/tag/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa nhãn thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	function setNameDisplayType(type) {
		if (type === "SP")
			return "Sản phẩm";
		if (type === "CN")
			return "Cách nấu";
		if (type === "BL")
			return "Bài viết";
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var tagEditCtrl = (function () {
    'use strict';

    angular
        .module('bzTag')
        .controller('tagEditCtrl', tagEditCtrl);

    function tagEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, tagSvc, listTagTypeBlog) {
        /* jshint validthis: true */
        var vmEditTags = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('tag',['add','edit']) ))){
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditTags.lockFOrm = false;
        vmEditTags.save = update;
        vmEditTags.vmEditTags = getTag;
        vmEditTags.submitted = false;
        vmEditTags.listTagTypeBlog = listTagTypeBlog;

        //Init
        getTag();

        function getTag(){
            const id = $stateParams.id;
            tagSvc.get(id).then(function(res){
                vmEditTags.formData = res;
            }).catch(function (err){
                 $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Getting',
                            message: err.data.message
                        }
                    });
            });
        };

        function update(isValid) {
            vmEditTags.submitted = true;
            vmEditTags.lockForm = true;
            // console.log(vmEditTags.formData);
            if (isValid) {
                tagSvc.update(vmEditTags.formData, vmEditTags.formData._id).then(function (resp) {
                    // console.log('success', resp);
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Phí vận chuyển',
                            message: resp.message
                        }
                    });
                $state.go('tag-list');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật phí vận chuyển',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditTags.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var tagAddCtrl = (function () {
    'use strict';

    angular
        .module('bzTag')
        .controller('tagAddCtrl', tagAddCtrl);

    function tagAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, tagSvc, listTagTypeBlog) {
        /* jshint validthis: true */
        var vmAddTags = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('tag','add') ))){
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddTags.formData = {};
        vmAddTags.lockFOrm = false;
        vmAddTags.save = create;
        vmAddTags.submitted = false;
        vmAddTags.listTagTypeBlog = listTagTypeBlog;

        //Init form
        vmAddTags.formData.type = "SP";

        function create(isValid) {
            vmAddTags.submitted = true;
            vmAddTags.lockForm = true;
            if (isValid) {
                tagSvc.create(vmAddTags.formData)
                .then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Nhãn sản phẩm',
                            message: 'Thêm thành công'
                        }
                    });
                $state.go('tag-list');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Thêm nhãn sản phẩm ',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmAddTags.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var shippingfeeCtrl = (function(){
	'use strict';

	angular
	.module('bzShippingFee')
	.controller('shippingfeeCtrl', shippingfeeCtrl);

	function shippingfeeCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
    userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, shippingfeeSvc){
		/* jshint validthis: true */
		var vmShippingFees = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('shipping','view') ))){
            $state.go('error403');
        }
		vmShippingFees.showBtnAdd = authSvc.hasPermission('shipping','add');
		vmShippingFees.showBtnEdit = authSvc.hasPermission('shipping',['add','edit']);
		vmShippingFees.showBtnDelete = authSvc.hasPermission('shipping','delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmShippingFees.loading = true;
		vmShippingFees.selectedItems = [];
		vmShippingFees.queryParams = $stateParams;
		vmShippingFees.keyword = $stateParams.keyword;

		vmShippingFees.userRoles = userRoles;
		vmShippingFees.shippingfees = [];
		// Methods
		vmShippingFees.filter = filter;
		vmShippingFees.filterReset = filterReset;
		vmShippingFees.sort = sort;
		vmShippingFees.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmShippingFees.queryParams.page = vmShippingFees.table.page();
			$state.go('.',$scope.vmShippingFees.queryParams);
		}, $scope, vmShippingFees.table);

		function getData(){
			bzResourceSvc.api($window.settings.services.admin + '/shippingfee')
			.get(vmShippingFees.queryParams, function(resp){
				vmShippingFees.queryParams.pageCount = resp.totalPage;
				vmShippingFees.shippingfees = resp.items;

				vmShippingFees.table = new NgTableParams({count: 10}, {
					counts: [],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmShippingFees.shippingfees;
					}
				});
				vmShippingFees.table.page(vmShippingFees.queryParams.page);
				vmShippingFees.loading = false;
			});
		}
		
		

        

		function filter(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmShippingFees.queryParams.page,
			}).then(function () {
				$state.reload();
			});
		}

		
		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmShippingFees.queryParams.page,
				// publish: null,
				// cateid: null,
				// limit: settingJs.admin.itemPerPage
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		

		function sort(id, value){
			$bzPopup.toastr({
				type: 'success',
				data:{
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự bài viết thành công!'
				}
			});
		}

		function remove(id){
			var selected = {ids: [id]}; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'assets/global/message/view.html',
				controller: function($scope, $uibModalInstance){
					$scope.popTitle = 'Xóa'; 
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?'; 
					$scope.ok = function(){
						bzResourceSvc.api($window.settings.services.admin + '/shippingfee/:id', {id: '@id'})
						.delete({id: selected.ids}, function(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Xóa',
									message: 'Xóa phí vận chuyển thành công!'
								}
							});
							$state.reload();
							$uibModalInstance.close();
						});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var shippingfeeEditCtrl = (function () {
    'use strict';

    angular
        .module('bzShippingFee')
        .controller('shippingfeeEditCtrl', shippingfeeEditCtrl);

    function shippingfeeEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, shippingfeeSvc) {
        /* jshint validthis: true */
        var vmEditShippingFees = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        

        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('shipping',['add','edit']) ))){
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditShippingFees.lockFOrm = false;
        vmEditShippingFees.save = update;
        vmEditShippingFees.getShippingFee = getShippingFee;
        vmEditShippingFees.submitted = false;

        //Init
        getShippingFee();

        function getShippingFee(){
            const id = $stateParams.id;
            shippingfeeSvc.get(id).then(function(res){
                vmEditShippingFees.formData = res;
            }).catch(function (err){
                 $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Getting',
                            message: err.data.message
                        }
                    });
            });
        };

        function update(isValid) {
            vmEditShippingFees.submitted = true;
            vmEditShippingFees.lockForm = true;
            if (isValid) {
                shippingfeeSvc.update(vmEditShippingFees.formData, vmEditShippingFees.formData._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Phí vận chuyển',
                            message: resp.message
                        }
                    });
                $state.go('shippingfee-list');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật phí vận chuyển',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditShippingFees.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var shippingfeeAddCtrl = (function () {
    'use strict';

    angular
        .module('bzShippingFee')
        .controller('shippingfeeAddCtrl', shippingfeeAddCtrl);

    function shippingfeeAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, shippingfeeSvc) {
        /* jshint validthis: true */
        var vmAddShippingFees = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/


        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('shipping', 'add')))) {
            $state.go('error403');
        }

        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddShippingFees.formData = {};
        vmAddShippingFees.lockFOrm = false;
        vmAddShippingFees.save = create;
        vmAddShippingFees.submitted = false;
        vmAddShippingFees.formData.type = "1";

        vmAddShippingFees.listShippingFeeInMongoDB = [];
        vmAddShippingFees.listShippingFeeDefault = [];
        vmAddShippingFees.listShippingFeeNoExitsInMongoDB = [];

        vmAddShippingFees.onChangeDistrict = onChangeDistrict;
        getListShippingFee('mongodb');

        // Method
        function onChangeDistrict() {
            if (vmAddShippingFees.formData.district) {
                vmAddShippingFees.listShippingFeeNoExitsInMongoDB.forEach(function (val) {
                    if (val.district == vmAddShippingFees.formData.district) {
                        vmAddShippingFees.formData.fee = val.fee;
                        vmAddShippingFees.formData.type = val.type + '';
                    }
                });

            }
        }

        function getListShippingFee(type) {
            // get list shipping in mongodb
            if (type == 'mongodb') {
                shippingfeeSvc.getAllNoPaging().then(function (resp) {
                    vmAddShippingFees.listShippingFeeInMongoDB = resp.items;
                    getListShippingFee('default');
                }).catch(function (err) {
                    console.log(type, err);
                })
            }
            // else default get all shiping fee config
            else {
                shippingfeeSvc.getShippingFeeDefault().then(function (resp) {
                    vmAddShippingFees.listShippingFeeDefault = resp.items;
                    vmAddShippingFees.listShippingFeeDefault.map(function (item) {
                        let exitsInMongoDB = false;
                        vmAddShippingFees.listShippingFeeInMongoDB.forEach(function (val) {
                            if (val.district == item.district) {
                                exitsInMongoDB = true;
                            }
                        });

                        if (!exitsInMongoDB) {
                            vmAddShippingFees.listShippingFeeNoExitsInMongoDB.push(item);
                        }
                    });
                }).catch(function (err) {
                    console.log('get default shipping fee', err);
                })
            }
        }

        function create(isValid) {
            vmAddShippingFees.submitted = true;
            vmAddShippingFees.lockForm = true;
            if (isValid) {
                shippingfeeSvc.create(vmAddShippingFees.formData)
                    .then(function (resp) {
                        $bzPopup.toastr({
                            type: 'success',
                            data: {
                                title: 'Giá vận chuyển',
                                message: 'Thêm thành công'
                            }
                        });
                        $state.go('shippingfee-list');
                    }).catch(function (error) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Thêm giá vận chuyển',
                                message: error.data.message
                            }
                        });
                    });
            }
            else {
                vmAddShippingFees.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var searchListCtrl = (function () {
	'use strict';

	angular
		.module('bzSearch')
		.controller('searchListCtrl', searchListCtrl);

	function searchListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, searchSvc) {
		var vmSeL = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('search', 'view')))) {
			$state.go('error403');
		}
		vmSeL.showBtnAdd = authSvc.hasPermission('search', 'add');
		vmSeL.showBtnEdit = authSvc.hasPermission('search', ['add', 'edit']);
		vmSeL.showBtnDelete = authSvc.hasPermission('search', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmSeL.loading = true;
		vmSeL.queryParams = $stateParams;
		vmSeL.urlImg = settingJs.configs.uploadDirectory.product;

		// Methods
		vmSeL.activeSearch = activeSearch;
		vmSeL.deleteSearch = deleteSearch;

		// Init
		getData();

		function pageChangeFunc() {
			$scope.vmSeL.queryParams.page = vmSeL.table.page();
			$state.go('.', $scope.vmSeL.queryParams);
		}

		ngTableEventsChannel.onPagesChanged(pageChangeFunc, $scope, vmSeL.table);

		/*FUNCTION*/
		function getData() {
			searchSvc.getAll(vmSeL.queryParams).then(function (resp) {
				vmSeL.queryParams.pageCount = resp.totalPage;
				vmSeL.list = resp.items;

				vmSeL.table = new NgTableParams({
					count: vmSeL.queryParams.limit
				},
					{
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmSeL.list;
						}
					});
				vmSeL.table.page(vmSeL.queryParams.page);
				vmSeL.loading = false;
			})
		}

		// Active / Unactive Product
		function activeSearch(item) {
			item.status = !item.status;
			var textActive = item.status ? 'bỏ công khai' : 'công khai';
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = '';
					$scope.message = 'Bạn muốn ' + textActive + ' từ khóa này?';

					$scope.ok = function () {
						searchSvc.active(item._id).then(function (resp) {
							item.status = !item.status;
							$uibModalInstance.close();
						});
					}
				}
			});
		}

		// Delete Product
		function deleteSearch(id) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa từ khóa này?';

					$scope.ok = function () {
						searchSvc.del(id).then(function (resp) {
							if (resp.success) {
								vmSeL.queryParams.page = 1;
								$state.go('.', vmSeL.queryParams).then(function () {
									$state.reload();
									$uibModalInstance.close();

									$bzPopup.toastr({
										type: 'success',
										data: {
											title: 'Thành công!',
											message: 'Xóa từ khóa thành công!'
										}
									});
								});
							}
						}, function (resp) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa từ khóa thất bại!'
								}
							});
						});
					}
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var searchEditCtrl = (function () {
	'use strict';

	angular
		.module('bzSearch')
		.controller('searchEditCtrl', searchEditCtrl);

	function searchEditCtrl($scope, $state, $stateParams, $bzPopup, $window, authSvc, searchSvc) {
		var vmSeE = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('search', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmSeE.queryParams = $stateParams;

		// Methods
		vmSeE.removeDisabledSubmit = removeDisabledSubmit;
		vmSeE.update = update;
		vmSeE.getData = getData;

		// Init

		/*FUNCTION*/

		// Submit add product

		function getData() {
			searchSvc.edit(vmSeE.queryParams.id).then(function (resp) {
				vmSeE.search = resp.data;
				vmSeE.loading = true;
			});
		}

		function update(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin'
					}
				});
				return;
			};
			searchSvc.update({
				data: vmSeE.search
			}, vmSeE.queryParams.id).then(function (resp) {
				$state.go("search-list");
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Sửa từ khóa thành công!'
					}
				});
			}).catch(function (error) {
				console.log(error);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Sửa từ khóa thất bại!'
					}
				});
			});
		}

		function removeDisabledSubmit(form) {
			if (form) form.$submitted = false;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var searchAddCtrl = (function () {
	'use strict';

	angular
		.module('bzSearch')
		.controller('searchAddCtrl', searchAddCtrl);

	function searchAddCtrl($scope, $state, $stateParams, $bzPopup, $window, authSvc, searchSvc) {
		var vmSeA = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('search','add') ))){
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmSeA.loading = true;
		vmSeA.queryParams = $stateParams;

		// Methods
		vmSeA.removeDisabledSubmit = removeDisabledSubmit;
		vmSeA.add = add;
		vmSeA.getData = getData;

		// Init

		/*FUNCTION*/

		// Submit add product

		function getData() {
			vmSeA.search = {
				status: true
			}
		}

		function add(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			};
			searchSvc.create({
				data: vmSeA.search
			}).then(function (resp) {
				$state.go("search-list");
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Thêm từ khóa thành công!'
					}
				});
			}).catch(function (error) {
				console.log(error);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Thêm từ khóa thất bại!'
					}
				});
			});
		}

		function removeDisabledSubmit(form) {
			if (form) form.$submitted = false;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var reportProductOrderCtrl = (function () {
	'use strict';

	angular
		.module('bzReport')
		.controller('reportProductOrderCtrl', reportProductOrderCtrl);

	function reportProductOrderCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, reportSvc, productSvc) {
		var vmRPO = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('product', 'view')))) {
			$state.go('error403');
		}

		vmRPO.showBtnAdd = authSvc.hasPermission('order', 'add');
		vmRPO.showBtnEdit = authSvc.hasPermission('order', ['add', 'edit']);
		vmRPO.showBtnDelete = authSvc.hasPermission('order', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmRPO.loading = true;
		vmRPO.queryParams = $stateParams;
		vmRPO.setting = settingJs;
		vmRPO.urlImg = settingJs.configs.uploadDirectory.thumb_product;
		vmRPO.filter = {};

		// Methods
		vmRPO.filterForm = filterForm;
		vmRPO.clearFilter = clearFilter;
		vmRPO.checkImgOld = productSvc.checkImgOld;

		// Init
		getData();

		function pageChangeFunc() {
			$scope.vmRPO.queryParams.page = vmRPO.table.page();
			$state.go('.', $scope.vmRPO.queryParams);
		}

		// ngTableEventsChannel.onPagesChanged(pageChangeFunc, $scope, vmRPO.table);
		ngTableEventsChannel.onAfterReloadData(function () {
			var sort = vmRPO.table.sorting();
			if (!angular.equals(sort, {})) {
				$scope.vmRPO.queryParams.qty_in_stock = sort.qty_in_stock;
				$scope.vmRPO.queryParams.total_order = sort.total_order;
			}
			pageChangeFunc();
		}, $scope, vmRPO.table);

		/*FUNCTION*/
		function getData() {
			/*Start: set datetime picker*/
			var dateTimePickerOpt = {
				singleDatePicker: false
			};

			if (vmRPO.queryParams.date) {
				var date = vmRPO.queryParams.date.split(' - ');
				angular.extend(dateTimePickerOpt, {
					startDate: date[0],
					endDate: date[1],
				});
				angular.element('#datetime-picker').val(vmRPO.queryParams.date);
			}
			vmRPO.dateTimePickerOpt = dateTimePickerOpt;
			/*End: set datetime picker*/


			reportSvc.reportProductOrder(vmRPO.queryParams).then(function (resp) {
				vmRPO.queryParams.pageCount = resp.totalPage;
				vmRPO.list = resp.items;
				vmRPO.categoryList = resp.categories;
				vmRPO.optionsCate = formatCategory(resp.categoryWithSub);

				vmRPO.table = new NgTableParams({
					count: vmRPO.queryParams.limit,
					sorting: {
						qty_in_stock: vmRPO.queryParams.qty_in_stock,
						total_order: vmRPO.queryParams.total_order
					},
				},
					{
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmRPO.list;
						},
					});
				vmRPO.table.page(vmRPO.queryParams.page);
				vmRPO.loading = false;
			}).catch(function (err) {
				console.log(err);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Lấy dữ liệu thất bại!'
					}
				});
			})
		}

		function filterForm() {
			vmRPO.queryParams.page = 1;

			if (vmRPO.filter.date) {
				vmRPO.queryParams.date = formatDate(vmRPO.filter.date.startDate) + ' - ' + formatDate(vmRPO.filter.date.endDate);
			}

			$state.go('.', vmRPO.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmRPO.queryParams.name = null;
			vmRPO.queryParams.category = null;
			vmRPO.queryParams.date = null;
			vmRPO.queryParams.total_order = null;
			vmRPO.queryParams.qty_in_stock = null;
			$state.go('.', vmRPO.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatDate(date) {
			return date.format('DD/MM/YYYY');
		}

		function formatCategory(categories) {
			var options = [];
			var createSub = function (category, cates) {
				cates.push(category);
				if (category.sub_category && category.sub_category.length > 0) {
					category.sub_category.forEach(function (sub) {
						return createSub(sub, cates);
					})
				}
				return cates;
			}

			categories.forEach(function (category) {
				var array = createSub(category, []);
				category.sub_cate = array.splice(1);
				options.push(category);
			})
			return options;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var reportProductADayCtrl = (function () {
	'use strict';

	angular
		.module('bzReport')
		.controller('reportProductADayCtrl', reportProductADayCtrl);

	function reportProductADayCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, reportSvc, productSvc, statusProduct) {
		var vmRPA = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('product', 'view')))) {
			$state.go('error403');
		}

		vmRPA.showBtnAdd = authSvc.hasPermission('order', 'add');
		vmRPA.showBtnEdit = authSvc.hasPermission('order', ['add', 'edit']);
		vmRPA.showBtnDelete = authSvc.hasPermission('order', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmRPA.loading = true;
		vmRPA.queryParams = $stateParams;
		vmRPA.setting = settingJs;
		vmRPA.urlImg = settingJs.configs.uploadDirectory.thumb_product;
		vmRPA.statusProduct = statusProduct;

		// Methods
		vmRPA.filterForm = filterForm;
		vmRPA.clearFilter = clearFilter;
		vmRPA.checkImgOld = productSvc.checkImgOld;
		vmRPA.formatTag = formatTag;
		vmRPA.formatCategory = formatCategory;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(pageChangeFunc, $scope, vmRPA.table);

		/*FUNCTION*/
		function getData() {
			reportSvc.reportProductADay(vmRPA.queryParams).then(function (resp) {
				vmRPA.queryParams.pageCount = resp.totalPage;
				vmRPA.totalItems = resp.totalItems;
				vmRPA.list = resp.items;
				vmRPA.categoryList = resp.categoryList;
				vmRPA.optionsCate = formatCategory(resp.categoryWithSub);
				vmRPA.tagList = resp.tagList;
				vmRPA.filterTmp = {
					status: vmRPA.queryParams.status
				}

				vmRPA.table = new NgTableParams({
					count: vmRPA.queryParams.limit
				},
					{
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmRPA.list;
						}
					});
				vmRPA.table.page(vmRPA.queryParams.page);
				vmRPA.loading = false;
			})
		}

		function pageChangeFunc() {
			$scope.vmRPA.queryParams.page = vmRPA.table.page();
			$state.go('.', $scope.vmRPA.queryParams);
		}

		function filterForm() {
			vmRPA.queryParams.page = 1;
			vmRPA.queryParams.status = vmRPA.filterTmp.status;
			$state.go('.', vmRPA.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmRPA.queryParams.name = null;
			vmRPA.queryParams.category = null;
			vmRPA.queryParams.status = null;
			vmRPA.queryParams.tag = null;
			vmRPA.queryParams.dueDate = null;
			$state.go('.', vmRPA.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatTag(item) {
			return item.product.tag_processing.concat(item.product.tag_product);
		}

		function formatCategory(categories) {
			var options = [];
			var createSub = function (category, cates) {
				cates.push(category);
				if (category.sub_category && category.sub_category.length > 0) {
					category.sub_category.forEach(function (sub) {
						return createSub(sub, cates);
					})
				}
				return cates;
			}

			categories.forEach(function (category) {
				var array = createSub(category, []);
				category.sub_cate = array.splice(1);
				options.push(category);
			})
			return options;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var promotionListCtrl = (function () {
	'use strict';

	angular
		.module('bzProduct')
		.controller('promotionListCtrl', promotionListCtrl);

	function promotionListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, promotionSvc) {
		var vmPoL = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('promotion','view') ))){
            $state.go('error403');
        }

		vmPoL.showBtnAdd = authSvc.hasPermission('promotion','add');
		vmPoL.showBtnEdit = authSvc.hasPermission('promotion',['add','edit']);
		vmPoL.showBtnDelete = authSvc.hasPermission('promotion','delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmPoL.loading = true;
		vmPoL.queryParams = $stateParams;
		vmPoL.urlImg = settingJs.configs.uploadDirectory.product;

		// Methods
		vmPoL.remove = remove;

		// Init
		getData();

		function pageChangeFunc() {
			$scope.vmPoL.queryParams.page = vmPoL.table.page();
			$state.go('.', $scope.vmPoL.queryParams);
		}

		ngTableEventsChannel.onPagesChanged(pageChangeFunc, $scope, vmPoL.table);

		/*FUNCTION*/
		function getData() {
			promotionSvc.getAll(vmPoL.queryParams).then(function (resp) {
				vmPoL.queryParams.pageCount = resp.totalPage;
				vmPoL.list = resp.items;

				vmPoL.table = new NgTableParams({
					count: vmPoL.queryParams.limit
				},
					{
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmPoL.list;
						}
					});
				vmPoL.table.page(vmPoL.queryParams.page);
				vmPoL.loading = false;
			});
		}


		// Delete Product
		function remove(id) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa promotion này?';

					$scope.ok = function () {
						promotionSvc.delete(id).then(function (resp) {
							if (resp.success) {
								vmPoL.queryParams.page = 1;
								$state.go('.', vmPoL.queryParams).then(function () {
									$state.reload();
									$uibModalInstance.close();

									$bzPopup.toastr({
										type: 'success',
										data: {
											title: 'Thành công!',
											message: 'Xóa promotion thành công!'
										}
									});
								});
							}
						}, function (resp) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa promotion thất bại!'
								}
							});
						});
					}
				}
			});
		}

	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var promotionEditCtrl = (function () {
	'use strict';

	angular
		.module('bzPromotion')
		.controller('promotionEditCtrl', promotionEditCtrl);

	function promotionEditCtrl($scope, $state, $stateParams, $bzPopup, $window, $timeout, authSvc, promotionSvc) {
		var vmPoE = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('promotion', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmPoE.loading = true;
		vmPoE.queryParams = $stateParams;
		var dateTimePickerOpt = {
			singleDatePicker: false
		};

		// Methods
		vmPoE.submit = submit;
		vmPoE.removeDisabled = removeDisabled;

		// Init
		getData();

		/*FUNCTION*/
		// Start: Create default data
		function getData() {
			promotionSvc.edit(vmPoE.queryParams.id).then(function (resp) {
				vmPoE.prom = resp.prom;
				var textDateTime = '';
				if (vmPoE.prom.expire_date) {
					var startDate = moment(vmPoE.prom.expire_date.startDate).format('DD/MM/YYYY');
					var endDate = moment(vmPoE.prom.expire_date.endDate).format('DD/MM/YYYY');
					angular.extend(dateTimePickerOpt, {
						startDate: startDate,
						endDate: endDate,
					});
					textDateTime = startDate + ' - ' + endDate;
				}
				vmPoE.dateTimePickerOpt = dateTimePickerOpt;
				$timeout(function () {
					angular.element('#datetime-picker').val(textDateTime);
				}, 10);
				vmPoE.listProm = resp.listProm;
				vmPoE.listProduct = resp.products;
				vmPoE.product_apply = vmPoE.prom.product.map(function (item) {
					return item._id;
				});
				vmPoE.loading = false;
			}).catch(function (error) {
				console.error(error);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Có vấn đề! Hãy thử tải lại trang.'
					}
				});
			});
		}
		// End: Create default data

		// Submit promotion
		function submit(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			};
			vmPoE.promExist = vmPoE.listProm.find(function (item) {
				return item.name == vmPoE.prom.name;
			});
			if (vmPoE.promExist) {
				return;
			};
			if (vmPoE.date) {
				vmPoE.prom.expire_date = vmPoE.date;
			}
			promotionSvc.update({
				data: vmPoE.prom,
				product_apply: vmPoE.product_apply
			}, vmPoE.queryParams.id).then(function (resp) {
				$state.go('promotion-list');
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Sửa giảm giá sản phẩm thành công!'
					}
				});
			}).catch(function (error) {
				console.log(error);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Sửa giảm giá sản phẩm thất bại!'
					}
				});
			});
		}

		function removeDisabled(form) {
			form.$submitted = false;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var promotionAddCtrl = (function () {
	'use strict';

	angular
		.module('bzPromotion')
		.controller('promotionAddCtrl', promotionAddCtrl);

	function promotionAddCtrl($scope, $state, $stateParams, $bzPopup, $window, $timeout, authSvc, promotionSvc) {
		var vmPoA = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('promotion', 'add')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmPoA.loading = true;
		vmPoA.queryParams = $stateParams;
		vmPoA.dateTimePickerOpt = {
			singleDatePicker: false
		};

		// Methods
		vmPoA.addPromotion = addPromotion;
		vmPoA.removeDisabled = removeDisabled;

		// Init
		getData();

		/*FUNCTION*/
		// Start: Create default data
		function getData() {
			promotionSvc.add().then(function (resp) {
				vmPoA.prom = {
					type: 'PC',
					status: true
				};
				vmPoA.loading = false;
				vmPoA.listProm = resp.list;
				vmPoA.listProduct = resp.products;
			}).catch(function (error) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Có vấn đề! Hãy thử tải lại trang.'
					}
				});
			});
		}
		// End: Create default data

		// Submit add promotion
		function addPromotion(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			};
			vmPoA.promExist = vmPoA.listProm.find(function (item) {
				return item.name == vmPoA.prom.name;
			});
			if (vmPoA.promExist) {
				return;
			}

			vmPoA.prom.expire_date = vmPoA.date;
			promotionSvc.create({
				data: vmPoA.prom,
				product_apply: vmPoA.product_apply
			}).then(function (resp) {
				$state.go('promotion-list');
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Thêm giảm giá sản phẩm thành công!'
					}
				});
			}).catch(function (error) {
				console.log(error);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Thêm giảm giá sản phẩm thất bại!'
					}
				});
			});
		}

		function removeDisabled(form) {
			form.$submitted = false;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var productListCtrl = (function () {
	'use strict';

	angular
		.module('bzProduct')
		.controller('productListCtrl', productListCtrl);

	function productListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, productSvc, statusProduct) {
		var vmPrL = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('product', 'view')))) {
			$state.go('error403');
		}

		vmPrL.showBtnAdd = authSvc.hasPermission('product', 'add');
		vmPrL.showBtnEdit = authSvc.hasPermission('product', ['add', 'edit']);
		vmPrL.showBtnDelete = authSvc.hasPermission('product', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmPrL.loading = true;
		vmPrL.queryParams = $stateParams;
		vmPrL.setting = settingJs;
		vmPrL.urlImg = settingJs.configs.uploadDirectory.thumb_product;
		vmPrL.statusProduct = statusProduct;
		vmPrL.btnExport = false;

		// Methods
		vmPrL.activeProduct = activeProduct;
		vmPrL.deleteProduct = deleteProduct;
		vmPrL.filterForm = filterForm;
		vmPrL.clearFilter = clearFilter;
		vmPrL.dueDate = dueDate;
		vmPrL.formatTag = formatTag;
		vmPrL.checkImgOld = productSvc.checkImgOld;
		vmPrL.exportExcel = exportExcel;

		// Init
		getData();

		function pageChangeFunc() {
			$scope.vmPrL.queryParams.page = vmPrL.table.page();
			$state.go('.', $scope.vmPrL.queryParams);
		}

		ngTableEventsChannel.onPagesChanged(pageChangeFunc, $scope, vmPrL.table);

		/*FUNCTION*/
		function getData() {
			productSvc.getAll(vmPrL.queryParams).then(function (resp) {
				vmPrL.queryParams.pageCount = resp.totalPage;
				vmPrL.totalItems = resp.totalItems;
				vmPrL.list = resp.items;
				vmPrL.categoryList = resp.categoryList;
				vmPrL.optionsCate = formatCategory(resp.categoryWithSub);
				vmPrL.tagList = resp.tagList;
				vmPrL.productBalance = resp.productBalance;
				vmPrL.filterTmp = {
					// status: vmPrL.queryParams.status ? vmPrL.queryParams.status : vmPrL.statusProduct[0].value
					status: vmPrL.queryParams.status
				}

				vmPrL.table = new NgTableParams({
					count: vmPrL.queryParams.limit
				},
					{
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmPrL.list;
						}
					});
				vmPrL.table.page(vmPrL.queryParams.page);
				vmPrL.loading = false;
			});
		}

		// Active / Unactive Product
		function activeProduct(product) {
			product.active = !product.active;
			var textActive = product.active ? 'bỏ công khai' : 'công khai';
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = '';
					$scope.message = 'Bạn muốn ' + textActive + ' sản phẩm này?';

					$scope.ok = function () {
						productSvc.activeProduct(product._id).then(function (resp) {
							product.active = !product.active;
							$uibModalInstance.close();
						});
					}
				}
			});
		}

		// Delete Product
		function deleteProduct(id, key) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa sản phẩm này?';

					$scope.ok = function () {
						productSvc.deleteProduct(id).then(function (resp) {
							if (resp.success) {
								vmPrL.queryParams.page = 1;
								$state.go('.', vmPrL.queryParams).then(function () {
									$state.reload();
									$uibModalInstance.close();

									$bzPopup.toastr({
										type: 'success',
										data: {
											title: 'Thành công!',
											message: 'Xóa sản phẩm thành công!'
										}
									});
								});
							}
						}, function (resp) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa sản phẩm thất bại!'
								}
							});
						});
					}
				}
			});
		}

		function filterForm(form) {
			vmPrL.queryParams.page = 1;
			vmPrL.queryParams.status = vmPrL.filterTmp.status;
			$state.go('.', vmPrL.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmPrL.queryParams.name = null;
			vmPrL.queryParams.active = null;
			vmPrL.queryParams.category = null;
			vmPrL.queryParams.status = null;
			vmPrL.queryParams.tag = null;
			vmPrL.queryParams.dueDate = null;
			$state.go('.', vmPrL.queryParams).then(function () {
				$state.reload();
			});
		}

		function dueDate(end_date) {
			if (end_date) {
				var today = moment();
				end_date = moment(end_date);
				return moment(today).isBefore(end_date);
			}
		}

		function formatTag(product) {
			return product.tag_processing.concat(product.tag_product);
		}

		function formatCategory(categories) {
			var options = [];
			var createSub = function (category, cates) {
				cates.push(category);
				if (category.sub_category && category.sub_category.length > 0) {
					category.sub_category.forEach(function (sub) {
						return createSub(sub, cates);
					})
				}
				return cates;
			}

			categories.forEach(function (category) {
				var array = createSub(category, []);
				category.sub_cate = array.splice(1);
				options.push(category);
			})
			return options;
		}

		function convertHtml(str) {
			return $('<div />').html(str.replace(/(<([^>]+)>)/g, "")).text()
		}

		// Export Excel
		function exportExcel(detail) {
			vmPrL.btnExport = true;
			if (detail) {
				var data = [[
					'Tên sản phẩm', 'Danh mục', 'Danh mục con', 'Đơn vị', 'Publish', 'Trạng thái', 'Mô tả ngắn', 'Thông tin chi tiết'
				]];
			}
			else {
				var data = [[
					'STT', 'Tên sản phẩm', 'Đơn giá', 'Giá khuyến mãi', 'Danh mục', 'Danh mục con', 'Đơn vị', 'Đơn vị hiển thị', 'Publish',
				]];
			}

			var options = {
				type: 'xlsx',
				sheetName: 'SheetJS1',
				fileName: 'Product',
			};
			var query = (JSON.parse(JSON.stringify(vmPrL.queryParams)));
			query.limit = vmPrL.totalItems;
			query.page = 1;

			productSvc.getAll(query).then(function (resp) {
				resp.items.forEach(function (item, index) {
					var category_txt = '';
					var category_sub_txt = '';
					var list_parent_category = [];
					item.category_list.forEach(function (cate, key) {
						var comma = '';
						if (key != 0) {
							comma += ', ';
						}
						if (cate.parrent_id) {
							var parent_category = productSvc.getCategoryParent(cate);
							if (list_parent_category.indexOf(parent_category.name) == -1) {
								list_parent_category.push(parent_category.name);
								category_txt += comma + parent_category.name;
							}
							category_sub_txt += comma + cate.name;
						}
						else {
							category_txt += comma + cate.name;
						};
					});

					var price_after_coupon = '';
					if (item.promotion) {
						switch (item.promotion.type) {
							case 'PC':
								price_after_coupon = item.price * (100 - item.promotion.value) / 100;
								break;
							case 'MN':
								price_after_coupon = item.price - item.promotion.value;
								break;
						}
					}

					var status_product = '';
					if (item.qty_in_stock == 0) {
						status_product = 'Hết hàng';
					}
					if (0 < item.qty_in_stock && item.qty_in_stock <= vmPrL.productBalance.value) {
						status_product = 'Sắp hết hàng';
					}
					if (item.qty_in_stock > vmPrL.productBalance.value) {
						status_product = 'Còn hàng';
					}

					if (detail) {
						data.push([
							item.name, category_txt, category_sub_txt, item.unit.name, item.active ? 'Có' : 'Không', status_product,
							convertHtml(item.short_description), convertHtml(item.detail_infor)
						]);
					}
					else {
						data.push([
							index + 1, item.name, item.price, price_after_coupon, category_txt, category_sub_txt, item.unit.name, item.view_unit, item.active ? 'Có' : 'Không',
						]);
					}
				});
				ExcelJs.exportExcel(data, options);
				vmPrL.btnExport = false;
			}).catch(function (error) {
				console.log(error);
				vmPrL.btnExport = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Xuất Excel thất bại!'
					}
				});
			});

		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var productEditCtrl = (function () {
	'use strict';

	angular
		.module('bzProduct')
		.controller('productEditCtrl', productEditCtrl);

	function productEditCtrl($scope, $state, $stateParams, $bzPopup, $window, $timeout, $uibModal,
		authSvc, productSvc, Upload, CKEditorOptPro, statusProduct) {
		var vmPrE = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('product', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmPrE.queryParams = $stateParams;
		vmPrE.loading = true;
		vmPrE.urlImg = settingJs.configs.uploadDirectory.product;
		vmPrE.ckeOpt = CKEditorOptPro;
		vmPrE.statusProduct = statusProduct;

		// Methods
		vmPrE.submitForm = submitForm;
		vmPrE.getNameTag = getNameTag;
		vmPrE.uploadImage = uploadImage;
		vmPrE.removeRelated = removeRelated;
		vmPrE.changeStatus = changeStatus;
		vmPrE.removeDisabled = removeDisabled;
		vmPrE.removeImage = removeImage;
		vmPrE.addTagProccess = addTagProccess;
		vmPrE.checkSlug = checkSlug;
		vmPrE.cropImage = cropImage;
		vmPrE.selectThumb = selectThumb;
		vmPrE.checkImgOld = productSvc.checkImgOld;
		vmPrE.checkActiveOnsale = checkActiveOnsale;
		vmPrE.fixImgProductDetail = productSvc.fixImgProductDetail;

		// Init
		getData();

		/*FUNCTION*/
		function getData() {
			productSvc.getProductByID(vmPrE.queryParams.id).then(function (resp) {
				vmPrE.productTmp = {};
				vmPrE.optionsCate = formatCategory(resp.categoryWithSub);
				vmPrE.unitList = resp.unit;
				vmPrE.product = resp.product;
				vmPrE.product.videos = resp.product.videos ? resp.product.videos : [];
				vmPrE.product.video = resp.product.videos.length > 0 ? resp.product.videos[0].url : '';
				if (vmPrE.product.thumb) {
					vmPrE.productTmp.thumb = productSvc.thumbToImage(vmPrE.product.thumb);
				}

				vmPrE.categoryList = resp.categoryList;
				vmPrE.promotionList = resp.promotionList;
				vmPrE.certificateList = resp.certificateList;
				vmPrE.tags_proccess = resp.tags_proccess;
				vmPrE.tmp_tag_proccessing = vmPrE.product.tag_processing.map(function (item) {
					return item.id_tag;
				})

				// Start: Datetime picker
				var dateTimePickerOpt = {
					singleDatePicker: false
				};
				var textDateTime = '';
				if (vmPrE.product.due_date) {
					var startDate = moment(vmPrE.product.due_date.start_date).format('DD/MM/YYYY');
					var endDate = moment(vmPrE.product.due_date.end_date).format('DD/MM/YYYY');
					angular.extend(dateTimePickerOpt, {
						startDate: startDate,
						endDate: endDate,
					});
					textDateTime = startDate + ' - ' + endDate;

				}
				vmPrE.dateTimePickerOpt = dateTimePickerOpt;
				vmPrE.showDateTime = true;
				$timeout(function () {
					angular.element('#datetime-picker').val(textDateTime);
				}, 10);
				// End: Datetime picker

				vmPrE.active_tmp = vmPrE.product.active ? '1' : '0';
				vmPrE.vat_tmp = vmPrE.product.vat ? '1' : '0';
				vmPrE.productList = resp.productList;
				vmPrE.productBalance = resp.productBalance ? resp.productBalance.value : 3;
				vmPrE.imgDelete = [];
				vmPrE.product.detail_infor = productSvc.fixImgProductDetail(vmPrE.product.detail_infor);
				getNameTag();
				vmPrE.loading = false;
			}).catch(function (error) {
				console.log(error);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Có vấn đề! Hãy thử tải lại trang.'
					}
				});
			});
		}

		function formatCategory(categories) {
			var options = [];
			var createSub = function (category, cates) {
				cates.push(category);
				if (category.sub_category && category.sub_category.length > 0) {
					category.sub_category.forEach(function (sub) {
						return createSub(sub, cates);
					})
				}
				return cates;
			}

			categories.forEach(function (category) {
				var array = createSub(category, []);
				category.sub_cate = array.splice(1);
				options.push(category);
			})
			return options;
		}

		function changeStatus() {
			if (vmPrE.product.qty_in_stock < vmPrE.productBalance) {
				vmPrE.product.status = 'SHH';
				return;
			}
			if (vmPrE.product.qty_in_stock >= vmPrE.productBalance) {
				vmPrE.product.status = 'CH';
				return;
			}
		}

		function getNameTag() {
			vmPrE.units_name = vmPrE.unitList.find(function (item) {
				return vmPrE.product.id_unit === item._id
			});
		}

		function removeRelated(value) {
			var index = vmPrE.product.relative_product.indexOf(value._id);
			if (index > -1) {
				vmPrE.product.relative_product.splice(index, 1);
				// Start: Fix element not remove in select2
				$timeout(function () {
					var ele = $('#mod-product-edit .content .select2-search-choice:contains("' + value.name + '")');
					ele.find('.select2-search-choice-close').trigger('click');
				}, 10);
				// End: Fix element not remove in select2
			}
		}

		function uploadImage(file) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg") {
					Upload.imageDimensions(file[0]).then(function (dimensions) {
						if (dimensions.width > 448 && dimensions.height > 448) {
							Upload.upload({
								url: $window.settings.services.uploadApi + '/upload/file',
								data: {
									file: file[0],
									type: 'product_image',
									prefix: 'product_image',
								}
							}).then(function (resp) {
								vmPrE.product.images.push({
									url: resp.data.filename
								});
								$scope.progressPercentage = false;
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công!',
										message: 'Upload ảnh thành công!'
									}
								});
							}, function (resp) {
								$bzPopup.toastr({
									type: 'error',
									data: {
										title: 'Lỗi!',
										message: 'Upload ảnh lỗi!'
									}
								});
							}, function (evt) {
								$scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
							});
						}
						else {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Hình ảnh phải có kích thước lớn hơn 448px x 448px!'
								}
							});
						}
					});
				}
				else {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Hình ảnh phải có định dạng png hoặc jpg!'
						}
					});
					return;
				}
			}
		}

		function checkSlug(text) {
			vmPrE.product.slug = productSvc.changeToSlug(text);
		}

		function submitForm(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng nhập đầy đủ thông tin.'
					}
				});
				return;
			}

			vmPrE.product.active = vmPrE.active_tmp == '1' ? true : false;
			vmPrE.product.vat = vmPrE.vat_tmp == '1' ? true : false;
			if (vmPrE.productTmp.due_date) {
				vmPrE.product.due_date = {
					start_date: vmPrE.productTmp.due_date.startDate,
					end_date: vmPrE.productTmp.due_date.endDate
				};
			}

			if (vmPrE.product.video) {
				vmPrE.product.video = productSvc.formatYoutube(vmPrE.product.video);

				vmPrE.product.videos = [{
					url: vmPrE.product.video
				}];
				delete vmPrE.product.video;
			}

			if (vmPrE.productTmp.thumb) {
				if (productSvc.imageToThumb(vmPrE.productTmp.thumb) != vmPrE.product.thumb) {
					vmPrE.product.thumb = vmPrE.productTmp.thumb;
				}
			}

			productSvc.updateProduct({
				data: vmPrE.product,
				imgDelete: vmPrE.imgDelete
			}, vmPrE.product._id).then(function (resp) {
				if (resp.success == true) {
					$state.go("product");
					$bzPopup.toastr({
						type: 'success',
						data: {
							title: 'Thành công!',
							message: 'Sửa sản phẩm thành công!'
						}
					});
				}
			}).catch(function (error) {
				form.$submitted = false;
				console.log(error);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Sửa sản phẩm thất bại. Hãy thử lại'
					}
				});
			});
		}

		function removeImage(key, url, fileName) {
			vmPrE.imgDelete.push({
				url: url,
				fileName: fileName
			});
			vmPrE.product.images.splice(key, 1);
		}

		function removeDisabled(form) {
			if (form) {
				form.$submitted = false;
			}
		}

		function addTagProccess(tmp_tag_proccess) {
			if (tmp_tag_proccess) {
				vmPrE.product.tag_processing = tmp_tag_proccess.map(function (item) {
					return {
						id_tag: item
					};
				});
			}
		}

		function cropImage(key, image_product) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/cropper/view.html',
				controller: function ($scope, $uibModalInstance) {
					var popupScope = this;
					$scope.popupScope = {
						image: vmPrE.urlImg + image_product.url,
						event: 'crop:image',
						ratio: 1,
						width: 500,
						height: 500,
					};
					$scope.$on('crop:image', function (event, image) {
						productSvc.uploadBase64({ directory: 'product_image', image: image.image }).then(function (resp) {
							var old_image = image_product.url;
							vmPrE.imgDelete.push({
								url: vmPrE.urlImg,
								fileName: image_product.url
							});
							vmPrE.product.images[key].url = resp.name;
							if (vmPrE.productTmp.thumb == old_image) {
								selectThumb(key);
							}
							$uibModalInstance.close();
						});
					});
				}
			});
		}

		function selectThumb(key) {
			vmPrE.productTmp.thumb = vmPrE.product.images[key].url;
		}

		function checkActiveOnsale(onsale) {
			var text = onsale.name;
			if (!onsale.status)
				text += " (Unactive)";
			return text;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var productAddCtrl = (function () {
	'use strict';

	angular
		.module('bzProduct')
		.controller('productAddCtrl', productAddCtrl);

	function productAddCtrl($scope, $state, $stateParams, $bzPopup, $window, $timeout, $uibModal,
		authSvc, productSvc, Upload, CKEditorOptPro, statusProduct) {
		var vmPrA = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('product', 'add')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmPrA.loading = true;
		vmPrA.queryParams = $stateParams;
		vmPrA.urlUploadImg = settingJs.configs.uploadDirectory.product;
		vmPrA.ckeOpt = CKEditorOptPro;
		vmPrA.statusProduct = statusProduct;
		vmPrA.dateTimePickerOpt = {
			singleDatePicker: false
		};

		// Methods
		vmPrA.addProduct = addProduct;
		vmPrA.getNameTag = getNameTag;
		vmPrA.uploadImage = uploadImage;
		vmPrA.removeProductRelated = removeProductRelated;
		vmPrA.changeStatusProduct = changeStatusProduct;
		vmPrA.removeDisabledSubmit = removeDisabledSubmit;
		vmPrA.removeImage = removeImage;
		vmPrA.addTagProccess = addTagProccess;
		vmPrA.checkSlug = checkSlug;
		vmPrA.cropImage = cropImage;
		vmPrA.selectThumb = selectThumb;
		vmPrA.checkImgOld = productSvc.checkImgOld;
		vmPrA.checkActiveOnsale = checkActiveOnsale;

		// Init
		getData();

		/*FUNCTION*/
		// Start: Create default data
		function getData() {
			productSvc.add().then(function (resp) {
				vmPrA.optionsCate = formatCategory(resp.categoryWithSub);
				vmPrA.relatedProduct = [];
				vmPrA.unitList = resp.unit;
				vmPrA.productList = resp.productList;
				vmPrA.categoryList = resp.categoryList;
				vmPrA.promotionList = resp.promotionList;
				vmPrA.certificateList = resp.certificateList;
				vmPrA.tags_proccess = resp.tags_proccess;

				vmPrA.active_tmp = '1';
				vmPrA.vat_tmp = '1';
				vmPrA.productTmp = {};
				angular.element('#datetime-picker').val('');
				vmPrA.productBalance = resp.productBalance ? resp.productBalance.value : 3;
				vmPrA.product = {
					active: true,
					slug: '',
					videos: [],
					status: 'HSV',
					images: [],
					relative_product: [],
					other_is: false,
					id_unit: null,
					qty_in_stock: 0
				};
				vmPrA.loading = false;
				vmPrA.imgDelete = [];

				// Sync category select2
				$timeout(function () {
					var ele = $('#mod-product-add .content .select2-search-choice');
					ele.find('.select2-search-choice-close').trigger('click');
				}, 10);
				getNameTag();
			}).catch(function (error) {
				console.log(error);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Có vấn đề! Hãy thử tải lại trang.'
					}
				});
			});
		}
		// End: Create default data


		function checkSlug(text) {
			vmPrA.product.slug = productSvc.changeToSlug(text);
		}

		function formatCategory(categories) {
			var options = [];
			var createSub = function (category, cates) {
				cates.push(category);
				if (category.sub_category && category.sub_category.length > 0) {
					category.sub_category.forEach(function (sub) {
						return createSub(sub, cates);
					})
				}
				return cates;
			}

			categories.forEach(function (category) {
				var array = createSub(category, []);
				category.sub_cate = array.splice(1);
				options.push(category);
			})
			return options;
		}

		// Set auto status product
		function changeStatusProduct() {
			if (vmPrA.product.qty_in_stock < vmPrA.productBalance) {
				vmPrA.product.status = 'SHH';
				return;
			}
			if (vmPrA.product.qty_in_stock >= vmPrA.productBalance) {
				vmPrA.product.status = 'CH';
				return;
			}
		}

		// Search name tag by ID
		function getNameTag() {
			vmPrA.units_name = vmPrA.unitList.find(function (item) {
				return vmPrA.product.id_unit === item._id
			});
		}

		// Remove related product
		function removeProductRelated(value) {
			var index = vmPrA.product.relative_product.indexOf(value._id);
			if (index > -1) {
				vmPrA.product.relative_product.splice(index, 1);

				// Start: Fix sync element not remove in select2
				$timeout(function () {
					var ele = $('#mod-product-add .content .select2-search-choice:contains("' + value.name + '")');
					ele.find('.select2-search-choice-close').trigger('click');
				}, 10);
				// End: Fix sync element not remove in select2
			}
		}

		// Upload image product
		function uploadImage(file) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg") {
					Upload.imageDimensions(file[0]).then(function (dimensions) {
						if (dimensions.width > 448 && dimensions.height > 448) {
							Upload.upload({
								url: $window.settings.services.uploadApi + '/upload/file',
								data: {
									file: file[0],
									type: 'product_image',
									prefix: 'product_image',
								}
							}).then(function (resp) {
								vmPrA.product.images.push({
									url: resp.data.filename
								});
								$scope.progressPercentage = false;
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công!',
										message: 'Upload ảnh thành công!'
									}
								});
							}, function (resp) {
								$scope.progressPercentage = false;
								$bzPopup.toastr({
									type: 'error',
									data: {
										title: 'Lỗi!',
										message: 'Upload ảnh Lỗi!'
									}
								});
							}, function (evt) {
								$scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
							});
						}
						else {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Hình ảnh phải có kích thước lớn hơn 448px x 448px!'
								}
							});
						}
					});
				}
				else {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Hình ảnh phải có định dạng png hoặc jpg!'
						}
					});
					return;
				}
			}
		}

		// Submit add product
		function addProduct(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin.'
					}
				});
				return;
			};
			vmPrA.product.active = vmPrA.active_tmp == '1' ? true : false;
			if (vmPrA.productTmp.due_date) {
				vmPrA.product.due_date = {
					start_date: vmPrA.productTmp.due_date.startDate,
					end_date: vmPrA.productTmp.due_date.endDate
				};
			}

			if (vmPrA.product.video) {
				vmPrA.product.video = productSvc.formatYoutube(vmPrA.product.video);
				vmPrA.product.videos.push({
					url: vmPrA.product.video
				});
				delete vmPrA.product.video;
			}

			if (vmPrA.productTmp.thumb) {
				vmPrA.product.thumb = vmPrA.productTmp.thumb;
			}

			productSvc.create({
				data: vmPrA.product, imageDelete: vmPrA.imgDelete
			}).then(function (resp) {
				$state.go("product");
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Thêm sản phẩm thành công!'
					}
				});
			}).catch(function (error) {
				form.$submitted = false;
				console.log(error);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Thêm sản phẩm thất bại. Hãy thử lại!'
					}
				});
			});
		}

		// Remove image
		function removeImage(key, url, nameFile) {
			vmPrA.product.images.splice(key, 1);
			vmPrA.imgDelete.push({
				url: url,
				fileName: fileName
			});
		}

		function removeDisabledSubmit(form) {
			if (form) form.$submitted = false;
		}

		function addTagProccess(tmp_tag_proccess) {
			if (tmp_tag_proccess) {
				vmPrA.product.tag_processing = tmp_tag_proccess.map(function (item) {
					return {
						id_tag: item
					};
				});
			}
		}

		function cropImage(key, image_product) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/cropper/view.html',
				controller: function ($scope, $uibModalInstance) {
					var popupScope = this;
					$scope.popupScope = {
						image: vmPrA.urlUploadImg + image_product.url,
						event: 'crop:image',
						ratio: 1,
						width: 500,
						height: 500,
						// mimeType : 'image/jpeg'
					};
					$scope.$on('crop:image', function (event, image) {
						productSvc.uploadBase64({ directory: 'product_image', image: image.image }).then(function (resp) {
							var old_image = image_product.url;
							vmPrA.imgDelete.push({
								url: vmPrA.urlUploadImg,
								fileName: image_product.url
							});
							vmPrA.product.images[key].url = resp.name;
							if (vmPrA.productTmp.thumb == old_image) {
								selectThumb(key);
							}
							$uibModalInstance.close();
						});
						// save image tại đây
					});
				}
			});
		}

		function selectThumb(key) {
			vmPrA.productTmp.thumb = vmPrA.product.images[key].url;
		}

		function checkActiveOnsale(onsale) {
			var text = onsale.name;
			if (!onsale.status)
				text += " (Unactive)";
			return text;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var orderReportCtrl = (function () {
	'use strict';

	angular
		.module('bzOrder')
		.controller('orderReportCtrl', orderReportCtrl);

	function orderReportCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, statusOrderList, orderSvc) {
		var vmOrR = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('order', 'export')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmOrR.loading = true;
		vmOrR.queryParams = $stateParams;
		vmOrR.statusOrderList = statusOrderList;

		// Methods
		vmOrR.getStatusOrder = getStatusOrder;
		vmOrR.filterForm = filterForm;
		vmOrR.clearFilter = clearFilter;
		vmOrR.exportExcel = exportExcel;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmOrR.queryParams.page = vmOrR.table.page();
			$state.go('.', $scope.vmOrR.queryParams);
		}, $scope, vmOrR.table);


		/*FUNCTION*/
		function getData() {
			/*Start: set datetime picker*/
			var dateTimePickerOpt = {
				singleDatePicker: false
			};

			if (vmOrR.queryParams.date) {
				var date = vmOrR.queryParams.date.split(' - ');
				angular.extend(dateTimePickerOpt, {
					startDate: date[0],
					endDate: date[1],
				});
				angular.element('#datetime-picker').val(vmOrR.queryParams.date);
			}
			vmOrR.dateTimePickerOpt = dateTimePickerOpt;
			/*End: set datetime picker*/

			bzResourceSvc.api($window.settings.services.admin + '/order')
				.get(vmOrR.queryParams, function (resp) {
					vmOrR.queryParams.pageCount = resp.totalPage;
					vmOrR.list = resp.items;
					vmOrR.params = resp.params;
					vmOrR.statusOrderList = statusOrderList;
					vmOrR.listCoupon = resp.listCoupon;
					vmOrR.filter = {};

					if (vmOrR.queryParams.min_order) {
						vmOrR.filter.min_order = vmOrR.queryParams.min_order ? parseInt(vmOrR.queryParams.min_order) : undefined;
					}

					if (vmOrR.queryParams.max_order) {
						vmOrR.filter.max_order = vmOrR.queryParams.max_order ? parseInt(vmOrR.queryParams.max_order) : undefined;
					}

					vmOrR.table = new NgTableParams({
						count: vmOrR.queryParams.limit
					}, {
							counts: [],
							getData: function (params) {
								params.total(resp.totalItems);
								return vmOrR.list;
							}
						});

					vmOrR.table.page(vmOrR.queryParams.page);
					vmOrR.loading = false;
				});
		}


		function getStatusOrder(item) {
			return vmOrR.statusOrderList.find(function (value) {
				return item.status == value.value;
			})
		}

		function filterForm(form) {
			vmOrR.queryParams.page = 1;

			if (vmOrR.filter.date) {
				vmOrR.queryParams.date = formatDate(vmOrR.filter.date.startDate) + ' - ' + formatDate(vmOrR.filter.date.endDate);
			}

			vmOrR.queryParams.min_order = vmOrR.filter.min_order;
			vmOrR.queryParams.max_order = vmOrR.filter.max_order;

			$state.go('.', vmOrR.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmOrR.queryParams.customer_name = null;
			vmOrR.queryParams.coupon = null;
			vmOrR.queryParams.date = null;
			vmOrR.queryParams.status = null;
			vmOrR.queryParams.type = null;
			vmOrR.queryParams.min_order = null;
			vmOrR.queryParams.max_order = null;
			$state.go('.', vmOrR.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatDate(date) {
			return date.format('DD/MM/YYYY');
		}

		// Export Excel
		function exportExcel(list_data) {
			var data = [[
				'Mã đơn hàng', 'Ngày đặt hàng', 'Tên khách hàng', 'SĐT', 'Quận', 'Địa chỉ',
				'Sản phẩm', 'Số lượng', 'Số lượng thực giao', 'Đơn giá', 'Giảm giá', 'Tổng tiền khách đặt',
				'Phí ship', 'Ngày Giao Hàng', 'Đợt giao hàng', 'Đơn vị giao hàng', 'Ghi chú đơn hàng', 'Trạng thái đơn hàng'
			]];

			var options = {
				type: 'xlsx',
				sheetName: 'SheetJS1',
				fileName: 'Order',
			};

			list_data.forEach(function (item) {
				item.order_detail.forEach(function (product) {
					var promotionTxt = '';
					if (product.id_promote && product.id_promote.id) {
						switch (product.id_promote.type) {
							case 'MN':
								promotionTxt += product.id_promote.value + ' Đ';
								break;
							case 'PC':
								promotionTxt += product.id_promote.value + ' %';
								break;
							default:
								promotionTxt += product.id_promote.value + ' %';
								break;
						}
					}

					data.push([
						item.id_order, moment(item.createdAt).format('D/M/YYYY'), item.payment_info.info.full_name, item.payment_info.info.phone, item.payment_info.info.district,
						item.payment_info.info.address, product.product.name, product.order_quantity, '', orderSvc.formatCurrency(product.price), promotionTxt,
						orderSvc.formatCurrency(product.total), orderSvc.formatCurrency(item.payment_info.info.shipping_fee),
						moment(item.ship_date).format('D/M/YYYY'), 'Đợt 1', item.shiper, item.note, getStatusOrder(item).name
					]);
				});
			});

			ExcelJs.exportExcel(data, options);
		}

	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var orderListCtrl = (function () {
	'use strict';

	angular
		.module('bzOrder')
		.controller('orderListCtrl', orderListCtrl);

	function orderListCtrl($scope, $rootScope, $state, $stateParams, $bzPopup, $uibModal, $window, NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, statusOrderList, orderSvc) {
		var vmOrL = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('order', 'view')))) {
			$state.go('error403');
		}
		vmOrL.showBtnAdd = authSvc.hasPermission('order', 'add');
		vmOrL.showBtnEdit = authSvc.hasPermission('order', ['add', 'edit']);
		vmOrL.showBtnDelete = authSvc.hasPermission('order', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmOrL.loading = true;
		vmOrL.queryParams = $stateParams;
		vmOrL.statusOrderList = statusOrderList;
		vmOrL.checkbox = [];

		// Methods
		vmOrL.detailOrderPop = detailOrderPop;
		vmOrL.getStatusOrder = getStatusOrder;
		vmOrL.deleteOrder = deleteOrder;
		vmOrL.filterForm = filterForm;
		vmOrL.clearFilter = clearFilter;
		vmOrL.exportExcel = exportExcel;
		vmOrL.selectAll = selectAll;
		vmOrL.exportPDF = exportPDF;

		// Init
		getData();

		setConfigsValue();
		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmOrL.queryParams.page = vmOrL.table.page();
			$state.go('.', $scope.vmOrL.queryParams);
		}, $scope, vmOrL.table);

		/*FUNCTION*/

		function selectAll() {
			vmOrL.list.forEach(function (item) {
				item.value_checkbox = vmOrL.checkbox.selectAll;
			});
		}

		function getData() {
			var image = new Image();
			var canvas = angular.element("#image")[0],
				canvasContext = canvas.getContext("2d");
			image.src = "/assets/admin/images/mhv.jpg";
			image.onload = function () {
				canvas.width = image.width;
				canvas.height = image.height;
				canvasContext.drawImage(image, 0, 0, image.width, image.height);
				vmOrL.dataURLImage = canvas.toDataURL();
			};

			/*Start: set datetime picker*/
			var dateTimePickerOpt = {
				singleDatePicker: false
			};

			if (vmOrL.queryParams.date) {
				var date = vmOrL.queryParams.date.split(' - ');
				angular.extend(dateTimePickerOpt, {
					startDate: date[0],
					endDate: date[1],
				});
				angular.element('#datetime-picker').val(vmOrL.queryParams.date);
			}

			vmOrL.dateTimePickerOpt = dateTimePickerOpt;
			/*End: set datetime picker*/

			orderSvc.getAll(vmOrL.queryParams).then(function (resp) {
				vmOrL.queryParams.pageCount = resp.totalPage;
				vmOrL.list = resp.items;
				vmOrL.params = resp.params;
				vmOrL.statusOrderList = statusOrderList;
				vmOrL.listCoupon = resp.listCoupon;
				vmOrL.coupon_order = resp.coupon_order;
				vmOrL.filter = {};
				vmOrL.checkbox = {
					selectAll: false,
				}

				vmOrL.list.forEach(function (item) {
					item.value_checkbox = false;
				})

				if (vmOrL.queryParams.min_order) {
					vmOrL.filter.min_order = vmOrL.queryParams.min_order ? parseInt(vmOrL.queryParams.min_order) : undefined;
				}

				if (vmOrL.queryParams.max_order) {
					vmOrL.filter.max_order = vmOrL.queryParams.max_order ? parseInt(vmOrL.queryParams.max_order) : undefined;
				}

				if (vmOrL.queryParams.coupon) {
					vmOrL.couponDetail = vmOrL.listCoupon.find(function (item) {
						return item._id == vmOrL.queryParams.coupon;
					})
				}

				vmOrL.table = new NgTableParams({
					count: vmOrL.queryParams.limit
				}, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmOrL.list;
						}
					});

				vmOrL.table.page(vmOrL.queryParams.page);
				vmOrL.loading = false;
			})
		}

		function detailOrderPop(order) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'modules/admin-order/view/client/popup-order/detail-order/view.html',
				controller: 'popupOrderCtrl',
				resolve: {
					order: function () {
						return angular.copy(order);
					},
					permission: function () {
						return angular.copy(vmOrL.showBtnEdit);
					}
				}
			});

			modalInstance.result.then(function (resp) {
				angular.extend(order, resp);
			}, function () {
			});
		}

		function getStatusOrder(item) {
			return vmOrL.statusOrderList.find(function (value) {
				return item.status == value.value;
			})
		}

		function deleteOrder(id) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa đơn hàng này?';

					$scope.ok = function () {
						orderSvc.delete(id).then(function (resp) {
							if (resp.success) {
								vmOrL.queryParams.page = 1;
								$state.go('.', vmOrL.queryParams).then(function () {
									$state.reload();
								});
								$uibModalInstance.close();

								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công!',
										message: 'Xóa đơn hàng thành công!'
									}
								});
							}
						}, function (resp) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa đơn hàng thất bại!'
								}
							});
						});
					}
				}
			});
		}

		function filterForm(form) {
			vmOrL.queryParams.page = 1;

			if (vmOrL.filter.date) {
				vmOrL.queryParams.date = formatDate(vmOrL.filter.date.startDate) + ' - ' + formatDate(vmOrL.filter.date.endDate);
			}
			vmOrL.queryParams.min_order = vmOrL.filter.min_order;
			vmOrL.queryParams.max_order = vmOrL.filter.max_order;

			$state.go('.', vmOrL.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmOrL.queryParams.customer_name = null;
			vmOrL.queryParams.coupon = null;
			vmOrL.queryParams.date = null;
			vmOrL.queryParams.status = null;
			vmOrL.queryParams.type = null;
			vmOrL.queryParams.type = null;
			vmOrL.queryParams.min_order = null;
			vmOrL.queryParams.max_order = null;
			$state.go('.', vmOrL.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatDate(date) {
			return date.format('DD/MM/YYYY');
		}

		// Export Excel
		function exportExcel(list_data) {
			var data = [[
				'Mã đơn hàng', 'Ngày đặt hàng', 'Tên khách hàng', 'SĐT', 'Quận', 'Địa chỉ',
				'Sản phẩm', 'Số lượng', 'Số lượng thực giao', 'Đơn giá', 'Giảm giá', 'Tổng tiền khách đặt',
				'Phí ship', 'Ngày Giao Hàng', 'Đợt giao hàng', 'Đơn vị giao hàng', 'Ghi chú đơn hàng', 'Trạng thái đơn hàng'
			]];

			var options = {
				type: 'xlsx',
				sheetName: 'SheetJS1',
				fileName: 'Order',
			};

			list_data.forEach(function (item) {
				item.order_detail.forEach(function (product) {
					var promotionTxt = '';
					if (product.promotion) {
						switch (product.promotion.type) {
							case 'MN':
								promotionTxt += product.promotion.value + ' Đ';
								break;
							case 'PC':
								promotionTxt += product.promotion.value + ' %';
								break;
							default:
								promotionTxt += product.promotion.value + ' %';
								break;
						}

					}

					data.push([
						item.id_order, moment(item.createdAt).format('D/M/YYYY'), item.payment_info.info.full_name, item.payment_info.info.phone, item.payment_info.info.district,
						item.payment_info.info.address, product.product.name, product.order_quantity, '', product.price, promotionTxt, product.total, item.shipping_fee ? item.shipping_fee.fee : '',
						moment(item.ship_date).format('D/M/YYYY'), 'Đợt 1', item.shiper, item.note, getStatusOrder(item).name
					]);
				});
			});

			ExcelJs.exportExcel(data, options);
		}


		function setConfigsValue() {
			bzResourceSvc.api($window.settings.services.admin + '/configs')
				.get({}, function (resp) {
					$rootScope.promotionForOrderDeleveryOnAffternoon = resp.OrderDeleveryOnAffernoon;
					$rootScope.promotionForFirstOrder = resp.FirstOrder;
					$rootScope.freeShipUrban = resp.FreeShipConfig.Urban;
					$rootScope.freeShipSuburb = resp.FreeShipConfig.Suburb;
				}), function (err) {
				};
		}

		// Export Excel
		function exportExcel(list_data) {
			vmOrL.btnExportExcel = true;
			var data = [[
				'Mã coupon', 'Tên coupon'
			],
			[
				vmOrL.couponDetail.code, vmOrL.couponDetail.name
			], [
				'STT', 'Order id', 'Name', 'SĐT', 'Email', 'Địa chỉ giao hàng', 'Thời gian order',
				'Phí vận chuyển', 'Tổng tiền order', 'Giá trị coupon', 'Trạng thái order'
			]];
			var options = {
				type: 'xlsx',
				sheetName: 'SheetJS1',
				fileName: 'Order',
			};
			var query = (JSON.parse(JSON.stringify(vmOrL.queryParams)));
			query.limit = vmOrL.totalItems;
			query.page = 1;

			orderSvc.getAll(query).then(function (resp) {
				resp.items.forEach(function (item, index) {
					var category_txt = '';

					data.push([
						index + 1, item.id_order, item.payment_info.info.full_name, item.payment_info.info.phone, item.payment_info.info.email,
						item.payment_info.info.address + '- ' + item.payment_info.info.district, item.createdAt, item.payment_info.info.shipping_fee + ' đ',
						item.total, item.coupon.value, getStatusOrder(item).name
					]);
				});
				ExcelJs.exportExcel(data, options);
				vmOrL.btnExportExcel = false;
			}).catch(function (error) {
				console.log(error);
				vmOrL.btnExportExcel = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Xuất Excel thất bại!'
					}
				});
			});
		}

		function exportPDF() {
			vmOrL.btnExportPDF = true;
			var contents = [];
			var styles = {
				textGreen: {
					color: '#00a65a',
					bold: true
				},
				textRed: {
					color: '#dd4b39'
				}
			};
			var defaultStyle = {};
			var count = 0;
			var export_pdf_list = [];
			try {
				vmOrL.list.forEach(function (item, index) {
					if (item.value_checkbox) {
						export_pdf_list.push(item);
						var content = [];
						var detail = {
							table: {
								widths: ['*', 'auto'],
								body: [
									[{
										text: 'Mã hóa đơn: #' + item.id_order
										+ '\nMã đơn hàng: #' + item.id_order
										+ '\nNgày giao hàng: ' + moment(item.createdAt).format('DD-MM-YYYY'),
										fillColor: '#737373',
										color: 'white',
										margin: [5, 5]
									}, {
										image: vmOrL.dataURLImage,
										width: 200,
										height: 45,
										fillColor: '#737373',
										margin: [5, 5]
									}],
								]
							},
							layout: 'noBorders',
						};
						if (count != 0) {
							detail.pageBreak = 'before';
						}
						content.push(detail);
						count++;

						var text_user_infor = '';
						if (item.payment_info.info.user_id) {
							text_user_infor += item.payment_info.info.user_id.name;
							text_user_infor += '\nSố điện thoại: ';
							text_user_infor += item.payment_info.info.user_id.phone ? item.payment_info.info.user_id.phone : '';
							text_user_infor += '\nEmail: ';
							text_user_infor += item.payment_info.info.user_id.email ? item.payment_info.info.user_id.email : '';
						}

						var vocative = item.payment_info.info.vocative || item.payment_info.info.vocative != "undefined" ? item.payment_info.info.vocative + ' ' : '';

						content.push({
							table: {
								widths: [248, 248],
								headerRows: 1,
								body: [
									[{
										text: 'Thông tin mua hàng',
										fillColor: '#edebeb',
									}, {
										text: 'Thông tin nhận hàng',
										fillColor: '#edebeb',
									}],
									[{
										text: text_user_infor,
										border: [true, false, false, true],
									}, {
										text: vocative + item.payment_info.info.full_name
										+ '\nSố điện thoại: ' + item.payment_info.info.phone
										+ '\nĐịa chỉ: ' + item.payment_info.info.address + ', ' + item.payment_info.info.district,
										border: [false, true, true, true],
									}]
								],
							}
						});

						content.push({
							text: '',
							margin: [0, 0, 0, 20],
						});

						content.push({
							table: {
								widths: [248, 248],
								headerRows: 1,
								body: [
									[{
										text: 'Phương thức thanh toán',
										fillColor: '#edebeb',
									}, {
										text: 'Phương thức vận chuyển',
										fillColor: '#edebeb',
									}],
									[{
										text: item.payment_method == "COD" ? 'Thanh toán khi giao hàng (COD)' : 'Chuyển khoản',
										border: [true, false, false, true],
									}, {

										text: [{
											text: item.payment_info.info.shipping_fee == 0 ? 'Miễn phí\n' : '',
										}, {
											text: '(Phí vận chuyển ' + orderSvc.formatCurrency(item.payment_info.info.shipping_fee) + ' ₫)',
										}],
										border: [false, true, true, true],
									}]
								],
							}
						});

						content.push({
							text: '',
							margin: [0, 0, 0, 20],
						});

						var order_detail_content = [
							[{
								text: 'Sản phẩm',
								fillColor: '#edebeb',
								border: [true, true, false, true],
							}, {
								text: 'TL/ĐVT',
								fillColor: '#edebeb',
								border: [false, true, false, true],
								alignment: 'right'
							}, {
								text: 'Số lượng',
								fillColor: '#edebeb',
								border: [false, true, false, true],
								alignment: 'right'
							},
							{
								text: 'Giá',
								fillColor: '#edebeb',
								border: [false, true, false, true],
								alignment: 'right'
							},
							{
								text: 'Tổng tiền',
								fillColor: '#edebeb',
								border: [false, true, true, true],
								alignment: 'right'
							}],
						];

						item.order_detail.forEach(function (item) {
							if (item.product) {
								var price = item.price;
								if (item.id_promote) {
									if (item.id_promote.type == 'PC') {
										price = price * (100 - item.id_promote.value) / 100
									}
									if (item.id_promote.type == 'MN') {
										price = price - item.id_promote.value;
									}
								}
								order_detail_content.push([
									{
										text: item.product.name,
										border: [false, false, false, false],
										margin: [0, 0, 0, 5]
									},
									{
										text: item.product.view_unit ? item.product.view_unit : '',
										border: [false, false, false, false],
										alignment: 'right',
										margin: [0, 0, 0, 5]
									},
									{
										text: item.order_quantity + '',
										border: [false, false, false, false],
										alignment: 'right',
										margin: [0, 0, 0, 5]
									},
									{
										text: orderSvc.formatCurrency(price) + ' ₫',
										border: [false, false, false, false],
										alignment: 'right',
										margin: [0, 0, 0, 5]
									},
									{
										text: orderSvc.formatCurrency(item.total) + ' ₫',
										border: [false, false, false, false],
										alignment: 'right',
										margin: [0, 0, 0, 5]
									}
								]);
							}
						});

						content.push({
							table: {
								widths: [206, 80, 60, 60, 63],
								headerRows: 1,
								body: order_detail_content,
							}
						});

						content.push({
							text: '',
							margin: [0, 0, 0, 40],
						});

						var detail_order = [];
						var is_free = item.payment_info.info.shipping_fee == 0 ? '(Miễn phí)' : '';
						var discount = item.coupon.value;

						var order_detail = [
							['', 'Tổng cộng: ', orderSvc.formatCurrency(item.total) + ' ₫'],
							['', {
								text: ['Khuyến mãi: ', { text: item.id_coupon ? '(' + item.coupon.name + '): ' : '', style: 'textGreen' }]
							}, {
									text: [
										{ text: item.coupon.value > 0 ? '-' + orderSvc.formatCurrency(item.coupon.value) : 0 }, ' ₫'
									]
								}
							],

							['', {
								text: [
									'Phí vận chuyển ',
									{ text: is_free, style: 'textRed' },
									':'
								]
							}, orderSvc.formatCurrency(item.payment_info.info.shipping_fee) + ' ₫']
						]

						if (item.delivery_time == 'CHIEU' && $rootScope.promotionForOrderDeleveryOnAffternoon.status) {
							var text_price = $rootScope.promotionForOrderDeleveryOnAffternoon.type == "PC" ?
								(($rootScope.promotionForOrderDeleveryOnAffternoon.value / 100) * item.total)
								: $rootScope.promotionForOrderDeleveryOnAffternoon.value;
							discount += text_price;

							order_detail.push(['', {
								text: [
									{
										text: $rootScope.promotionForOrderDeleveryOnAffternoon.description,
										style: 'textGreen'
									}, ': '
								],
							}, '-' + orderSvc.formatCurrency(text_price) + ' ₫']);
						}

						if (item.is_first_order) {
							var text_price = $rootScope.promotionForFirstOrder.type == "MN" ?
								$rootScope.promotionForFirstOrder.value
								: ($rootScope.promotionForFirstOrder.value / 100) * item.total;
							discount += text_price;
							order_detail.push(['', {
								text: [
									{
										text: $rootScope.promotionForFirstOrder.description,
										style: 'textGreen'
									}, ': '
								],
							}, '-' + orderSvc.formatCurrency(text_price) + ' ₫']);
						}

						if (item.shipping_fee) {
							if (item.shipping_fee.type == '1' && (item.total - discount) > $rootScope.freeShipUrban.value) {
								order_detail.push([{
									text: [
										{
											text: $rootScope.freeShipUrban.description,
											style: 'textGreen'
										}
									],
									colSpan: 3,
								}]);
							}

							if (item.shipping_fee.type == '2' && (item.total - discount) > $rootScope.freeShipSuburb.value) {
								order_detail.push([{
									text: [
										{
											text: $rootScope.freeShipSuburb.description,
											style: 'textGreen'
										}
									],
									colSpan: 3,
								}]);
							}
						}

						order_detail.push(['', 'Tổng tiền: ', orderSvc.formatCurrency(item.total_pay) + ' ₫',])

						content.push({
							table: {
								widths: [56, 340, 100],
								headerRows: 1,
								body: order_detail,
							},
							alignment: 'right',
							layout: 'noBorders'
						});

						content.push({
							text: item.note ? 'Ghi chú: ' + item.note : '',
						});

						contents.push(content);
					}
				});
				var document = {
					content: contents,
					styles: styles,
					defaultStyle: defaultStyle
				};

				// Select name file order
				if (count == 0) {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Chưa chọn hóa dơn!',
							message: 'Vui lòng chọn hóa đơn bạn muốn xuất!'
						}
					});
				}
				else {
					if (count == 1) {
						pdfMake.createPdf(document).download(export_pdf_list[0].id_order + '.pdf');
					}
					else {
						pdfMake.createPdf(document).download(moment(export_pdf_list[0].createdAt).format('DDMMYY') + '.pdf');
					}
				}

				vmOrL.btnExportPDF = false;
			} catch (error) {
				vmOrL.btnExportPDF = false;
				console.log(error);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Xuất PDF thất bại!'
					}
				});
			}

		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var orderEditCtrl = (function () {
	'use strict';

	angular
		.module('bzOrder')
		.controller('orderEditCtrl', orderEditCtrl);

	function orderEditCtrl($scope, $rootScope, $state, $stateParams, $bzPopup, $uibModal, $window, $timeout,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, orderSvc, userSvc, statusOrderList, shipperList, productSvc, listVocative) {
		var vmOrE = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('order', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmOrE.loading = true;
		vmOrE.queryParams = $stateParams;
		vmOrE.statusOrderList = statusOrderList;
		vmOrE.urlImg = settingJs.configs.uploadDirectory.thumb_product;
		vmOrE.shipperList = shipperList;
		vmOrE.freeShip = 'NOT'; // NOT: không được miễn phí, 'Urban': miễn phí nội thành, 'Suburb': miễn phí nội thành
		vmOrE.listVocative = listVocative;
		vmOrE.isFirstOder = false;
		vmOrE.customerSignIn = 'false'; //Khách hàng đã đăng ký hoặc chưa
		vmOrE.listIdCateOnsaleAffternoon = [];
		vmOrE.listCateException = [];
		// Methods
		vmOrE.getDataShippingFee = getDataShippingFee;
		vmOrE.getOrderDetail = getOrderDetail;
		vmOrE.checkCoupon = checkCoupon;
		vmOrE.setPaymentInfo = setPaymentInfo;
		vmOrE.getDataUser = getDataUser;
		vmOrE.editOrder = editOrder;
		vmOrE.setTotalProduct = setTotalProduct;
		vmOrE.enableForm = enableForm;
		vmOrE.checkImgOld = productSvc.checkImgOld;
		vmOrE.onChangeDeleveryType = onChangeDeleveryType;
		vmOrE.onChangeDeleveryType = onChangeDeleveryType;
		vmOrE.updateUserShippingAdress = updateUserShippingAdress;
		vmOrE.checkStatus = checkStatus;
		vmOrE.caculatingOnSaleAffternoon = caculatingOnSaleAffternoon;
		vmOrE.totalNotOnSale = totalNotOnSale;
		// Init
		setConfigsValue();
		getData();


		/*FUNCTION*/
		function getData() {
			orderSvc.edit(vmOrE.queryParams.id).then(function (resp) {
				vmOrE.listCoupon = resp.listCoupon;

				// Start: Format list coupon
				var tmp_arr = [];
				vmOrE.listCoupon.forEach(function (item) {
					if (item.type == "single") {
						tmp_arr.push(item);
					}
					if (item.type == "group") {
						var item_tmp = (JSON.parse(JSON.stringify(item)));
						item.code_group.forEach(function (item_group) {
							angular.extend(item_tmp, item_group);
							var item_group_tmp = (JSON.parse(JSON.stringify(item_tmp)))
							tmp_arr.push(item_group_tmp);
						})
					}
				})
				vmOrE.listCoupon = tmp_arr;
				// End: Format list coupon

				vmOrE.listProduct = resp.listProduct;
				vmOrE.listShippingFee = resp.listShippingFee;
				vmOrE.listUser = resp.listUser;
				vmOrE.order = resp.order;
				if (!vmOrE.order)
					$state.go('error404');
				vmOrE.loading = false;
				checkFirstOrder();
				vmOrE.disabledOrder = resp.order.status == 'CANCEL' ? true : false;

				vmOrE.shippingTmp = {
					fee: vmOrE.order.payment_info.info.shipping_fee ? vmOrE.order.payment_info.info.shipping_fee : 0
				};

				vmOrE.orderDetailTmp = vmOrE.listProduct.map(function (item) {
					var findProduct = vmOrE.order.order_detail.find(function (order) {
						if (!order.product) return null;
						return order.product._id == item._id;
					});
					var promotion = null;
					if (findProduct) {
						promotion = findProduct.id_promote;
					}
					else {
						promotion = item.promotion ? {
							id: item.promotion._id,
							name: item.promotion.name,
							value: item.promotion.value,
							type: item.promotion.type
						} : null;
					}
					var max_product = findProduct ? findProduct.order_quantity : 0;
					return {
						product_obj: item,
						product: item._id,
						order_quantity: findProduct ? findProduct.order_quantity : 1,
						price: findProduct ? findProduct.price : item.price,
						total: findProduct ? findProduct.total : 0,
						id_promote: promotion,
						max_product: max_product + item.qty_in_stock,
					};
				});

				vmOrE.orderTmp = {
					user: vmOrE.order.payment_info.info.user_id,
					shippingAddress: vmOrE.order.payment_info.info.id_shipping_address,
					coupon: vmOrE.listCoupon.find(function (item) {
						return vmOrE.order.id_coupon == item._id;
					}),
					orderDetailProduct: vmOrE.order.order_detail.map(function (item) {
						if (!item.product) return null;
						return item.product._id;
					}),
					status: resp.order.status
				};

				vmOrE.dateTimePickerOpt = {
					defaultDate: moment(vmOrE.order.ship_date).format('DD/MM/YYYY')
				};

				getDataUser();
				if (vmOrE.order.payment_info.info.user_id && vmOrE.userTmp) {
					vmOrE.customerSignIn = 'true'; //Khách hàng đã đăng ký
				}
			}).catch(function (err) {
				console.log('error', err);
			});
		}

		function checkFirstOrder() {
			if (vmOrE.order.payment_info.info.user_id) {
				bzResourceSvc.api($window.settings.services.admin + '/order/' + vmOrE.order.payment_info.info.user_id + '-' + vmOrE.order._id)
					.get({}, function (resp) {
						if (vmOrE.order.old_id == null) // rule chỉ dành cho order site mới
							vmOrE.isFirstOder = resp.success;
					}), function (err) {
						console.log('checkFirstOrder', err);
					};
			}
		}

		// Get data from select User
		function getDataUser(value) {
			var user = vmOrE.orderTmp.user;
			vmOrE.userTmp = vmOrE.listUser.find(function (item) {
				return item._id == user;
			});

			if (vmOrE.userTmp) {
				vmOrE.order.payment_info.info.user_id = vmOrE.userTmp._id;
				vmOrE.order.payment_info.info.email = vmOrE.userTmp.email;
				if (vmOrE.order.payment_info.info.vocative == "" || !vmOrE.order.payment_info.info.vocative)
					vmOrE.order.payment_info.info.vocative = vmOrE.userTmp.vocative;
			}

			// When select from view, refresh select address
			if (value) {
				vmOrE.order.payment_info.info.district = null;
				vmOrE.orderTmp.shippingAddress = null;
			}
			getDataShippingFee();
		}

		// Get data from select coupon
		function checkCoupon(showNoti) {
			if (showNoti == undefined) showNoti = false;
			if (vmOrE.order.id_coupon) {
				let couponTmp = {};
				vmOrE.listCoupon.forEach(function (item) {
					if (vmOrE.order.id_coupon == item._id) {
						couponTmp = item;
					}
				});

				orderSvc.checkCoupon(vmOrE.order, couponTmp.code).then(function (resp) {
					if (resp.success) {
						vmOrE.order.id_coupon = couponTmp._id;
						vmOrE.order.coupon.value = resp.money_coupon;
						vmOrE.order.coupon.code = couponTmp.code;
						vmOrE.order.coupon.name = couponTmp.name;
						if (showNoti)
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công',
									message: 'Đơn hàng đang được giảm ' + vmOrE.order.coupon.value + ' đ'
								}
							});
					}
					else {
						vmOrE.order.id_coupon = null;
						vmOrE.order.coupon.value = 0;
						vmOrE.order.coupon.code = "";
						vmOrE.order.coupon.name = "";

						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Mã giảm giá',
								message: resp.err.message
							}
						});
					}
				}).catch(function (err) {
					console.error(resp);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Mã giảm giá',
							message: resp.err.message
						}
					});
				})
			}
			else {
				vmOrE.order.id_coupon = null;
				vmOrE.order.coupon.value = 0;
				vmOrE.order.coupon.code = "";
				vmOrE.order.coupon.name = "";
			}
		}

		// Set payment info from radio button
		function setPaymentInfo() {
			if (vmOrE.userTmp) {// order của khách hàng đã đăng ký
				var shippingAddressID = vmOrE.order.payment_info.info.id_shipping_address;
				var shippingFeeTmp = vmOrE.userTmp.customer.shipping_address.find(function (item) {
					return shippingAddressID == item._id;
				});
				// console.log(111, shippingFeeTmp)
				if (shippingFeeTmp) {
					vmOrE.order.shipping_fee = shippingFeeTmp.id_shipping_fee || null;

					angular.extend(vmOrE.order.payment_info.info, {
						id_shipping_address: shippingFeeTmp._id,
						full_name: shippingFeeTmp.name,
						phone: shippingFeeTmp.phone,
						address: shippingFeeTmp.address_detail,
						district: shippingFeeTmp.id_shipping_fee.district,
						shipping_fee: shippingFeeTmp.id_shipping_fee.fee
					});
					vmOrE.order.id_shipping_fee = shippingFeeTmp.id_shipping_fee._id;

				}
			}
			// JS fix select does not update view
			$(".fix-select-2-district").each(function () {
				var content = $(this);
				angular.element(document).injector().invoke(function ($compile) {
					var scope = angular.element(content).scope();
					$compile(content)(scope);
				});
			});

			getDataShippingFee();

		}

		// Get data from select district
		function getDataShippingFee() {
			// var id_shipping = vmOrE.order.id_shipping_fee;
			vmOrE.shippingTmp = vmOrE.listShippingFee.find(function (item) {
				return item._id == vmOrE.order.id_shipping_fee;
			});

			if (typeof vmOrE.shippingTmp == 'undefined')
				vmOrE.shippingTmp = {
					fee: vmOrE.order.payment_info.info.shipping_fee ? vmOrE.order.payment_info.info.shipping_fee : 0
				};


			//fix: update new district
			vmOrE.order.payment_info.info.shipping_fee = vmOrE.shippingTmp.fee;
			vmOrE.order.payment_info.info.district = vmOrE.shippingTmp.district;

			//khi chỉnh sửa địa loại giao hàng => cập nhật lại phí ship. 
			if (vmOrE.order.id_shipping_fee != vmOrE.shippingTmp._id)
				vmOrE.order.payment_info.info.shipping_fee = vmOrE.shippingTmp.fee;

			vmOrE.order.id_shipping_fee = vmOrE.shippingTmp ? vmOrE.shippingTmp._id : null;

			// Kiểm tra miễn phí vận chuyển nội ngoại thành
			var totalTemp = ((vmOrE.totalNotOnSale())
				- vmOrE.order.coupon.value
				- ((vmOrE.order.delivery_time == 'CHIEU' && vmOrE.order.old_id == null)
					? ($rootScope.promotionForOrderDeleveryOnAffternoon.type == "PC"
						? (($rootScope.promotionForOrderDeleveryOnAffternoon.value / 100) * vmOrE.caculatingOnSaleAffternoon())
						: $rootScope.promotionForOrderDeleveryOnAffternoon.value) : 0)
				- (vmOrE.isFirstOder ? ($rootScope.promotionForFirstOrder.type == "MN"
					? $rootScope.promotionForFirstOrder.value
					: (($rootScope.promotionForFirstOrder.value / 100) * vmOrE.totalNotOnSale()))
					: 0));

			vmOrE.freeShip = 'NOT'; // reset
			if (vmOrE.order.delivery_type == 'CN' && (vmOrE.order.old_id == null)) { // dành cho giao hàng cá nhân và rule chỉ dành cho order mới
				if (vmOrE.shippingTmp.type == '1' && totalTemp > $rootScope.freeShipUrban.value) {
					vmOrE.freeShip = 'Urban';
					vmOrE.order.payment_info.info.shipping_fee = 0;
				}
				if (vmOrE.shippingTmp.type == '2' && totalTemp > $rootScope.freeShipSuburb.value) {
					vmOrE.order.payment_info.info.shipping_fee = 0;
					vmOrE.freeShip = 'Suburb';
				}
			}

		}

		// Create order detail from select list product
		function getOrderDetail() {
			// Trường hợp thêm mới thì set quantity default là 1;
			// if (vmOrE.orderTmp.orderDetailProduct.length > vmOrE.order.order_detail.length) {
			// 	var newPrd = vmOrE.orderDetailTmp.find(function (order) {
			// 		return order.product === vmOrE.orderTmp.orderDetailProduct[vmOrE.orderTmp.orderDetailProduct.length - 1];
			// 	});
			// 	vmOrE.order.order_detail.push({
			// 		id_promote: newPrd.id_promote,
			// 		order_quantity: 1,
			// 		price: newPrd.price,
			// 		product: newPrd.product,
			// 		product_obj: newPrd.product_obj,
			// 		total: calculateProduct(newPrd.price, newPrd.id_promote, 1)
			// 	});
			// 	setTotalProduct();
			// 	console.log(222, vmOrE.order.order_detail)
			// }
			// else
			{
				vmOrE.order.order_detail = [];
				if (vmOrE.orderTmp.orderDetailProduct) {
					vmOrE.order.order_detail = vmOrE.orderTmp.orderDetailProduct.map(function (product) {
						var findProduct = vmOrE.orderDetailTmp.find(function (order) {
							return order.product === product;
						});
						return findProduct;
					});
				}
			}
		}

		// Calculate from input order quantity
		function setTotalProduct(item) {

			vmOrE.order.total = vmOrE.order.order_detail.reduce(function (sum, item) {
				if (item.id_promote) item.total = calculateProduct(item.price, item.id_promote, item.order_quantity);
				else item.total = calculateProduct(item.price, 0, item.order_quantity);
				var total = isNaN(item.total) ? 0 : item.total;
				return sum + total;
			}, 0);
			checkCoupon();
		}

		// Calculate price product
		function calculateProduct(price, promotion, quantity) {
			if (promotion) {
				if (promotion.type == 'PC') {
					return (price * (100 - promotion.value) / 100) * quantity;
				}
				if (promotion.type == 'MN') {
					return (price - promotion.value) * quantity;
				}
			}
			else
				return price * quantity;
		}

		// Submit form add order
		function editOrder(form) {
			vmOrE.submitted = true;
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Cập nhật đơn hàng',
						message: 'Dữ liệu chưa hợp lệ'
					}
				});
				return;
			}
			vmOrE.order.total_pay = (vmOrE.totalNotOnSale() + (vmOrE.order.payment_info.info.shipping_fee))
				- vmOrE.order.coupon.value
				- ((vmOrE.order.delivery_time == 'CHIEU') ?
					($rootScope.promotionForOrderDeleveryOnAffternoon.type == "PC" ?
						(($rootScope.promotionForOrderDeleveryOnAffternoon.value / 100) * vmOrE.caculatingOnSaleAffternoon())
						: $rootScope.promotionForOrderDeleveryOnAffternoon.value)
					: 0)
				- (vmOrE.isFirstOder ?
					($rootScope.promotionForFirstOrder.type == "MN" ?
						$rootScope.promotionForFirstOrder.value
						: (($rootScope.promotionForFirstOrder.value / 100) * vmOrE.totalNotOnSale())) : 0);

			if (vmOrE.order.id_coupon != "" && vmOrE.order.id_coupon) {
				let couponTmp = {};
				vmOrE.listCoupon.forEach(function (item) {
					if (vmOrE.order.id_coupon == item._id) {
						couponTmp = item;
					}
				});
				orderSvc.checkCoupon(vmOrE.order, couponTmp.code).then(function (resp) {
					if (resp.success) {
						update();
					}
					else {
						vmOrE.order.id_coupon = null;
						vmOrE.order.coupon.value = 0;
						vmOrE.order.coupon.code = "";
						vmOrE.order.coupon.name = "";
						// console.log(2222, resp)
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Mã giảm giá',
								message: resp.err.message
							}
						});
					}
				}).catch(function (err) {
					console.log(111, err);
				})
			}
			else {
				update();
			}
		}


		// send data update to sever
		function update() {
			orderSvc.update({
				order: vmOrE.order,
				coupon: vmOrE.orderTmp.coupon
			}, vmOrE.order._id).then(function (resp) {
				vmOrE.submitted = false;
				if (resp.success) {
					$bzPopup.toastr({
						type: 'success',
						data: {
							title: 'Thành công!',
							message: 'Cập nhật đơn hàng thành công!'
						}
					});
					$state.go('order-list');
				}
				else {
					vmOrE.submitted = false;
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: resp.message
						}
					});
				}
			}, function (err) {
				console.log(err);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: err.message
					}
				});
				vmOrE.submitted = false;
			});
		}

		// Enable submit button
		function enableForm(form) {
			if (form) {
				vmOrE.submitted = false;
			}
		}

		function onChangeDeleveryType() {
			if (vmOrE.order.delivery_type == 'CT') {//Công ty
				vmOrE.order.payment_info.info.shipping_fee = 0;
			} else {
				getDataShippingFee();
			}
		}

		function updateUserShippingAdress(form) {
			if (vmOrE.order.payment_info.info.user_id && form.$valid) {
				var infoOrder = vmOrE.order.payment_info.info;
				var newInfo = {
					id_shipping_fee: vmOrE.order.id_shipping_fee,
					name: infoOrder.full_name,
					phone: infoOrder.phone,
					vocative: infoOrder.vocative,
					address_detail: infoOrder.address,
				}

				//get user
				bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
					.get({ id: vmOrE.order.payment_info.info.user_id }, function (resp) {
						var user = resp;

						delete user.__v;
						delete user.password_token;
						delete user.created;
						delete user.provider;
						delete user.activeToken;

						user.cfpassword = user.password;
						if (!user.dob)
							user.dob = '';

						user.customer.shipping_address.forEach(function (info, index) {
							if (info._id == vmOrE.order.payment_info.info.id_shipping_address) {
								//check data if has modify
								var old = user.customer.shipping_address[index];
								angular.extend(user.customer.shipping_address[index], newInfo);
								if (angular.equals(user.customer.shipping_address[index], old)) {
									userSvc.update(user, user._id).then(function (resp) {
										vmOrE.userTmp.customer.shipping_address.forEach(function (item, i) {
											if (infoOrder.id_shipping_address == item._id) {
												angular.extend(vmOrE.userTmp.customer.shipping_address[i], newInfo);
											}
										});
									}).catch(function (err) {
										$bzPopup.toastr({
											type: 'error',
											data: {
												title: 'Cập nhật địa chỉ giao hàng!',
												message: resp.data.message
											}
										});
									});
								}
							}
						})
					}, function (err) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Cập nhật địa chỉ giao hàng!',
								message: 'Không thể thấy tài khoản'
							}
						});
					});

			}
		}

		function setConfigsValue() {
			bzResourceSvc.api($window.settings.services.admin + '/configs')
				.get({}, function (resp) {
					$rootScope.promotionForOrderDeleveryOnAffternoon = resp.OrderDeleveryOnAffernoon;
					vmOrE.listIdCateOnsaleAffternoon = $rootScope.promotionForOrderDeleveryOnAffternoon.listCateApply;
					vmOrE.listCateException = $rootScope.promotionForOrderDeleveryOnAffternoon.listCateException;

					$rootScope.promotionForFirstOrder = resp.FirstOrder;
					$rootScope.freeShipUrban = resp.FreeShipConfig.Urban;
					$rootScope.freeShipSuburb = resp.FreeShipConfig.Suburb;
				}), function (err) {
				};
		}

		// Util Intersection two array
		function intersection(a, b) {
			var t;
			if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter
			return a.filter(function (e) {
				return b.indexOf(e) > -1;
			});
		}

		function caculatingOnSaleAffternoon() {
			var total_tmp = 0; // tổng các sản phầm thuộc category được áp dụng
			vmOrE.order.order_detail.forEach(function (item, index) {
				var catesProd = null;
				if (typeof item.product === 'object') {
					catesProd = item.product.category.map(function (cat) {
						return ('' + cat);
					});
				}
				if (typeof item.product_obj === 'object') {
					catesProd = item.product_obj.category.map(function (cat) {
						return ('' + cat);
					});
				}
				if (catesProd && intersection(catesProd, vmOrE.listIdCateOnsaleAffternoon).length > 0
								&& 
							((typeof item.id_promote === 'object' && item.id_promote && item.id_promote.id == null) 
									||
							(typeof item.product_obj === 'object' && item.product_obj.id_promotion == null))
								&&
						intersection(catesProd, vmOrE.listCateException).length == 0) {

					total_tmp += item.total
				}
			});
			return total_tmp;
		};

		function totalNotOnSale() {
			let total_no_onsale = 0;
			vmOrE.order.order_detail.forEach(function (item, index) {
				if (item.id_promote && item.id_promote.id == null) {
					total_no_onsale += item.total;
				}
			});
			return total_no_onsale;
		}

		function checkStatus() {
			if (vmOrE.orderTmp.status == 'CANCEL') {
				var modalInstance = $uibModal.open({
					animation: true,
					templateUrl: 'assets/global/message/view.html',
					controller: function ($scope, $uibModalInstance) {
						$scope.popTitle = 'Hủy';
						$scope.message = 'Bạn muốn hủy đơn hàng này?';

						$scope.ok = function () {
							vmOrE.order.status = vmOrE.orderTmp.status;
							update();
							$uibModalInstance.close();
						}
					}
				});

				modalInstance.result.then(function (resp) {
				}, function () {
					vmOrE.orderTmp.status = vmOrE.order.status;
				});
			}
			else {
				vmOrE.order.status = vmOrE.orderTmp.status;
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var orderAddCtrl = (function () {
	'use strict';

	angular
		.module('bzOrder')
		.controller('orderAddCtrl', orderAddCtrl);

	function orderAddCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, $timeout,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, orderSvc, statusOrderList, shipperList, productSvc, listVocative) {
		var vmOrA = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('order', 'add')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmOrA.loading = true;
		vmOrA.queryParams = $stateParams;
		vmOrA.statusOrderList = statusOrderList;
		vmOrA.shipperList = shipperList;
		vmOrA.urlImg = settingJs.configs.uploadDirectory.thumb_product;
		vmOrA.dateTimePickerOpt = {
		};

		vmOrA.customerSignIn = 'true'; //Khách hàng đã đăng ký hoặc chưa
		vmOrA.listVocative = listVocative;
		// Methods
		vmOrA.getDataShippingFee = getDataShippingFee;
		vmOrA.getOrderDetail = getOrderDetail;
		vmOrA.getCoupon = getCoupon;
		vmOrA.setPaymentInfo = setPaymentInfo;
		vmOrA.setDataUser = setDataUser;
		vmOrA.addOrder = addOrder;
		vmOrA.setTotalProduct = setTotalProduct;
		vmOrA.enableForm = enableForm;
		vmOrA.checkImgOld = productSvc.checkImgOld;
		// Init
		getData();
		getCoupon();

		/*FUNCTION*/
		function getData() {
			orderSvc.add().then(function (resp) {
				vmOrA.listCoupon = resp.listCoupon;

				// Start: Format list coupon
				var tmp_arr = [];
				vmOrA.listCoupon.forEach(function (item) {
					if (item.type == "single") {
						tmp_arr.push(item);
					}
					if (item.type == "group") {
						var item_tmp = (JSON.parse(JSON.stringify(item)));
						item.code_group.forEach(function (item_group) {
							angular.extend(item_tmp, item_group);
							var item_group_tmp = (JSON.parse(JSON.stringify(item_tmp)))
							tmp_arr.push(item_group_tmp);
						})
					}
				})
				vmOrA.listCoupon = tmp_arr;
				// End: Format list coupon

				vmOrA.listProduct = resp.listProduct;
				vmOrA.listShippingFee = resp.listShippingFee;
				vmOrA.listUser = resp.listUser;
				vmOrA.configNT = resp.configNT;
				vmOrA.configNGT = resp.configNGT;
				vmOrA.configBC = resp.configBC;
				vmOrA.configDT = resp.configDT;
				vmOrA.orderAddTmp = {};
				vmOrA.shippingTmp = { fee: 0 };
				vmOrA.isFirstOder = false;

				vmOrA.orderDetailTmp = vmOrA.listProduct.map(function (item) {
					return {
						product_obj: item,
						product: item._id,
						order_quantity: 0,
						price: item.price,
						total: 0,
						id_promote: item.promotion ? {
							id: item.promotion._id,
							name: item.promotion.name,
							value: item.promotion.value,
							type: item.promotion.type
						} : null
					};
				});

				// Create default data
				vmOrA.orderAdd = {
					delivery_type: 'CN',
					delivery_time: 'SANG',
					payment_method: 'COD',
					type: 'BT',
					payment_info: {
						info: {
							shipping_fee: 0
						}
					},
					order_detail: [],
					total: 0,
					status: vmOrA.statusOrderList[0].value,
					id_coupon: null,
					shiper: vmOrA.shipperList[0].value,
					coupon: {
						value: 0,
						code: "",
						name: ""
					}
				};

				vmOrA.loading = false;
			});
		}

		// Get data from select coupon
		function getCoupon(showNoti) {
			if (showNoti == undefined) showNoti = false;
			if (vmOrA.orderAdd && vmOrA.orderAdd.id_coupon != "") {
				let couponTmp = {};
				vmOrA.listCoupon.forEach(function (item) {
					if (vmOrA.orderAdd.id_coupon == item._id) {
						couponTmp = item;
					}
				});
				orderSvc.checkCoupon(vmOrA.orderAdd, couponTmp.code).then(function (resp) {
					if (resp.success) {
						vmOrA.orderAdd.id_coupon = couponTmp._id;
						vmOrA.orderAdd.coupon.value = resp.money_coupon;
						vmOrA.orderAdd.coupon.code = couponTmp.code;
						vmOrA.orderAdd.coupon.name = couponTmp.name;
						if (showNoti)
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công',
									message: 'Đơn hàng đang được giảm ' + vmOrA.orderAdd.coupon.value + ' đ'
								}
							});
					}
					else {
						vmOrA.orderAdd.id_coupon = null;
						vmOrA.orderAdd.coupon.value = 0;
						vmOrA.orderAdd.coupon.code = "";
						vmOrA.orderAdd.coupon.name = "";

						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Mã giảm giá',
								message: resp.err.message
							}
						});
					}
				}).catch(function (err) {
					console.log(111, err)
				})
			}
			if (vmOrA.orderAdd) {
				vmOrA.orderAddTmp.coupon = vmOrA.listCoupon.find(function (item) {
					return vmOrA.orderAdd.id_coupon == item._id;
				});
				vmOrA.orderAdd.coupon = null;
				if (vmOrA.orderAddTmp.coupon) {
					vmOrA.orderAdd.coupon = {
						code: vmOrA.orderAddTmp.coupon.code,
						name: vmOrA.orderAddTmp.coupon.name,
						value: vmOrA.orderAddTmp.coupon.sale.is_money ? vmOrA.orderAddTmp.coupon.sale.money_value : vmOrA.orderAddTmp.coupon.sale.percent_value,
						type: vmOrA.orderAddTmp.coupon.sale.is_money ? 'MN' : 'PC'
					}
				}
			}
		}

		// Create order detail from select list product
		function getOrderDetail() {
			vmOrA.orderAdd.order_detail = [];
			if (vmOrA.orderAddTmp.orderDetailProduct) {
				vmOrA.orderAdd.order_detail = vmOrA.orderAddTmp.orderDetailProduct.map(function (product) {
					var findProduct = vmOrA.orderDetailTmp.find(function (order) {
						return order.product === product;
					});
					return findProduct;
				});
			}
		}

		// Set payment info from radio button
		function setPaymentInfo() {
			var shippingAddressID = vmOrA.orderAddTmp.shippingAddress;
			var shippingAddress = vmOrA.orderAddTmp.user.customer.shipping_address.find(function (item) {
				return shippingAddressID == item._id;
			});

			angular.extend(vmOrA.orderAdd.payment_info.info, {
				id_shipping_address: shippingAddress._id,
				full_name: shippingAddress.name,
				phone: shippingAddress.phone,
				address: shippingAddress.address_detail,
				district: shippingAddress.id_shipping_fee.district,
				shipping_fee: shippingAddress.id_shipping_fee.fee
			});
			getDataShippingFee();
		}

		// Get data from select district
		function getDataShippingFee() {
			var district = vmOrA.orderAdd.payment_info.info.district;

			vmOrA.shippingTmp = vmOrA.listShippingFee.find(function (item) {
				return item.district == district;
			})

			vmOrA.orderAdd.id_shipping_fee = vmOrA.shippingTmp ? vmOrA.shippingTmp._id : null;
		}

		// Get data from select user
		function setDataUser(value) {
			var user = vmOrA.orderAddTmp.user;
			orderSvc.isFirstOrder(user._id).then(function (resp) {
				vmOrA.isFirstOder = resp.isFirstOrder;
			})
			vmOrA.orderAdd.payment_info.info = {
				user_id: user._id,
				email: user.email,
				vocative: user.vocative,
				shipping_fee: 0
			};

			// When select from view, refresh select address
			if (value) {
				vmOrA.orderAdd.payment_info.info.district = null;
				vmOrA.orderAddTmp.shippingAddress = null;
				getDataShippingFee();
			}
		}

		// Calculate from input order quantity
		function setTotalProduct() {
			vmOrA.orderAdd.total = vmOrA.orderAdd.order_detail.reduce(function (sum, item) {
				item.total = calculateProduct(item.price, item.id_promote) * item.order_quantity;
				var total = isNaN(item.total) ? 0 : item.total;
				return sum + total;
			}, 0);

			vmOrA.orderAdd.total_pay = (vmOrA.orderAdd.total + vmOrA.orderAdd.payment_info.info.shipping_fee)
				- vmOrA.orderAdd.coupon.value
				- ((vmOrA.orderAdd.delivery_time == 'CHIEU') ?
					(vmOrA.configBC.type == "PC" ?
						((vmOrA.configBC.value / 100) * vmOrA.orderAdd.total)
						: vmOrA.configBC.value)
					: 0)
				- (vmOrA.isFirstOder ?
					(vmOrA.configDT.type == "MN" ?
						vmOrA.configDT.value
						: ((vmOrA.configDT.value / 100) * vmOrA.orderAdd.total)) : 0);
		}

		// Calculate price product
		function calculateProduct(price, promotion) {
			if (promotion) {
				if (promotion.type == 'PC') {
					return price * (100 - promotion.value) / 100;
				}
				if (promotion.type == 'MN') {
					return price - promotion.value;
				}
			}
			return price;
		}

		// Submit form add order
		function addOrder(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Thông tin đơn hàng chưa hợp lệ',
						message: 'Hãy thử lại'
					}
				});
				return;
			}
			if (!vmOrA.orderAddTmp.shippingAddress) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Thông tin địa chỉ giao hàng chưa hợp lệ',
						message: 'Hãy thử lại'
					}
				});
				return;
			}

			orderSvc.create({
				data: vmOrA.orderAdd,
				coupon: vmOrA.orderAddTmp.coupon
			}).then(function (resp) {
				if (resp.success) {
					form.$submitted = false;
					console.log(resp);
					$bzPopup.toastr({
						type: 'success',
						data: {
							title: 'Thành công!',
							message: 'Order thành công!'
						}
					});
					$state.go('order-list');
				}
				else {
					form.$submitted = false;
					console.log(resp);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Order thất bại!'
						}
					});
				}
			}, function (err) {
				console.log(err);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Order thất bại!'
					}
				});
				form.$submitted = false;
			});
		}

		// Enable submit button
		function enableForm(form) {
			if (form) {
				form.$submitted = false;
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var auditLogCtrl = (function () {
	'use strict';

	angular
		.module('bzAuditLog')
		.controller('auditLogCtrl', auditLogCtrl);

	function auditLogCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, $filter,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, listResource, auditLogSvc) {
		var vmLog = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('log', ['view'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmLog.loading = true;
		vmLog.queryParams = $stateParams;
		vmLog.showPopupDetailLog = showPopupDetailLog;
		vmLog.filter = {
			action: vmLog.queryParams.action ? vmLog.queryParams.action : null,
			actor: vmLog.queryParams.actor ? vmLog.queryParams.actor : null,
			label: vmLog.queryParams.label ? vmLog.queryParams.label : null,

		};

		vmLog.listResource = listResource;
		// Methods
		vmLog.filterForm = filterForm;
		vmLog.clearFilter = clearFilter;
		vmLog.getUsers = getUsers;
		// Init

		getUsers();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmLog.queryParams.page = vmLog.table.page();
			$state.go('.', $scope.vmLog.queryParams);
		}, $scope, vmLog.table);

		/*FUNCTION*/

		function getUsers() {
			auditLogSvc.getUsers({}).then(function (data) {
				vmLog.listUsers = data.data;
				vmLog.listUsers.unshift({
					name: 'Guest',
					_id: 'guest'
				})
				getData();
			}).catch(function (err) {
				console.log(err);
			})
		}

		function showPopupDetailLog(log) {
			vmLog.detail = log;
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'modules/admin-log/view/client/popup/detail-log/view.html',
				controller: 'popupLogCtrl',
				resolve: {
					detailLog: function () {
						return angular.copy(log);
					},
				}
			});
		}

		function getData() {
			/*Start: set datetime picker*/
			var dateTimePickerOpt = {
				singleDatePicker: false
			};

			if (vmLog.queryParams.date) {
				var date = vmLog.queryParams.date.split(' - ');
				angular.extend(dateTimePickerOpt, {
					startDate: date[0],
					endDate: date[1],
				});
				angular.element('#datetime-picker').val(vmLog.queryParams.date);
			}
			vmLog.dateTimePickerOpt = dateTimePickerOpt;
			/*End: set datetime picker*/

			auditLogSvc.getLog(vmLog.queryParams).then(function (resp) {
				vmLog.queryParams.pageCount = resp.totalPage;
				vmLog.list = resp.items;

				vmLog.table = new NgTableParams({
					count: vmLog.queryParams.limit
				}, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmLog.list;
						}
					});

				vmLog.table.page(vmLog.queryParams.page);
				vmLog.loading = false;
			})
		}

		function filterForm(form) {
			vmLog.queryParams.page = 1;
			if (vmLog.filter.date) {
				vmLog.queryParams.date = formatMomentDate(vmLog.filter.date.startDate) + ' - ' + formatMomentDate(vmLog.filter.date.endDate);
			}
			if (vmLog.filter.action != undefined) {
				vmLog.queryParams.action = vmLog.filter.action;
			}
			if (vmLog.filter.actor != undefined) {
				vmLog.queryParams.actor = vmLog.filter.actor;
			}

			if (vmLog.filter.label) {
				vmLog.queryParams.label = vmLog.filter.label;
			}
			$state.go('.', vmLog.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmLog.queryParams.action = "";
			vmLog.queryParams.label = "";
			vmLog.queryParams.date = null;
			vmLog.queryParams.actor = null;

			$state.go('.', vmLog.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatMomentDate(date) {
			return date.format('DD/MM/YYYY');
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var importProductListCtrl = (function () {
	'use strict';

	angular
		.module('bzImportProduct')
		.controller('importProductListCtrl', importProductListCtrl);

	function importProductListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, $filter,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, importProductSvc) {
		var vmIPr = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('import_product', 'view')))) {
			$state.go('error403');
		}

		vmIPr.showBtnAdd = authSvc.hasPermission('import_product', 'add');
		vmIPr.showBtnDelete = authSvc.hasPermission('import_product', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmIPr.loading = true;
		vmIPr.queryParams = $stateParams;

		// Methods
		vmIPr.filterForm = filterForm;
		vmIPr.clearFilter = clearFilter;
		vmIPr.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmIPr.queryParams.page = vmIPr.table.page();
			$state.go('.', $scope.vmIPr.queryParams);
		}, $scope, vmIPr.table);

		/*FUNCTION*/
		function getData() {
			/*Start: set datetime picker*/
			var dateTimePickerOpt = {
				singleDatePicker: false
			};

			if (vmIPr.queryParams.date) {
				var date = vmIPr.queryParams.date.split(' - ');
				angular.extend(dateTimePickerOpt, {
					startDate: date[0],
					endDate: date[1],
				});
				angular.element('#datetime-picker').val(vmIPr.queryParams.date);
			}
			vmIPr.dateTimePickerOpt = dateTimePickerOpt;
			/*End: set datetime picker*/

			importProductSvc.getAll(vmIPr.queryParams).then(function (resp) {
				vmIPr.filter = {};
				vmIPr.queryParams.pageCount = resp.totalPage;
				vmIPr.list = resp.items;
				vmIPr.params = resp.params;

				if (vmIPr.queryParams.slug) {
					vmIPr.filter.product = vmIPr.params.product.name;
				}

				if (vmIPr.queryParams.product) {
					vmIPr.filter.product = vmIPr.queryParams.product;
				}

				vmIPr.table = new NgTableParams({
					count: vmIPr.queryParams.limit
				}, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmIPr.list;
						}
					});

				vmIPr.table.page(vmIPr.queryParams.page);
				vmIPr.loading = false;
			})
		}

		function filterForm(form) {
			vmIPr.queryParams.page = 1;
			if (vmIPr.filter.date) {
				vmIPr.queryParams.date = formatMomentDate(vmIPr.filter.date.startDate) + ' - ' + formatMomentDate(vmIPr.filter.date.endDate);
			}
			if (vmIPr.filter.product || vmIPr.filter.product === '') {
				vmIPr.queryParams.product = vmIPr.filter.product;
			}
			if (vmIPr.queryParams.slug) {
				vmIPr.queryParams.slug = null;
			}
			$state.go('.', vmIPr.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmIPr.queryParams.product = null;
			vmIPr.queryParams.slug = null;
			vmIPr.queryParams.date = null;

			$state.go('.', vmIPr.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatMomentDate(date) {
			return date.format('DD/MM/YYYY');
		}

		function remove(import_product) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = '';
					$scope.message = 'Bạn có chắc xoá lịch sử nhập hàng này?';

					$scope.ok = function () {
						if (import_product.qty_before > import_product.product.qty_in_stock) {
							$uibModalInstance.close();
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Thất bại!',
									message: 'Số lượng sản phẩm trong kho nhỏ hơn số lượng nhập hàng.'
								}
							});
						}
						else {
							importProductSvc.del(import_product._id).then(function (resp) {
								$state.go('.', vmIPr.queryParams).then(function () {
									$state.reload();
								});
								$uibModalInstance.close();

								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công!',
										message: 'Xóa lịch sử thành công!'
									}
								});
							}).catch(function (err) {
								$uibModalInstance.close();
								console.log(err);
								$bzPopup.toastr({
									type: 'err',
									data: {
										title: 'Lỗi!',
										message: 'Xóa lịch sử thành công!'
									}
								});
							})
						}
					}
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var importProductEditCtrl = (function () {
	'use strict';

	angular
		.module('bzImportProduct')
		.controller('importProductEditCtrl', importProductEditCtrl);

	function importProductEditCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, NgTableParams, ngTableEventsChannel, authSvc, importProductSvc) {
		var vmIPrE = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('import_product', 'add')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmIPrE.queryParams = $stateParams;

		// Methods
		vmIPrE.editPrice = editPrice;
		vmIPrE.getDetailProduct = getDetailProduct;
		vmIPrE.calcuteLost = calcuteLost;
		vmIPrE.calcuteTotalMoney = calcuteTotalMoney;
		vmIPrE.submitForm = submitForm;
		vmIPrE.enableForm = enableForm;

		// Init
		getData();

		/*FUNCTION*/
		function getData() {
			importProductSvc.edit(vmIPrE.queryParams.id).then(function (resp) {
				// console.log(resp);
				vmIPrE.productList = resp.productList;
				vmIPrE.supplierList = resp.supplierList;
				vmIPrE.importProduct = resp.data;
				vmIPrE.productDetail = resp.data.product;
				vmIPrE.minQty = vmIPrE.productDetail.qty_in_stock < vmIPrE.importProduct.qty_before ? vmIPrE.importProduct.qty_before - vmIPrE.productDetail.qty_in_stock : 0;
				vmIPrE.tmpQty = {};
				calcuteLost();
			}).catch(function (error) {
				console.log(error);
			});
		}

		function editPrice(priceProduct) {
			vmIPrE.showEditPrice = !vmIPrE.showEditPrice;
		}

		function getDetailProduct() {
			var id = vmIPrE.importProduct.id_product;
			vmIPrE.productList.forEach(function (value, key) {
				if (value._id === id) {
					vmIPrE.productDetail = value;
					vmIPrE.importProduct.price_new = value.price;
					vmIPrE.showEditPrice = false;
					return;
				}
			});
		}

		function calcuteLost() {
			var before = vmIPrE.importProduct.qty_before;
			var after = vmIPrE.importProduct.qty_after;
			if (!isNaN(before) && !isNaN(after)) {
				vmIPrE.tmpQty.qty_number_after = Math.round((before - after) * 100) / 100;
				vmIPrE.tmpQty.qty_percent_after = (vmIPrE.tmpQty.qty_number_after / before * 100).toFixed(2);
			}
		}

		function calcuteTotalMoney(number) {
			vmIPrE.importProduct.total_money_after = number * vmIPrE.importProduct.price_new;
		}

		function enableForm(form) {
			if (form) {
				form.$submitted = false;
			}
		}

		function submitForm(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: "Vui lòng điền đầy đủ thông tin."
					}
				});
				return;
			}
			vmIPrE.importProduct.price_old = vmIPrE.productDetail.price;

			importProductSvc.update({
				data: vmIPrE.importProduct,
				product: vmIPrE.productDetail
			}, vmIPrE.queryParams.id).then(function (resp) {
				form.$submitted = false;
				console.log(resp);
				$state.go('import-product');
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Import product thành công!'
					}
				});
			}).catch(function (error) {
				console.log(error);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Import product thất bại!!'
					}
				});
			});
		}

	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var importProductCtrl = (function () {
	'use strict';

	angular
		.module('bzImportProduct')
		.controller('importProductCtrl', importProductCtrl);

	function importProductCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, NgTableParams, ngTableEventsChannel, authSvc, importProductSvc) {
		var vmIPr = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('import_product', 'add')))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmIPr.queryParams = $stateParams;

		// Methods
		vmIPr.editPrice = editPrice;
		vmIPr.getDetailProduct = getDetailProduct;
		vmIPr.calcuteLost = calcuteLost;
		vmIPr.calcuteTotalMoney = calcuteTotalMoney;
		vmIPr.submitForm = submitForm;
		vmIPr.enableForm = enableForm;

		// Init
		getData();


		/*FUNCTION*/
		function getData() {
			importProductSvc.getDataImport().then(function (resp) {
				vmIPr.productList = resp.productList;
				vmIPr.supplierList = resp.supplierList;
				vmIPr.importProduct = {
					id_supplier: vmIPr.supplierList[0]._id
				};
				vmIPr.productDetail = {};
				vmIPr.tmpQty = {};
			}).catch(function (error) {
				console.log(error);
			});
		}

		function editPrice(priceProduct) {
			vmIPr.showEditPrice = !vmIPr.showEditPrice;
		}

		function getDetailProduct() {
			var id = vmIPr.importProduct.id_product;
			vmIPr.productList.forEach(function (value, key) {
				if (value._id === id) {
					vmIPr.productDetail = value;
					vmIPr.importProduct.price_new = value.price;
					vmIPr.showEditPrice = false;
					return;
				}
			});
		}

		function calcuteLost() {
			var before = vmIPr.importProduct.qty_before;
			var after = vmIPr.importProduct.qty_after;
			if (!isNaN(before) && !isNaN(after)) {
				vmIPr.tmpQty.qty_number_after = Math.round((before - after) * 100) / 100;
				vmIPr.tmpQty.qty_percent_after = (vmIPr.tmpQty.qty_number_after / before * 100).toFixed(2);
			}
		}

		function calcuteTotalMoney(number) {
			vmIPr.importProduct.total_money_after = number * vmIPr.importProduct.price_new;
		}

		function enableForm(form) {
			if (form) {
				form.$submitted = false;
			}
		}

		function submitForm(form) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: "Vui lòng điền đầy đủ thông tin."
					}
				});
				return;
			}
			vmIPr.importProduct.price_old = vmIPr.productDetail.price;

			importProductSvc.importProduct({
				data: vmIPr.importProduct,
				product: vmIPr.productDetail
			}).then(function (resp) {
				form.$submitted = false;
				$state.go("import-product");
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Import product thành công!'
					}
				});
			}).catch(function (error) {
				console.log(error);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Import product thất bại!!'
					}
				});
			});
		}

	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var dashboardCtrl = (function () {
	'use strict';

	angular
		.module('bzDashboard')
		.controller('dashboardCtrl', dashboardCtrl);

	function dashboardCtrl($scope, $window, $state, authSvc, bzResourceSvc) {
		var vmDashboard = this;
		// $state.go('dashboard');

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('dashboard','view') ))){
            $state.go('error403');
        }

		bzResourceSvc.api($window.settings.services.admin + '/dashboard')
			.get({}, function (resp) {
				vmDashboard.info = resp;
			});

	}
	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var couponCtrl = (function () {
	'use strict';

	angular
		.module('bzCoupon')
		.controller('couponCtrl', couponCtrl);

	function couponCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, couponSvc) {
		/* jshint validthis: true */
		var vmCoupons = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('coupon', 'view')))) {
			$state.go('error403');
		}

		vmCoupons.showBtnAdd = authSvc.hasPermission('coupon', 'add');
		vmCoupons.showBtnEdit = authSvc.hasPermission('coupon', ['add', 'edit']);
		vmCoupons.showBtnDelete = authSvc.hasPermission('coupon', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmCoupons.loading = true;
		vmCoupons.selectedItems = [];
		vmCoupons.queryParams = $stateParams;
		vmCoupons.keyword = $stateParams.keyword;
		vmCoupons.userRoles = userRoles;
		vmCoupons.coupons = [];

		// Methods
		vmCoupons.filter = filter;
		vmCoupons.filterReset = filterReset;
		vmCoupons.sort = sort;
		vmCoupons.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmCoupons.queryParams.page = vmCoupons.table.page();
			$state.go('.', $scope.vmCoupons.queryParams);
		}, $scope, vmCoupons.table);

		function getData() {
			couponSvc.getAll(vmCoupons.queryParams, 'single').then(function (resp) {
				vmCoupons.queryParams.pageCount = resp.totalPage;
				vmCoupons.coupons = resp.items;

				vmCoupons.table = new NgTableParams({ count: 20 }, {
					counts: [],
					getData: function (params) {
						params.total(resp.totalItems);
						return vmCoupons.coupons;
					}
				});
				vmCoupons.table.page(vmCoupons.queryParams.page);
				vmCoupons.loading = false;
			})
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmCoupons.queryParams.page,
			}).then(function () {
				$state.reload();
			});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmCoupons.queryParams.page,
				// publish: null,
				// cateid: null,
				// limit: settingJs.admin.itemPerPage
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function sort(id, value) {
			$bzPopup.toastr({
				type: 'success',
				data: {
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự phiếu mua hàng thành công!'
				}
			});
		}

		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/coupon/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa phiếu mua hàng thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var couponGroupCtrl = (function () {
	'use strict';

	angular
		.module('bzCoupon')
		.controller('couponGroupCtrl', couponGroupCtrl);

	function couponGroupCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, couponSvc) {
		/* jshint validthis: true */
		var vmCPG = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('coupon', 'view')))) {
			$state.go('error403');
		}

		vmCPG.showBtnAdd = authSvc.hasPermission('coupon', 'add');
		vmCPG.showBtnEdit = authSvc.hasPermission('coupon', ['add', 'edit']);
		vmCPG.showBtnDelete = authSvc.hasPermission('coupon', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmCPG.loading = true;
		vmCPG.selectedItems = [];
		vmCPG.queryParams = $stateParams;
		vmCPG.keyword = $stateParams.keyword;
		vmCPG.userRoles = userRoles;
		vmCPG.coupons = [];

		// Methods
		vmCPG.filter = filter;
		vmCPG.filterReset = filterReset;
		vmCPG.sort = sort;
		vmCPG.remove = remove;
		vmCPG.exportExcel = exportExcel;
		vmCPG.selectAll = selectAll;
		vmCPG.sumOrder = sumOrder;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmCPG.queryParams.page = vmCPG.table.page();
			$state.go('.', $scope.vmCPG.queryParams);
		}, $scope, vmCPG.table);

		function getData() {
			couponSvc.getAll(vmCPG.queryParams, 'group').then(function (resp) {
				vmCPG.queryParams.pageCount = resp.totalPage;
				vmCPG.totalItems = resp.totalItems;
				vmCPG.coupons = resp.items;

				vmCPG.table = new NgTableParams({ count: 20 }, {
					counts: [],
					getData: function (params) {
						params.total(resp.totalItems);
						return vmCPG.coupons;
					}
				});
				vmCPG.table.page(vmCPG.queryParams.page);
				vmCPG.loading = false;
			})
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmCPG.queryParams.page,
			}).then(function () {
				$state.reload();
			});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmCPG.queryParams.page,
				// publish: null,
				// cateid: null,
				// limit: settingJs.admin.itemPerPage
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function sort(id, value) {
			$bzPopup.toastr({
				type: 'success',
				data: {
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự phiếu mua hàng thành công!'
				}
			});
		}

		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/coupon/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa phiếu mua hàng thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}

		function exportExcel() {
			vmCPG.btnExport = true;
			var data = [[
				'Mã Coupon Group', 'Mã coupon'
			]];
			var options = {
				type: 'xlsx',
				sheetName: 'SheetJS1',
				fileName: 'Coupon Group',
			};
			var query = (JSON.parse(JSON.stringify(vmCPG.queryParams)));
			query.limit = vmCPG.totalItems;
			query.page = 1;

			vmCPG.coupons.forEach(function (item) {
				if (item.value_checkbox) {
					item.code_group.forEach(function (item_group) {
						data.push([item.code, item_group.code]);
					})
				}
			});
			if (data.length == 1) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Chưa chọn mã giảm giá!',
						message: 'Vui lòng chọn mã giảm giá bạn muốn xuất!'
					}
				});
			}
			else {
				ExcelJs.exportExcel(data, options);
			}
			vmCPG.btnExport = false;
		}

		function selectAll() {
			vmCPG.coupons.forEach(function (item) {
				item.value_checkbox = vmCPG.checkbox.selectAll;
			});
		}

		function sumOrder(coupon) {
			var sum = 0;
			coupon.order_group.forEach(function (item) {
				if (Array.isArray(item)) {
					sum += item.length;
				}
				else {
					sum++;
				}
			})
			return sum;
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var couponEditCtrl = (function () {
    'use strict';

    angular
        .module('bzCoupon')
        .controller('couponEditCtrl', couponEditCtrl);

    function couponEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, couponSvc, shippingfeeSvc, productSvc) {
        /* jshint validthis: true */
        var vmEditCoupons = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('coupon', ['add', 'edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditCoupons.lockFOrm = false;
        vmEditCoupons.submitted = false;
        vmEditCoupons.params = $stateParams;
        vmEditCoupons.tmp_code_group = '';
        vmEditCoupons.optionTimePicker = {
            timePicker: true,
            timePickerIncrement: 30,
            locale: {
                format: 'h:mm DD/MM/YYYY'
            }
        };

        // Methods
        vmEditCoupons.upCase = upCase;
        vmEditCoupons.save = update;
        vmEditCoupons.vmEditCoupons = getCoupon;
        vmEditCoupons.randomString = randomString;
        vmEditCoupons.checkSale = checkSale;

        //Init
        getCoupon();
        getDistrict();
        getListCategory();
        getListProduct();

        function getCoupon() {
            const id = $stateParams.id;
            couponSvc.get(id).then(function (res) {
                vmEditCoupons.formData = res;
                vmEditCoupons.tmp_count = res.count === true ? "1" : "0";
                vmEditCoupons.tmp_sale = res.sale.is_money === true ? "money" : "percent";
                if (vmEditCoupons.formData.type == 'group') {
                    vmEditCoupons.tmp_code_group = vmEditCoupons.formData.code_group.reduce(function (txt, item) {
                        return txt + ',' + item.code;
                    }, '')
                    vmEditCoupons.tmp_code_group = vmEditCoupons.tmp_code_group.substring(1);
                }
            }).catch(function (err) {
                console.error('err', err);
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Sửa phiếu mua hàng',
                        message: 'Lỗi server'
                    }
                });
            });
        };

        function getDistrict() {
            shippingfeeSvc.getAllNoPaging().then(function (resp) {
                vmEditCoupons.district = resp.items;
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Sửa phiếu mua hàng',
                        message: 'Lỗi server'
                    }
                });
            });
        }

        function getListCategory() {
            bzResourceSvc.api($window.settings.services.admin + '/category')
                .get({
                    limit: 100,
                    page: 1,
                    parrent_id: "*"
                }, function (resp) {
                    vmEditCoupons.listCategory = resp.items;
                });
        };

        function getListProduct() {
            productSvc.add().then(function (resp) {
                vmEditCoupons.listProduct = resp.productList;
            });
        };

        function upCase() {
            vmEditCoupons.formData.code = vmEditCoupons.formData.code.toUpperCase();
        }

        function update(isValid) {
            vmEditCoupons.submitted = true;
            vmEditCoupons.lockForm = true;
            if (isValid) {
                var arr_code = vmEditCoupons.formData.code.split(',').concat(vmEditCoupons.tmp_code_group.split(','));

                couponSvc.checkIsset({ data: arr_code }, vmEditCoupons.params.id).then(function (resp) {
                    if (resp.isset) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Sửa phiếu mua hàng',
                                message: 'Đã tồn tại mã ' + resp.code
                            }
                        });
                        vmEditCoupons.lockForm = false;
                    }
                    else {
                        couponSvc.update(vmEditCoupons.formData, vmEditCoupons.formData._id).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Sửa phiếu mua hàng',
                                    message: 'Thành công'
                                }
                            });
                            if (vmEditCoupons.formData.type == 'group') {
                                $state.go('coupon-group');
                            }
                            else {
                                $state.go('coupon-list');
                            }
                        }).catch(function (error) {
                            vmEditCoupons.lockForm = false;
                            console.err('error', error);
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Sửa phiếu mua hàng',
                                    message: error.data.message
                                }
                            });
                        });
                    }
                }).catch(function (err) {
                    console.error("Err", err);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lỗi!',
                            message: 'Thêm coupon bị lỗi'
                        }
                    });
                    vmEditCoupons.lockForm = false;
                });
            }
            else {
                vmEditCoupons.submitted = true;
                vmEditCoupons.lockForm = false;
            }
        };

        function randomString() {
            var length = 5;
            var chars = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            var result = '';
            for (var i = length; i > 0; --i) {
                result += chars[Math.round(Math.random() * (chars.length - 1))];
            }
            vmEditCoupons.formData.code = result;
        }

        function checkSale() {
            if (vmEditCoupons.tmp_sale === "money") {
                vmEditCoupons.formData.sale.is_money = true;
                vmEditCoupons.formData.sale.is_percent = false;
                vmEditCoupons.formData.sale.percent_value = "";
            }
            else {
                vmEditCoupons.formData.sale.is_money = false;
                vmEditCoupons.formData.sale.is_percent = true;
                vmEditCoupons.formData.sale.money_value = "";
            }
        }

        //End Ctrl
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var couponAddCtrl = (function () {
    'use strict';

    angular
        .module('bzCoupon')
        .controller('couponAddCtrl', couponAddCtrl);

    function couponAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, couponSvc, shippingfeeSvc, categorySvc, productSvc) {
        /* jshint validthis: true */
        var vmAddCoupons = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('coupon', 'add')))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddCoupons.lockForm = false;
        vmAddCoupons.submitted = false;
        vmAddCoupons.tmp_count = "0";
        vmAddCoupons.tmp_sale = "money";
        vmAddCoupons.optionTimePicker = {
            timePicker: true,
            timePickerIncrement: 30,
            locale: {
                format: 'h:mm DD/MM/YYYY'
            }
        };
        vmAddCoupons.params = $stateParams;
        vmAddCoupons.formData = {
            status: "active",
            sale: {
                is_money: true,
                is_percent: false,
                percent_value: "",
                money_value: ""
            },
            times: 1,
            user_times: 1,
            type: vmAddCoupons.params.type ? vmAddCoupons.params.type : 'single'
        };
        vmAddCoupons.tmp_code_group = '';

        // Methods
        vmAddCoupons.upCase = upCase;
        vmAddCoupons.save = create;
        vmAddCoupons.randomString = randomString;
        vmAddCoupons.checkSale = checkSale;
        vmAddCoupons.addManyCoupon = addManyCoupon;

        // Init
        getDistrict();
        getListCategory();
        getListProduct();

        function getDistrict() {
            shippingfeeSvc.getAllNoPaging().then(function (resp) {
                vmAddCoupons.district = resp.items;
                // console.log('district', vmAddCoupons.district);
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Thêm phiếu mua hàng',
                        message: 'Lỗi server'
                    }
                });
            });
        }

        function getListCategory() {
            bzResourceSvc.api($window.settings.services.admin + '/category')
                .get({
                    limit: 100,
                    page: 1,
                    parrent_id: "*"
                }, function (resp) {
                    vmAddCoupons.listCategory = resp.items;
                });
        };

        function getListProduct() {
            productSvc.add().then(function (resp) {
                vmAddCoupons.listProduct = resp.productList;
            });
        };

        function upCase() {
            if (vmAddCoupons.formData.code) {
                vmAddCoupons.formData.code = vmAddCoupons.formData.code.toUpperCase();
            }
        }

        function create(isValid) {
            vmAddCoupons.submitted = true;
            vmAddCoupons.lockForm = true;
            vmAddCoupons.formData.count = vmAddCoupons.tmp_count == "1" ? true : false;
            console.log(vmAddCoupons.formData);

            if (isValid) {
                let arr_code = vmAddCoupons.formData.code.split(',').concat(vmAddCoupons.tmp_code_group.split(','));

                if (vmAddCoupons.formData.type == 'group') {
                    vmAddCoupons.formData.code_group = vmAddCoupons.tmp_code_group.split(',').map(function (item) {
                        return {
                            code: item,
                            user_times: vmAddCoupons.formData.user_times,
                            times: vmAddCoupons.formData.times
                        }
                    });
                }

                couponSvc.checkIsset({ data: arr_code }).then(function (resp) {
                    if (resp.isset) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Thêm phiếu mua hàng',
                                message: 'Đã tồn tại mã ' + resp.code
                            }
                        });
                        vmAddCoupons.lockForm = false;
                    }
                    else {
                        couponSvc.create(vmAddCoupons.formData).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công',
                                    message: resp.message
                                }
                            });
                            if (vmAddCoupons.params.type == 'group') {
                                $state.go('coupon-group');
                            }
                            else {
                                $state.go('coupon-list');
                            }
                        }).catch(function (error) {
                            console.err("Err", error);
                            vmAddCoupons.lockForm = false;
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Thêm phiếu mua hàng',
                                    message: error.data.message
                                }
                            });
                        });
                    }
                }).catch(function (err) {
                    console.error("Err", err);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lỗi!',
                            message: 'Thêm coupon bị lỗi'
                        }
                    });
                    vmAddCoupons.lockForm = false;
                });
            }
            else {
                vmAddCoupons.submitted = true;
                vmAddCoupons.lockForm = false;
            }
        };

        function randomString() {
            var length = 5;
            var chars = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            var result = '';
            for (var i = length; i > 0; --i) {
                result += chars[Math.round(Math.random() * (chars.length - 1))];
            }
            vmAddCoupons.formData.code = result;
        }

        function checkSale() {
            if (vmAddCoupons.tmp_sale === "money") {
                vmAddCoupons.formData.sale.is_money = true;
                vmAddCoupons.formData.sale.is_percent = false;
                vmAddCoupons.formData.sale.percent_value = "";
            }
            else {
                vmAddCoupons.formData.sale.is_money = false;
                vmAddCoupons.formData.sale.is_percent = true;
                vmAddCoupons.formData.sale.money_value = "";
            }
        }

        function addManyCoupon() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'modules/admin-coupon/view/client/popup/add-many-coupon/add-many-coupon.html',
                controller: 'popupGenaratorCodeCtrl',
                resolve: {
                    data: function () {
                        return angular.copy({});
                    }
                }
            });

            modalInstance.result.then(function (resp) {
                vmAddCoupons.formData.code = resp.code;
                vmAddCoupons.tmp_code_group = resp.code_group;
            }, function () {
            });
        }

        function createCodeGroup() {

        }


        //End Ctrl
    }



    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var configListCtrl = (function () {
	'use strict';

	angular
		.module('bzConfig')
		.controller('configListCtrl', configListCtrl);

	function configListCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, configSvc) {
		/* jshint validthis: true */
		var vmListConfig = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('config', ['view'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmListConfig.loading = true;
		vmListConfig.selectedItems = [];
		vmListConfig.keyword = $stateParams.keyword;
		vmListConfig.queryParams = $stateParams;

		vmListConfig.userRoles = userRoles;
		// console.log('test', userRoles);
		vmListConfig.listSupplier = [];

		// Methods
		vmListConfig.filter = filter;
		vmListConfig.filterReset = filterReset;
		vmListConfig.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmListConfig.queryParams.page = vmListConfig.table.page();
			$state.go('.', $scope.vmListConfig.queryParams);
		}, $scope, vmListConfig.table);

		function getData() {
			//fix pagining
			bzResourceSvc.api($window.settings.services.admin + '/config')
				.get(vmListConfig.queryParams, function (resp) {
					vmListConfig.queryParams.pageCount = resp.totalPage;
					vmListConfig.listSupplier = resp.items;
					// console.log('test',vmListConfig.users);

					vmListConfig.table = new NgTableParams({ count: parseInt(vmListConfig.queryParams.limit) || 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmListConfig.listSupplier;
						}
					});
					vmListConfig.table.page(vmListConfig.queryParams.page);
					vmListConfig.loading = false;

				});
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmListConfig.queryParams.page,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmListConfig.queryParams.page,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/config/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Config',
										message: 'Deleted!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var configEditCtrl = (function () {
    'use strict';

    angular
        .module('bzConfig')
        .controller('configEditCtrl', configEditCtrl);

    function configEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, configSvc, bzUtilsSvc) {
        /* jshint validthis: true */
        var vmEditConfig = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('config', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditConfig.lockFOrm = false;
        vmEditConfig.save = update;
        vmEditConfig.vmEditConfig = getConfig;
        vmEditConfig.submitted = false;

        //Init
        getConfig();

        function getConfig() {
            const id = $stateParams.id;
            configSvc.get(id).then(function (res) {
                vmEditConfig.formData = res;
                if (!vmEditConfig.formData.type)
                    vmEditConfig.formData.type = "";
                // console.log(res);
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Getting',
                        message: err.data
                    }
                });
            });
        };

        function update(isValid) {
            vmEditConfig.submitted = true;
            vmEditConfig.lockForm = true;
            if (isValid) {
                configSvc.update(vmEditConfig.formData, vmEditConfig.formData._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Config',
                            message: 'Cập nhật thành công'
                        }
                    });
                    $state.go('configs');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật config',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditConfig.submitted = true;
            }
        };

        // Custom Name Config
        function generatorName(text) {
            vmAddConfigs.formData.name = bzUtilsSvc.textToSlug(text);
            if (vmAddConfigs.formData.name != text)
                vmAddConfigs.showTip = true;
            else
                vmAddConfigs.showTip = false;
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var configAddCtrl = (function () {
    'use strict';

    angular
        .module('bzConfig')
        .controller('configAddCtrl', configAddCtrl);

    function configAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, configSvc, bzUtilsSvc) {
        /* jshint validthis: true */
        var vmAddConfigs = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('config', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddConfigs.formData = {
            name: '',
            value: 0,
            description: '',
            status: true,
            type: ""
        };
        vmAddConfigs.lockFOrm = false;
        vmAddConfigs.save = create;
        vmAddConfigs.submitted = false;

        //Init

        function create(isValid) {
            vmAddConfigs.submitted = true;
            vmAddConfigs.lockForm = true;
            if (isValid) {
                configSvc.create(vmAddConfigs.formData).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Đơn vị',
                            message: 'Thêm thành công'
                        }
                    });
                    $state.go('configs');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Config',
                            message: error.data
                        }
                    });
                });
            }
            else {
                vmAddConfigs.submitted = true;
            }
        };

        // Custom Name Config
        function generatorName(text) {
            vmAddConfigs.formData.name = bzUtilsSvc.textToSlug(text);
            if (vmAddConfigs.formData.name != text)
                vmAddConfigs.showTip = true;
            else
                vmAddConfigs.showTip = false;
        }
    }


    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var certificateCtrl = (function(){
	'use strict';

	angular
	.module('bzCertificate')
	.controller('certificateCtrl', certificateCtrl);

	function certificateCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
    userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, certificateSvc){
		/* jshint validthis: true */
		var vmCertificates = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('certificate','view') ))){
            $state.go('error403');
        }

		vmCertificates.showBtnAdd = authSvc.hasPermission('certificate','add');
		vmCertificates.showBtnEdit = authSvc.hasPermission('certificate',['add','edit']);
		vmCertificates.showBtnDelete = authSvc.hasPermission('certificate','delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmCertificates.loading = true;
		vmCertificates.selectedItems = [];
		vmCertificates.queryParams = $stateParams;
		vmCertificates.keyword = $stateParams.keyword;

		vmCertificates.userRoles = userRoles;
		// console.log('test', userRoles);
		vmCertificates.certificates = [];
		vmCertificates.imagesDerectory = settingJs.configs.uploadDirectory.certificate;

		// Methods
		vmCertificates.filter = filter;
		vmCertificates.filterReset = filterReset;
		vmCertificates.sort = sort;
		vmCertificates.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmCertificates.queryParams.page = vmCertificates.table.page();
			$state.go('.',$scope.vmCertificates.queryParams);
		}, $scope, vmCertificates.table);

		function getData(){
			bzResourceSvc.api($window.settings.services.admin + '/certificate')
			.get(vmCertificates.queryParams, function(resp){
				vmCertificates.queryParams.pageCount = resp.totalPage;
				vmCertificates.certificates = resp.items;

				vmCertificates.table = new NgTableParams({count: 20}, {
					counts: [],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmCertificates.certificates;
					}
				});
				vmCertificates.table.page(vmCertificates.queryParams.page);
				vmCertificates.loading = false;
			});
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmCertificates.queryParams.page,
			}).then(function () {
				$state.reload();
			});
		}

		
		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmCertificates.queryParams.page,
				// publish: null,
				// cateid: null,
				// limit: settingJs.admin.itemPerPage
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		

		function sort(id, value){
			$bzPopup.toastr({
				type: 'success',
				data:{
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự chứng chỉ thành công!'
				}
			});
		}

		function remove(id){
			var selected = {ids: [id]}; //id ? {ids: [id]} : getSelectedIds();
			console.log('asd',id);

			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'assets/global/message/view.html',
				controller: function($scope, $uibModalInstance){
					$scope.popTitle = 'Xóa'; 
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?'; 
					$scope.ok = function(){
						bzResourceSvc.api($window.settings.services.admin + '/certificate/:id', {id: '@id'})
						.delete({id: selected.ids}, function(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Xóa',
									message: 'Xóa chứng chỉ thành công!'
								}
							});
							$state.reload();
							$uibModalInstance.close();
						});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var certificateEditCtrl = (function () {
    'use strict';

    angular
        .module('bzCertificate')
        .controller('certificateEditCtrl', certificateEditCtrl);

    function certificateEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, certificateSvc, Upload) {
        /* jshint validthis: true */
        var vmEditCertificates = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('certificate',['add','edit']) ))){
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditCertificates.lockFOrm = false;
        vmEditCertificates.save = update;
        vmEditCertificates.vmEditCertificates = getCertificate;
        vmEditCertificates.submitted = false;

        //Method
        vmEditCertificates.uploadImage = uploadImage;
        vmEditCertificates.removeImage = removeImage;
        vmEditCertificates.imagesDirectory = settingJs.configs.uploadDirectory.certificate;

        //Init
        getCertificate();

        function getCertificate(){
            const id = $stateParams.id;
            certificateSvc.get(id).then(function(res){
                vmEditCertificates.formData = res;
            }).catch(function (err){
                 $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Getting',
                            message: err.data.message
                        }
                    });
            });
        };

        function update(isValid) {
            vmEditCertificates.submitted = true;
            vmEditCertificates.lockForm = true;
            // console.log(vmEditCertificates.formData);
            if (isValid) {
                certificateSvc.update(vmEditCertificates.formData, vmEditCertificates.formData._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Chứng chỉ',
                            message: "Sửa thành công"
                        }
                    });
                $state.go('certificate-list');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật chứng chỉ',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditCertificates.submitted = true;
            }
        };

        //Remove image uploaded
        function removeImage(index) {
            vmEditCertificates.formData.images.splice(index, 1);
        };
        // Upload image
        function uploadImage(file) {
                if (file.length > 0) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'certificate_image',
                                prefix: 'certificate_image',
                            }
                        }).then(function (resp) {
                            vmEditCertificates.formData.images.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        };

    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var certificateAddCtrl = (function () {
    'use strict';

    angular
        .module('bzCertificate')
        .controller('certificateAddCtrl', certificateAddCtrl);

    function certificateAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, certificateSvc, Upload) {
        /* jshint validthis: true */
        var vmAddCertificates = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('certificate','add') ))){
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddCertificates.formData = {};
        vmAddCertificates.lockFOrm = false;
        vmAddCertificates.save = create;
        vmAddCertificates.submitted = false;
        vmAddCertificates.imagesDirectory = settingJs.configs.uploadDirectory.certificate;
        vmAddCertificates.formData = {
            name: '',
            description: '',
            images: [],
        };
        

        // Method
        vmAddCertificates.removeImage = removeImage;
        vmAddCertificates.uploadImage = uploadImage

        //Init

        function create(isValid) {
            vmAddCertificates.submitted = true;
            vmAddCertificates.lockForm = true;
            console.log(vmAddCertificates.formData);
            if (isValid) {
                certificateSvc.create(vmAddCertificates.formData)
                .then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Chứng chỉ ',
                            message: 'Thêm thành công'
                        }
                    });
                $state.go('certificate-list');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Thêm chứng chỉ ',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmAddCertificates.submitted = true;
            }
        };

        //Remove image uploaded
        function removeImage(index) {
            vmAddCertificates.formData.images.splice(index, 1);
        };

        // Upload image
        function uploadImage(file) {
                if (file.length > 0) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'certificate_image',
                                prefix: 'certificate_image',
                            }
                        }).then(function (resp) {
                            vmAddCertificates.formData.images.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var certificateProductCtrl = (function(){
	'use strict';

	angular
	.module('bzCertificate')
	.controller('certificateProductCtrl', certificateProductCtrl);

	function certificateProductCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
    userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, certificateSvc,tagSvc,productSvc){
		/* jshint validthis: true */
		var vmCertificateProduct = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('certificate','view') ))){
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmCertificateProduct.loading = true;
		vmCertificateProduct.submitted = false;
		vmCertificateProduct.lockForm = false;
		vmCertificateProduct.queryParams = $stateParams;
		vmCertificateProduct.cerID = $stateParams.id;
		vmCertificateProduct.userRoles = userRoles;
		vmCertificateProduct.certificates = [];
		vmCertificateProduct.imagesDerectory = settingJs.configs.uploadDirectory.product;

		// Methods
		vmCertificateProduct.filter = filter;
		vmCertificateProduct.filterReset = filterReset;
		vmCertificateProduct.sort = sort;
		vmCertificateProduct.addCertificateProduct = addCertificateProduct;
		vmCertificateProduct.delCertificateProduct = delCertificateProduct
		
		

		// Init
		getCertificate();
		getData();
		

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmCertificateProduct.queryParams.page = vmCertificateProduct.table.page();
			$state.go('.',$scope.vmCertificateProduct.queryParams);
		}, $scope, vmCertificateProduct.table);

		function getData() {
			const id = $stateParams.id;
			bzResourceSvc.api($window.settings.services.admin + '/certificate-product' + '/:id')
			.get( vmCertificateProduct.queryParams ,{id:id}, function(resp){
				vmCertificateProduct.queryParams.pageCount = resp.totalPage;
				vmCertificateProduct.listProductOfCer = resp.in;
				vmCertificateProduct.listProduct = resp.nin;
				vmCertificateProduct.table = new NgTableParams({count: vmCertificateProduct.queryParams.limit || 10}, {
					counts: [],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmCertificateProduct.listProductOfCer;
					}
				});
				vmCertificateProduct.table.page(vmCertificateProduct.queryParams.page);
				vmCertificateProduct.loading = false;
			});
		}

		function getCertificate(){
            const id = $stateParams.id;
            certificateSvc.get(id).then(function(res){
                vmCertificateProduct.certificate = res;
            }).catch(function (err){
                 $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Getting',
                            message: err.data.message
                        }
                    });
            });
        };

		

		
		function filter(params){
			$state.go('.', angular.extend(params, saleContact.queryParams),
				{notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			$state.go('.', {
				publish: null,
				cateid: null,
				keyword: null,
				limit: settingJs.admin.itemPerPage
			}, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		

		function sort(id, value){
			$bzPopup.toastr({
				type: 'success',
				data:{
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự chứng chỉ thành công!'
				}
			});
		}


		function addCertificateProduct(isValid) {
			vmCertificateProduct.submitted = true;
			vmCertificateProduct.lockForm = true;
			if (isValid) {
				for(var i = 0; i< vmCertificateProduct.productID.length; i++) {
					let id_product = vmCertificateProduct.productID[i];

					tagSvc.getProductById(id_product).then(function (resp) {
					var product = resp;
					product.certificates.push(vmCertificateProduct.cerID);
					productSvc.updateProduct({ data: product },id_product).then(function (resp) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Sản phẩm',
								message: 'thêm vào nhãn thành công'
							}
						});
						$state.reload();
					}).catch(function (error) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'aaa',
								message: error.data.message
							}
						});
					});

				});

				}
				
			}
			else {
				vmCertificateProduct.submitted = true;
				vmCertificateProduct.lockForm = false;
			}
		}

		function delCertificateProduct(id_product) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						tagSvc.getProductById(id_product).then(function (resp) {
							var product = resp;

							// Tìm vị trí và xóa tag trong product
							var index = 0;
							var p = product.certificates.find(function (item, key) {
								index = key;
								return item == vmCertificateProduct.cerID;
							});
							product.certificates.splice(index, 1);
							
							// Cập nhập lại product
							productSvc.updateProduct({ data: product },id_product).then(function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Sản phẩm',
										message: 'Xóa sản phẩm thành công'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							}).catch(function (error) {
								$bzPopup.toastr({
									type: 'error',
									data: {
										title: 'Xóa sản phẩm thất bại',
										message: error.data.message
									}
								});
							});
						});

					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var categoryListCtrl = (function () {
	'use strict';

	angular
		.module('bzCategory')
		.controller('categoryListCtrl', categoryListCtrl);

	function categoryListCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, categorySvc) {
		/* jshint validthis: true */
		var vmListCategory = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('category', ['view'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmListCategory.query = {
			parrentId: null
		};
		vmListCategory.viewChild = false;
		vmListCategory.loading = true;
		vmListCategory.selectedItems = [];
		vmListCategory.queryParams = $stateParams;
		vmListCategory.userRoles = userRoles;
		vmListCategory.listCategory = [];
		vmListCategory.keyword = $stateParams.keyword;
		
		vmListCategory.imagesDerectory = settingJs.configs.uploadDirectory.category;

		vmListCategory.listCategoriesParrent = [];
		vmListCategory.categoriesParrent = null;
		// Methods
		vmListCategory.search = search;
		vmListCategory.filterReset = filterReset;
		vmListCategory.remove = remove;

		// Init
		if ($stateParams.parrentSlug !== '') //Lọc theo category
		{
			vmListCategory.viewChild = true;
			getCategoryParrentBySlug($stateParams.parrentSlug);
		}
		else {
			getData();
		};

		// Hàm đệ quy lấy tất cả các category cha theo thứ tự từ category level 5 về level 1
		function getListParrentCategory(category){
			if(category.parrent_id != null)
			{
				categorySvc.getById(category.parrent_id)
				.then(function (resp) {
					vmListCategory.listCategoriesParrent.push(resp);
					getListParrentCategory(resp);
				}).catch(function (err) {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Danh mục sản phẩm cha',
							message: err.data.message
						}
					});
				});
			}
			else // Kết thúc và đảo ngược mảng
			{
				vmListCategory.listCategoriesParrent.reverse();
				getData(vmListCategory.query.parrentId);
			}
		}

		function getCategoryParrentBySlug(slug) {
			categorySvc.get(slug)
				.then(function (resp) {
				vmListCategory.query.parrentId = resp.category._id;
				vmListCategory.categoriesParrent = resp.category;

				getListParrentCategory(resp.category);
				}).catch(function (err) {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Danh mục sản phẩm cha',
							message: err.data.message
						}
					});
				});
		}
		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmListCategory.queryParams.page = vmListCategory.table.page();
			$state.go('.', $scope.vmListCategory.queryParams);
		}, $scope, vmListCategory.table);

		function getData(id) {
			if (vmListCategory.viewChild) {
				bzResourceSvc.api($window.settings.services.admin + '/category_child/' + id)
					.get(vmListCategory.queryParams, function (resp) {
						vmListCategory.queryParams.pageCount = resp.totalPage;
						vmListCategory.listCategory = resp.items;

						vmListCategory.table = new NgTableParams({ count: 10 }, {
							counts: [],
							getData: function (params) {
								params.total(resp.totalItems);
								return vmListCategory.listCategory;
							}
						});
						vmListCategory.table.page(vmListCategory.queryParams.page);
						vmListCategory.loading = false;
					});
			}
			else {
				//fix pagining
				bzResourceSvc.api($window.settings.services.admin + '/category')
					.get(vmListCategory.queryParams, function (resp) {
						vmListCategory.queryParams.pageCount = resp.totalPage;
						vmListCategory.listCategory = resp.items;

						vmListCategory.table = new NgTableParams({ count: 10 }, {
							counts: [],
							getData: function (params) {
								params.total(resp.totalItems);
								return vmListCategory.listCategory;
							}
						});
						vmListCategory.table.page(vmListCategory.queryParams.page);
						vmListCategory.loading = false;
					});
			}

		}

		function getChildCategory(id) {
			let promise = categorySvc.getChild(vmListCategory.queryParams, id);
			return promise;
		}

		function remove(id) {
			getChildCategory(id).then(function (resp) {
				if (resp.totalItems > 0) {
					var modalInstance = $uibModal.open({
						animation: true,
						templateUrl: 'assets/global/message/view.html',
						controller: function ($scope, $uibModalInstance) {
							$scope.popTitle = 'Không thể xóa';
							$scope.message = 'Bạn không thể xóa danh mục cha. Vui lòng xóa các danh mục con trước';
							$scope.ok = function () {
								$state.go('categories', { parrentId: id });
								$uibModalInstance.close();
							};
							$scope.cancel = function () {
								$state.go('categories', { parrentId: null });
								$uibModalInstance.close();
							};
						}
					});
				}
				else {
					var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();
					var modalInstance = $uibModal.open({
						animation: true,
						templateUrl: 'assets/global/message/view.html',
						controller: function ($scope, $uibModalInstance) {
							$scope.popTitle = 'Xóa';
							$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
							$scope.ok = function () {
								bzResourceSvc.api($window.settings.services.admin + '/category/:id', { id: '@id' })
									.delete({ id: selected.ids }, function (resp) {
										$bzPopup.toastr({
											type: 'success',
											data: {
												title: 'Xóa',
												message: 'Xóa danh mục thành công!'
											}
										});
										$state.reload();
										$uibModalInstance.close();
									});
							};
						}
					});
				}
			}).catch(function (err) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Có lỗi xảy ra trong khi xóa',
						message: err.data.message
					}
				});
			});;
		}
		function search(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmListCategory.queryParams.page,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmListCategory.queryParams.page,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

	}


	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var categoryEditCtrl = (function () {
    'use strict';

    angular
        .module('bzCategory')
        .controller('categoryEditCtrl', categoryEditCtrl);

    function categoryEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, categorySvc, Upload, bzUtilsSvc) {
        /* jshint validthis: true */
        var vmcategoryEdit = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('category', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmcategoryEdit.lockFOrm = false;
        vmcategoryEdit.save = update;
        vmcategoryEdit.submitted = false;
        vmcategoryEdit.id = null;
        vmcategoryEdit.slug = $stateParams.slug;
        vmcategoryEdit.uploadImage = uploadImage;
        vmcategoryEdit.removeImage = removeImage;
        vmcategoryEdit.generatorSlug = generatorSlug;
        vmcategoryEdit.imagesDirectory = settingJs.configs.uploadDirectory.category;

        vmcategoryEdit.listChildCategory = [];
        vmcategoryEdit.parrentCate = {};

        getCategory();

        // Method
        function generatorSlug(text) {
            vmcategoryEdit.formData.slug = bzUtilsSvc.textToSlug(text);
        }

        function getChildCategory(id) {
            let promise = categorySvc.getChild({}, id);
            promise.then(function (resp) {
                vmcategoryEdit.listChildCategory = resp.items;
            }).catch(function (err) {

            });
        }

        //Remove image uploaded
        function removeImage(index) {
            vmcategoryEdit.formData.images.splice(index, 1);
        };
        // Upload image
        function uploadImage(file) {
            if (vmcategoryEdit.formData.images.length >= 5) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmcategoryEdit.formData.images.length < 5) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'category_image',
                                prefix: 'category_image',
                            }
                        }).then(function (resp) {
                            vmcategoryEdit.formData.images.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }

        function getCategory() {
            categorySvc.get($stateParams.slug).then(function (resp) {
                vmcategoryEdit.formData = resp.category;
                vmcategoryEdit.id = resp.category._id;
                vmcategoryEdit.listProduct = resp.productList;
                vmcategoryEdit.tmpProduct = vmcategoryEdit.formData.products.map(function (item) {
                    return item._id
                });
                getChildCategory(vmcategoryEdit.id);
                vmListCategory.loading = true;

            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Danh mục',
                        message: error.data.message
                    }
                });
            });
        };

        function checkExistSlug(slug) {
            return categorySvc.get(slug);
        }

        function update(isValid) {
            vmcategoryEdit.submitted = true;
            vmcategoryEdit.lockForm = true;

            if (isValid) {
                // slug was modified
                if (vmcategoryEdit.formData.slug != $stateParams.slug) {
                    checkExistSlug(vmcategoryEdit.formData.slug).then(function (resp) {
                        if (resp.status) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Không thể cập nhật',
                                    message: 'Bạn đã nhập slug đang được sử dụng bởi danh mục khác!'
                                }
                            });
                        }
                        else {
                            sendData();
                        }
                    }).catch(function (error) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Không thể cập nhật',
                                message: error.data.message
                            }
                        });
                    });
                }
                else {
                    sendData();
                }
            }
            else {
                vmcategoryEdit.submitted = true;
            }
        };

        function sendData() {
            if (vmcategoryEdit.formData.parrent_id == "")
                vmcategoryEdit.formData.parrent_id = null;

            vmcategoryEdit.formData.products_new = vmcategoryEdit.tmpProduct;
            categorySvc.update(vmcategoryEdit.formData, vmcategoryEdit.id).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Danh mục',
                        message: 'Cập nhật danh mục thành công'
                    }
                });
                $state.go('categories', { parrentSlug: vmcategoryEdit.parrentCate.slug });
            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Danh mục',
                        message: error.data.message
                    }
                });
            });
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var categoryAddCtrl = (function () {
    'use strict';

    angular
        .module('bzCategory')
        .controller('categoryAddCtrl', categoryAddCtrl);

    function categoryAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc,
        NgTableParams, ngTableEventsChannel, bzResourceSvc, categorySvc, Upload, bzUtilsSvc) {
        /* jshint validthis: true */
        var vmcategoryAdd = this;
        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('category', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmcategoryAdd.lockFOrm = false;
        vmcategoryAdd.save = create;
        vmcategoryAdd.submitted = false;
        vmcategoryAdd.uploadImage = uploadImage;
        vmcategoryAdd.removeImage = removeImage;
        vmcategoryAdd.generatorSlug = generatorSlug;
        vmcategoryAdd.parrentCate = {};
        // vmcategoryAdd.onSelectCategoryParrent = onSelectCategoryParrent;
        vmcategoryAdd.imagesDirectory = settingJs.configs.uploadDirectory.category;

        vmcategoryAdd.listChildCategory = [[], [], [], []];
        vmcategoryAdd.showChildCategory = [false, false, false, false];

        // Init
        getData();

        // Method

        function getData() {
            categorySvc.add().then(function (resp) {
                vmcategoryAdd.categoryList = resp.categoryList;
                vmcategoryAdd.productsList = resp.productsList;

                vmcategoryAdd.formData = {
                    name: '',
                    slug: '',
                    description: '',
                    images: [],
                    parrent_id: $stateParams.parrentId,
                    top: [],
                    status: true
                };

                if (vmcategoryAdd.formData.parrent_id) {
                    getParrentCategory();
                }
            })
        }

        function getParrentCategory() {
            categorySvc.getById(vmcategoryAdd.formData.parrent_id).then(function (resp) {
                vmcategoryAdd.parrentCate = resp;


            }).catch(function (err) {
                console.log(err);
            })
        }

        function generatorSlug(text) {
            vmcategoryAdd.formData.slug = bzUtilsSvc.textToSlug(text);
        }

        function checkExistSlug(slug) {
            return categorySvc.get(slug);
        }

        // Init formData

        function sendData() {
            if (vmcategoryAdd.formData.parrent_id == "")
                vmcategoryAdd.formData.parrent_id = null;
            vmcategoryAdd.formData.products = vmcategoryAdd.tmpProduct;
            categorySvc.create(vmcategoryAdd.formData).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Danh mục',
                        message: 'Thêm danh mục thành công'
                    }
                });
                vmcategoryAdd.submitted = false;
                vmcategoryAdd.lockForm = false;
                // $state.go('categories', { parrentSlug: vmcategoryAdd.parrentCate.slug });
            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Danh mục',
                        message: 'Tên danh mục đã tồn tại'
                    }
                });
            });
        }

        function create(isValid) {
            vmcategoryAdd.submitted = true;
            vmcategoryAdd.lockForm = true;
            if (isValid) {
                checkExistSlug(vmcategoryAdd.formData.slug).then(function (resp) {
                    if (resp.status) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Không thể thêm',
                                message: 'Bạn dã nhập slug đang được sử dụng bởi danh mục khác!'
                            }
                        })
                    }
                    else {
                        sendData();
                    }

                }).catch(function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Không thể thêm',
                            message: err.data.message
                        }
                    })
                });
            }
            else {
                vmcategoryAdd.submitted = true;
            }
        };
        //Remove image uploaded
        function removeImage(index) {
            vmcategoryAdd.formData.images.splice(index, 1);
        };
        // Upload image
        function uploadImage(file) {
            if (vmcategoryAdd.formData.images.length >= 5) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmcategoryAdd.formData.images.length < 5) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'category_image',
                                prefix: 'category_image',
                            }
                        }).then(function (resp) {
                            vmcategoryAdd.formData.images.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var blogListCtrl = (function () {
	'use strict';

	angular
		.module('bzBlog')
		.controller('blogListCtrl', blogListCtrl);

	function blogListCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, blogSvc) {
		/* jshint validthis: true */
		var vmListBlog = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('blog', ['view'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmListBlog.loading = true;
		vmListBlog.selectedItems = [];
		vmListBlog.keyword = $stateParams.keyword;
		vmListBlog.queryParams = $stateParams;
		vmListBlog.imagesDirectory = settingJs.configs.uploadDirectory.blog;

		vmListBlog.userRoles = userRoles;
		vmListBlog.listBlog = [];
		vmListBlog.typeBlog = $stateParams.type || 'GB'; // defalt GB if param null
		vmListBlog.filter = filter;
		vmListBlog.filterReset = filterReset;
		vmListBlog.remove = remove;

		// Init
		getData();
		getListTag();

		// event
		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmListBlog.queryParams.page = vmListBlog.table.page();
			$state.go('.', $scope.vmListBlog.queryParams);
		}, $scope, vmListBlog.table);

		// Methods

		function getData() {
			//fix pagining
			bzResourceSvc.api($window.settings.services.admin + '/blog')
				.get(vmListBlog.queryParams, function (resp) {
					vmListBlog.queryParams.pageCount = resp.totalPage;
					vmListBlog.listBlog = resp.items;

					vmListBlog.table = new NgTableParams({ count: parseInt(vmListBlog.queryParams.limit) || 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmListBlog.listBlog;
						}
					});
					vmListBlog.table.page(vmListBlog.queryParams.page);
					vmListBlog.loading = false;
				});
		}

		function getListTag() {
			blogSvc.getTagsBlog().then(function (resp) {
				if (resp.success) {
					vmListBlog.listTag = resp.data;
				}
			});
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: vmListBlog.queryParams.keyword,
				page: vmListBlog.queryParams.page,
				tag: vmListBlog.queryParams.tag
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmListBlog.queryParams.page,
				tag: null
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		function remove(slug) {
			var selected = { ids: [slug] }; //id ? {ids: [id]} : getSelectedIds();
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/blog/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa vài viết thành công'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var blogEditCtrl = (function () {
    'use strict';

    angular
        .module('bzBlog')
        .controller('blogEditCtrl', blogEditCtrl);

    function blogEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc,
        NgTableParams, ngTableEventsChannel, bzResourceSvc, blogSvc, Upload, bzUtilsSvc, CKEditorOptBlog, bzUpload) {
        /* jshint validthis: true */
        var vmEditBlog = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('blog', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditBlog.lockFOrm = false;
        vmEditBlog.save = update;
        vmEditBlog.submitted = false;
        vmEditBlog.uploadImage = uploadImage;
        vmEditBlog.removeImage = removeImage;
        vmEditBlog.listImgDelete = [];
        vmEditBlog.generatorSlug = generatorSlug;
        vmEditBlog.imagesDirectory = settingJs.configs.uploadDirectory.blog;
        vmEditBlog.ckeOpt = CKEditorOptBlog;
        vmEditBlog.userCurrently = authSvc.getProfile();
        vmEditBlog.slug = $stateParams.slug;

        vmEditBlog.cropImage = cropImage;

        vmEditBlog.cancel = cancel;
        // Init
        getListBlog();
        getListTag();

        // Method
        function generatorSlug(text) {
            vmEditBlog.formData.slug = bzUtilsSvc.textToSlug(text);
        }

        function getListTag() {
            blogSvc.getTagsBlog().then(function (resp) {
                if (resp.success) {
                    vmEditBlog.listTag = resp.data;
                }
            });
        }

        function checkExistSlug(slug) {
            return blogSvc.get(slug);
        }

        function getListBlog() {
            bzResourceSvc.api($window.settings.services.admin + '/blog')
                .get({
                    limit: 100,
                    page: 1,
                    parrent_id: "*"
                }, function (resp) {
                    vmEditBlog.listBlog = resp.items;
                },
                function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lấy danh mục hiện có',
                            message: err
                        }
                    })
                });
        };

        // Init formData
        getData();

        // Method 
        function getData() {
            const slug = $stateParams.slug;
            blogSvc.get(slug).then(function (res) {
                vmEditBlog.formData = res;
                // console.log(res);
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Không thể tải bài viết',
                        message: err.data
                    }
                });
            });
        }
        function sendData() {
            vmEditBlog.formData.listImgDelete = vmEditBlog.listImgDelete;
            blogSvc.update(vmEditBlog.formData, vmEditBlog.slug).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Bài viết',
                        message: 'Cập nhật viết thành công'
                    }
                });
                if (resp.type == 'CS') // Chính sách
                    $state.go('blogsPolicy');
                if (resp.type == 'GB') // Góc bếp
                    $state.go('blogsPost');
                if (resp.type == 'MV') // Mẹo vặt
                    $state.go('blogsTip');
                if (resp.type == 'TT') // Tin tức
                    $state.go('blogsNews');
                else
                    $state.go('blogsBanner'); // Banner
            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Bài viết',
                        message: error.message
                    }
                });
            });
        }

        function update(isValid) {
            vmEditBlog.submitted = true;
            vmEditBlog.lockForm = true;
            if (isValid) {
                // slug was modified 
                if (vmEditBlog.formData.slug != $stateParams.slug) {
                    checkExistSlug(vmEditBlog.formData.slug).then(function (resp) {
                        if (resp.status) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Không thể cập nhật',
                                    message: 'Bạn đã nhập slug đang được sử dụng bởi bài viết khác!'
                                }
                            });
                        }
                        else {
                            sendData();
                        }
                    }).catch(function (error) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Không thể cập nhật',
                                message: error.message
                            }
                        });
                    });
                }
                else {
                    sendData();
                }
            }
            else {
                vmEditBlog.submitted = true;
            }
        };

        //Remove image uploaded
        function removeImage(index, fileName) {
            vmEditBlog.formData.featured_image.splice(index, 1);
            vmEditBlog.listImgDelete.push({
                url: vmEditBlog.imagesDirectory,
                fileName: fileName
            });
        };

        // Upload image
        function uploadImage(file) {
            if (vmEditBlog.formData.featured_image.length >= 5) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmEditBlog.formData.featured_image.length < 5) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'blog_image',
                                prefix: 'blog_image',
                            }
                        }).then(function (resp) {
                            vmEditBlog.formData.featured_image.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }

        function cropImage(key, url) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/cropper/view.html',
                controller: function ($scope, $uibModalInstance) {
                    var popupScope = this;
                    $scope.popupScope = {
                        image: vmEditBlog.imagesDirectory + url,
                        event: 'crop:image',
                        ratio: 407 / 305,
                        width: 407,
                        height: 305,
                        // mimeType : 'image/jpeg'
                    };
                    $scope.$on('crop:image', function (event, image) {
                        bzUpload.uploadBase64({ directory: 'blog_image', image: image.image }).then(function (resp) {
                            var old_image = url;
                            vmEditBlog.listImgDelete.push({
                                url: vmEditBlog.imagesDirectory,
                                fileName: url
                            });
                            vmEditBlog.formData.featured_image[key].url = resp.name;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Crop ảnh thành công'
                                }
                            });

                            $uibModalInstance.close();
                        }).catch(function (err) {
                            console.log('er', err);
                        });
                    });
                }
            });
        }

        function cancel() {
            if (vmEditBlog.formData.type == 'CS') // Policy
                $state.go('blogsPolicy');
            if (vmEditBlog.formData.type == 'GB') // Góc bếp
                $state.go('blogsPost');
            if (vmEditBlog.formData.type == 'MV') // Mẹo vặt
                $state.go('blogsTip');
            if (vmEditBlog.formData.type == 'TT') // Tin tức
                $state.go('blogsNews');
            else
                $state.go('blogsBanner'); // Banner
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var blogAddCtrl = (function () {
    'use strict';

    angular
        .module('bzBlog')
        .controller('blogAddCtrl', blogAddCtrl);

    function blogAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc,
        NgTableParams, ngTableEventsChannel, bzResourceSvc, blogSvc, Upload, bzUtilsSvc, CKEditorOptBlog, bzUpload) {
        /* jshint validthis: true */
        var vmBlogAdd = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('blog', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmBlogAdd.lockFOrm = false;
        vmBlogAdd.save = create;
        vmBlogAdd.submitted = false;
        vmBlogAdd.uploadImage = uploadImage;
        vmBlogAdd.removeImage = removeImage;
        vmBlogAdd.listImgDelete = [];
        vmBlogAdd.listTag = [];
        vmBlogAdd.generatorSlug = generatorSlug;
        vmBlogAdd.imagesDirectory = settingJs.configs.uploadDirectory.blog;
        vmBlogAdd.ckeOpt = CKEditorOptBlog;
        vmBlogAdd.userCurrently = authSvc.getProfile();
        vmBlogAdd.cropImage = cropImage;

        vmBlogAdd.cancel = cancel;
        // Init
        getListBlog();
        getListTag();


        // Method
        function generatorSlug(text) {
            vmBlogAdd.formData.slug = bzUtilsSvc.textToSlug(text);
        }

        function getListTag() {
            blogSvc.getTagsBlog($stateParams.type).then(function (resp) {
                if (resp.success) {
                    vmBlogAdd.listTag = resp.data;
                }
            });
        }

        function checkExistSlug(slug) {
            return blogSvc.get(slug);
        }

        function getListBlog() {
            bzResourceSvc.api($window.settings.services.admin + '/blog')
                .get({
                    limit: 100,
                    page: 1,
                    parrent_id: "*"
                }, function (resp) {
                    vmBlogAdd.listBlog = resp.items;
                },
                function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lấy danh mục hiện có',
                            message: err
                        }
                    })
                });
        };

        // Init formData
        vmBlogAdd.formData = {
            name: '',
            slug: '',
            type: $stateParams.type,
            meta_title: '',
            meta_keywords: '',
            meta_description: '',
            short_description: '',
            content: '',
            auth_id: vmBlogAdd.userCurrently.uid,
            featured_image: [],
            tags: [],
            status: true
        };

        function sendData() {
            vmBlogAdd.formData.listImgDelete = vmBlogAdd.listImgDelete;
            blogSvc.create(vmBlogAdd.formData).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Bài viết',
                        message: 'Thêm bài viết thành công'
                    }
                });
                if (resp.type == 'CS') // Chính sách
                    $state.go('blogsPolicy');
                if (resp.type == 'GB') // Góc bếp
                    $state.go('blogsPost');
                if (resp.type == 'MV') // Mẹo vặt
                    $state.go('blogsTip');
                if (resp.type == 'TT') // Tin tức
                    $state.go('blogsNews');
                else
                    $state.go('blogsBanner'); // Banner

            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Không thể thêm',
                        message: error.data.message
                    }
                });
            });
        }

        function create(isValid) {
            vmBlogAdd.submitted = true;
            vmBlogAdd.lockForm = true;
            if (isValid) {
                checkExistSlug(vmBlogAdd.formData.slug).then(function (resp) {
                    if (resp.slug == vmBlogAdd.formData.slug) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Không thể thêm',
                                message: 'Bạn dã nhập slug đang được sử dụng bởi danh mục khác!'
                            }
                        })
                    }
                    else {
                        sendData();
                    }
                }).catch(function (err) { // check by slug not found
                    sendData();
                });
            }
            else {
                vmBlogAdd.submitted = true;
            }
        };
        //Remove image uploaded
        function removeImage(index, fileName) {
            vmBlogAdd.formData.featured_image.splice(index, 1);
            vmBlogAdd.listImgDelete.push({
                url: vmBlogAdd.imagesDirectory,
                fileName: fileName
            });
        };

        // Upload image
        function uploadImage(file) {
            if (vmBlogAdd.formData.featured_image.length >= 5) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmBlogAdd.formData.featured_image.length < 5) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'blog_image',
                                prefix: 'blog_image',
                            }
                        }).then(function (resp) {
                            vmBlogAdd.formData.featured_image.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                            cropImage(vmBlogAdd.formData.featured_image.length - 1, vmBlogAdd.formData.featured_image[vmBlogAdd.formData.featured_image.length - 1].url);
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }

        function cropImage(key, url) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/cropper/view.html',
                controller: function ($scope, $uibModalInstance) {
                    var popupScope = this;
                    $scope.popupScope = {
                        image: vmBlogAdd.imagesDirectory + url,
                        event: 'crop:image',
                        ratio: 407 / 305,
                        width: 407,
                        height: 305,
                        // mimeType : 'image/jpeg'
                    };
                    $scope.$on('crop:image', function (event, image) {
                        bzUpload.uploadBase64({ directory: 'blog_image', image: image.image }).then(function (resp) {
                            var old_image = url;
                            vmBlogAdd.listImgDelete.push({
                                url: vmBlogAdd.imagesDirectory,
                                fileName: url
                            });
                            vmBlogAdd.formData.featured_image[key].url = resp.name;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Crop ảnh thành công'
                                }
                            });

                            $uibModalInstance.close();
                        }).catch(function (err) {
                            console.log('er', err);
                        });
                    });
                }
            });
        }

        function cancel() {
            if ($stateParams.type == 'CS') // Policy
                $state.go('blogsPolicy');
            if ($stateParams.type == 'GB') // Góc bếp
                $state.go('blogsPost');
            if ($stateParams.type == 'MV') // Mẹo vặt
                $state.go('blogsTip');
            if ($stateParams.type == 'TT') // Tin tức
                $state.go('blogsNews');
            else
                $state.go('blogsBanner'); // Banner
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var bannerListCtrl = (function () {
	'use strict';

	angular
		.module('bzBanner')
		.controller('bannerListCtrl', bannerListCtrl);

	function bannerListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, bannerSvc) {
		var vmBaL = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('banner', ['view'])))) {
			$state.go('error403');
		}
		vmBaL.showBtnAdd = authSvc.hasPermission('banner', 'add');
		vmBaL.showBtnEdit = authSvc.hasPermission('banner', ['add', 'edit']);
		vmBaL.showBtnDelete = authSvc.hasPermission('banner', 'delete');
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmBaL.loading = true;
		vmBaL.urlImg = settingJs.configs.uploadDirectory.banner;

		// Methods
		vmBaL.deleteBanner = deleteBanner;

		// Init
		getData();


		/*FUNCTION*/
		function getData() {
			bannerSvc.getAll({}).then(function (resp) {
				vmBaL.data = resp.data;
				vmBaL.table = new NgTableParams({},
					{
						counts: [],
						dataset: vmBaL.data
					});
				vmBaL.loading = false;
			})
		}

		function deleteBanner(id) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa banner này?';

					$scope.ok = function () {
						bannerSvc.del(id).then(function (resp) {
							if (resp.success) {
								$state.go('.', vmBaL.queryParams).then(function () {
									$state.reload();
									$uibModalInstance.close();

									$bzPopup.toastr({
										type: 'success',
										data: {
											title: 'Thành công!',
											message: 'Xóa banner thành công!'
										}
									});
								});
							}
						}, function (resp) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa banner thất bại!'
								}
							});
						});
					}
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var bannerHomeTopCtrl = (function () {
	'use strict';

	angular
		.module('bzBanner')
		.controller('bannerHomeTopCtrl', bannerHomeTopCtrl);

	function bannerHomeTopCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, bannerSvc, Upload) {
		var vmBaHT = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('banner', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmBaHT.loading = true;
		vmBaHT.urlImg = settingJs.configs.uploadDirectory.banner;
		vmBaHT.imgsDel = [];

		// Methods
		vmBaHT.uploadImage = uploadImage;
		vmBaHT.enableForm = enableForm;
		vmBaHT.showAddFrm = showAddFrm;
		vmBaHT.del = del;
		vmBaHT.create = create;
		vmBaHT.update = update;

		// Init
		getData();


		/*FUNCTION*/
		function getData() {
			bannerSvc.getAll({ page: 'home', position: 'top', type: 'slide' }).then(function (resp) {
				vmBaHT.banSliderList = resp.data;
				vmBaHT.banSliderAdd = initBanner('slide', 'banSliderAdd');
				vmBaHT.loading = false;
			});

			bannerSvc.getAll({ page: 'home', position: 'top', type: 'item' }).then(function (resp) {
				vmBaHT.banProList = resp.data;
				vmBaHT.banProAdd = initBanner('item', 'banProAdd');
				vmBaHT.loading = false;
			});
		}

		function initBanner(type, name) {
			var banner = {
				show_add: false,
				name: name,
				data: {
					page: 'home',
					position: 'top',
					type: type,
					order: 1,
					status: true,
					style: '1'
				}
			};
			return banner;
		}

		function enableForm(form) {
			form.$submitted = false;
		}

		function showAddFrm(banner) {
			banner.show_add = !banner.show_add;
			return;
		}

		function uploadImage(file, banner, form, update_banner) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg") {
					Upload.upload({
						url: $window.settings.services.uploadApi + '/upload/file',
						data: {
							file: file[0],
							type: 'banner_image',
							prefix: 'banner_image',
						}
					}).then(function (resp) {
						if (!banner.imgsDel) banner.imgsDel = [];
						if (banner.image) banner.imgsDel.push(banner.image);
						banner.image = resp.data.filename;
						form.$submitted = false;
						if (update_banner) {
							update(form, banner, banner._id);
						}
						else {
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công!',
									message: 'Upload ảnh thành công!'
								}
							});
						}
					}, function (resp) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Lỗi!',
								message: 'Upload ảnh Lỗi!'
							}
						});
					});
				}
				else {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Hình ảnh phải có định dạng png hoặc jpg!'
						}
					});
					return;
				}
			}
		}

		function create(form, banner, bannerList, type) {
			if (!banner.data.image) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng upload hình ảnh!'
					}
				});
				return;
			}
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			}
			bannerSvc.create({ data: banner.data }).then(function (resp) {
				bannerList.push(resp.data);
				vmBaHT[banner.name] = initBanner(type, banner.name);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Thêm banner thành công!'
					}
				}).catch(function (error) {
					form.$submitted = false;
					console.log(error);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Thêm banner thất bại. Hãy thử lại!'
						}
					});
				});;
			})
		}

		function update(form, banner, id) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			}
			bannerSvc.update({ data: banner }, id).then(function (resp) {
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Sửa banner thành công!'
					}
				}).catch(function (error) {
					form.$submitted = false;
					console.log(error);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Sửa banner thất bại. Hãy thử lại!'
						}
					});
				});
			})
		}

		function del(key, id, bannerList) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa banner này?';

					$scope.ok = function () {
						bannerSvc.del(id).then(function (resp) {
							if (resp.success) {
								$uibModalInstance.close();
								bannerList.splice(key, 1);

								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công!',
										message: 'Xóa banner thành công!'
									}
								});
							}
						}).catch(function (error) {
							form.$submitted = false;
							console.log(error);
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa banner thất bại. Hãy thử lại!'
								}
							});
						});
					}
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var bannerHomeBottomCtrl = (function () {
	'use strict';

	angular
		.module('bzBanner')
		.controller('bannerHomeBottomCtrl', bannerHomeBottomCtrl);

	function bannerHomeBottomCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, bannerSvc, Upload) {
		var vmBaHB = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('banner', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmBaHB.loading = true;
		vmBaHB.urlImg = settingJs.configs.uploadDirectory.banner;

		// Methods
		vmBaHB.uploadImage = uploadImage;
		vmBaHB.enableForm = enableForm;
		vmBaHB.showAddFrm = showAddFrm;
		vmBaHB.del = del;
		vmBaHB.create = create;
		vmBaHB.update = update;

		// Init
		getData();


		/*FUNCTION*/
		function getData() {
			bannerSvc.getAll({ page: 'home', position: 'bottom', type: 'item' }).then(function (resp) {
				vmBaHB.banList = resp.data;
				vmBaHB.banAdd = initBanner('item', 'banAdd');
				vmBaHB.loading = false;
			})
		}

		function initBanner(type, name) {
			var banner = {
				show_add: false,
				name: name,
				data: {
					page: 'home',
					position: 'bottom',
					type: type,
					order: 1,
					status: true,
					style: '1'
				}
			};
			return banner;
		}

		function enableForm(form) {
			form.$submitted = false;
		}

		function showAddFrm(banner) {
			banner.show_add = !banner.show_add;
			return;
		}

		function uploadImage(file, banner, form, update_banner) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg") {
					Upload.upload({
						url: $window.settings.services.uploadApi + '/upload/file',
						data: {
							file: file[0],
							type: 'banner_image',
							prefix: 'banner_image',
						}
					}).then(function (resp) {
						if (!banner.imgsDel) banner.imgsDel = [];
						if (banner.image) banner.imgsDel.push(banner.image);
						banner.image = resp.data.filename;
						form.$submitted = false;
						if (update_banner) {
							update(form, banner, banner._id);
						}
						else {
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công!',
									message: 'Upload ảnh thành công!'
								}
							});
						}
					}, function (resp) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Lỗi!',
								message: 'Upload ảnh Lỗi!'
							}
						});
					});
				}
				else {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Hình ảnh phải có định dạng png hoặc jpg!'
						}
					});
					return;
				}
			}
		}

		function create(form, banner, bannerList, type) {
			if (!banner.data.image) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng upload hình ảnh!'
					}
				});
				return;
			}
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			}
			bannerSvc.create({ data: banner.data }).then(function (resp) {
				bannerList.push(resp.data);
				vmBaHB[banner.name] = initBanner(type, banner.name);
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Thêm banner thành công!'
					}
				}).catch(function (error) {
					form.$submitted = false;
					console.log(error);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Thêm banner thất bại. Hãy thử lại!'
						}
					});
				});;
			})
		}

		function update(form, banner, id) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			}
			bannerSvc.update({ data: banner }, id).then(function (resp) {
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Sửa banner thành công!'
					}
				}).catch(function (error) {
					form.$submitted = false;
					console.log(error);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Sửa banner thất bại. Hãy thử lại!'
						}
					});
				});
			})
		}

		function del(key, id, bannerList) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa ';
					$scope.message = 'Bạn muốn xóa banner này?';

					$scope.ok = function () {
						bannerSvc.del(id).then(function (resp) {
							if (resp.success) {
								$uibModalInstance.close();
								bannerList.splice(key, 1);

								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Thành công!',
										message: 'Xóa banner thành công!'
									}
								});
							}
						}).catch(function (error) {
							form.$submitted = false;
							console.log(error);
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi!',
									message: 'Xóa banner thất bại. Hãy thử lại!'
								}
							});
						});
					}
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var bannerCategoryTopCtrl = (function () {
	'use strict';

	angular
		.module('bzBanner')
		.controller('bannerCategoryTopCtrl', bannerCategoryTopCtrl);

	function bannerCategoryTopCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, NgTableParams, ngTableEventsChannel, authSvc, bannerSvc, Upload) {
		var vmBaCT = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('banner', ['add', 'edit'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmBaCT.loading = true;
		vmBaCT.urlImg = settingJs.configs.uploadDirectory.banner;

		// Methods
		vmBaCT.uploadImage = uploadImage;
		vmBaCT.enableForm = enableForm;
		vmBaCT.showAddFrm = showAddFrm;
		// vmBaCT.del = del;
		vmBaCT.create = create;
		vmBaCT.update = update;

		// Init
		getData();


		/*FUNCTION*/
		function getData() {
			bannerSvc.getAll({ page: 'category', position: 'top', type: 'item' }).then(function (resp) {
				vmBaCT.listCategory = resp.catgegory;
				vmBaCT.banner = resp.data;
				vmBaCT.banList = initBanner('item', 'banAdd');
				vmBaCT.loading = false;
			})
		}

		function initBanner(type, name) {
			var banner_list = vmBaCT.listCategory.map(function (item) {
				var find_banner = vmBaCT.banner.find(function (banner) {
					return banner.category == item.slug;
				});
				return {
					banner: {
						name: name,
						data: find_banner ? find_banner : {
							category: item.slug,
							page: 'category',
							position: 'top',
							type: type,
							order: 1,
							status: true,
							style: '1'
						}
					},
					category: item
				}
			});
			return banner_list;
		}

		function enableForm(form) {
			form.$submitted = false;
		}

		function showAddFrm(banner) {
			banner.show_add = !banner.show_add;
			return;
		}

		function uploadImage(file, banner, form, update_banner) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg") {
					Upload.upload({
						url: $window.settings.services.uploadApi + '/upload/file',
						data: {
							file: file[0],
							type: 'banner_image',
							prefix: 'banner_image',
						}
					}).then(function (resp) {
						if (!banner.imgsDel) banner.imgsDel = [];
						if (banner.image) banner.imgsDel.push(banner.image);
						banner.image = resp.data.filename;
						form.$submitted = false;
						if (update_banner) {
							update(form, { data: banner }, banner._id);
						}
						else {
							$bzPopup.toastr({
								type: 'success',
								data: {
									title: 'Thành công!',
									message: 'Upload ảnh thành công!'
								}
							});
						}
					}, function (resp) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Lỗi!',
								message: 'Upload ảnh Lỗi!'
							}
						});
					});
				}
				else {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Hình ảnh phải có định dạng png hoặc jpg!'
						}
					});
					return;
				}
			}
		}

		function create(form, banner, bannerList, type) {
			if (!banner.data.image) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng upload hình ảnh!'
					}
				});
				return;
			}
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			}
			bannerSvc.create({ data: banner.data }).then(function (resp) {
				banner.data = resp.data;
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Thêm banner thành công!'
					}
				}).catch(function (error) {
					form.$submitted = false;
					console.log(error);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Thêm banner thất bại. Hãy thử lại!'
						}
					});
				});;
			})
		}

		function update(form, banner, id) {
			if (!form.$valid) {
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi!',
						message: 'Vui lòng điền đầy đủ thông tin!'
					}
				});
				return;
			}
			bannerSvc.update({ data: banner.data }, id).then(function (resp) {
				form.$submitted = false;
				$bzPopup.toastr({
					type: 'success',
					data: {
						title: 'Thành công!',
						message: 'Sửa banner thành công!'
					}
				}).catch(function (error) {
					form.$submitted = false;
					console.log(error);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Lỗi!',
							message: 'Sửa banner thất bại. Hãy thử lại!'
						}
					});
				});
			})
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var permissionListCtrl = (function () {
    'use strict';

    angular
        .module('bzPermission')
        .controller('permissionListCtrl', permissionListCtrl);

    function permissionListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, authSvc, permissionSvc, listAction, listResource) {
        var vmPermission = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Init
        getData();

        // Vars
        // vmPermission.loading = true;
        vmPermission.listAction = listAction;
        vmPermission.listResource = listResource;
        vmPermission.getData = getData;
        vmPermission.data = [];
        vmPermission.removeRole = removeRole;
        vmPermission.removeResource = removeResource;
        
        // Methods
        function getData() {
            permissionSvc.get().then(function (resp) {
                if (resp.success)
                    vmPermission.data = resp.data;
            }).catch(function (err) {
                console.log(err);
            });
        }

        function removeResource(role, resource) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/message/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn muốn xóa quyền ' + role + ' trên ' + resource + '?';
                    $scope.ok = function () {
                        permissionSvc.removeResource(role, resource).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: 'Deleted ' + resource + '\'s ' + role + '!'
                                }
                            });
                            $state.reload();
                            $uibModalInstance.close();

                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: err.message
                                }
                            });
                        });
                    };
                }
            });
        }
        function removeRole(role) {

            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/message/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn muốn xóa ' + role + '?';
                    $scope.ok = function () {
                        permissionSvc.removeRole(role).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: 'Deleted ' + role + '!'
                                }
                            });
                            $state.reload();
                            $uibModalInstance.close();

                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: err.message
                                }
                            });
                        });

                    };
                }
            });
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var permissionEditCtrl = (function () {
    'use strict';

    angular
        .module('bzPermission')
        .controller('permissionEditCtrl', permissionEditCtrl);

    function permissionEditCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, authSvc, permissionSvc, listAction, listResource, bzUtilsSvc) {
        var vmEditPermission = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditPermission.type = $stateParams.type;
        vmEditPermission.resource = $stateParams.resource;
        vmEditPermission.modEdit = $stateParams.mod;
        vmEditPermission.formData = {
            role: $stateParams.role,
            resource: []
        };


        // vmEditPermission.listRole = listRole;
        vmEditPermission.save = update;
        vmEditPermission.checkName = checkName;

        vmEditPermission.onChangePermission = onChangePermission;
        vmEditPermission.getResource = getResource;

        // Init
        // Methods
        function getResource() {
            permissionSvc.getResoureRole($stateParams.role).then(function (resp) {
                if (vmEditPermission.modEdit == 'add-resource') {
                    resp.data.forEach(function (val, index) {
                        // Xoá các resource role đã có hiện tại
                        if (listResource.indexOf(val.resource) != -1) {
                            listResource.splice(listResource.indexOf(val.resource), 1);
                        }
                    });
                }
                else {
                    vmEditPermission.formData.resource = [vmEditPermission.resource];
                    resp.data.forEach(function (val, index) {
                        if (val.resource == vmEditPermission.resource)
                            vmEditPermission.formData.permission = val.permissions;
                    });
                    if (vmEditPermission.formData.permission.indexOf('*') != -1)
                        vmEditPermission.fullPermission = true;
                }
                vmEditPermission.listPermission = listAction;
                vmEditPermission.listResource = listResource;
            }).catch(function (err) {

            })
        }
        function onChangePermission() {
            if (vmEditPermission.fullPermission) {
                vmEditPermission.formData.permission = Array.of('*');
            }
        }
        // Generator name like slug
        function checkName() {
            vmEditPermission.formData.role = bzUtilsSvc.textToSlug(vmEditPermission.formData.role);
        }

        function update(isValid) {
            vmEditPermission.submitted = true;
            vmEditPermission.lockForm = true;
            if (isValid) {
                if (vmEditPermission.formData.permission.indexOf('*') !== -1)
                    vmEditPermission.formData.permission = '*';

                if (vmEditPermission.modEdit == 'add-resource') {
                    permissionSvc.addResource(vmEditPermission.formData, vmEditPermission.formData.role).then(function (resp) {
                        // console.log('update', resp);
                        $bzPopup.toastr({
                            type: 'success',
                            data: {
                                title: 'Phân quyền',
                                message: resp.message
                            }
                        });
                        $state.go('permission');
                    }).catch(function (error) {
                        // console.log('update', error);

                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Phân quyền',
                                message: error.data.message
                            }
                        });
                    });
                }
                if (vmEditPermission.modEdit == 'edit-permission') {
                    permissionSvc.update(vmEditPermission.formData, vmEditPermission.formData.role, vmEditPermission.formData.resource).then(function (resp) {
                        // console.log('update', resp);
                        $bzPopup.toastr({
                            type: 'success',
                            data: {
                                title: 'Phân quyền',
                                message: resp.message
                            }
                        });
                        $state.go('permission');
                    }).catch(function (error) {
                        // console.log('update', error);

                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Phân quyền',
                                message: error.data.message
                            }
                        });
                    });
                }
            }
            else {
                vmEditPermission.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var permissionAddCtrl = (function () {
    'use strict';

    angular
        .module('bzPermission')
        .controller('permissionAddCtrl', permissionAddCtrl);

    function permissionAddCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, authSvc, permissionSvc, listAction, listResource, bzUtilsSvc) {
        var vmAddPermission = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddPermission.formData = {
            role: '',
            resource: [],
            permission: []
        };
        vmAddPermission.fullPermission = false;

        vmAddPermission.listPermission = listAction;
        vmAddPermission.listResource = listResource;
        // vmAddPermission.listRole = listRole;
        vmAddPermission.save = create;
        vmAddPermission.checkName = checkName;
        vmAddPermission.onChangePermission = onChangePermission;

        // Methods

        function onChangePermission() {
            if (vmAddPermission.fullPermission) {
                vmAddPermission.formData.permission = Array.of('*');
            }
        }
        // Generator name like slug
        function checkName() {
            vmAddPermission.formData.role = bzUtilsSvc.textToSlug(vmAddPermission.formData.role);
        }

        function isExitsRole(roleName, callback) {
            let isExit = false;
            permissionSvc.get().then(function (resp) {
                if (resp.success)
                    resp.data.forEach(function (val, index) {
                        if (val.role == roleName)
                            isExit = true;
                    })
                callback(isExit);
            }).catch(function (err) {
                callback(isExit);
            });
        }

        function create(isValid) {
            vmAddPermission.submitted = true;
            vmAddPermission.lockForm = true;
            if (isValid) {
                if (vmAddPermission.formData.permission.indexOf('*') !== -1)
                    vmAddPermission.formData.permission = ['*'];
                isExitsRole(vmAddPermission.formData.role, function (isExits) {
                    if (isExits) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Phân quyền',
                                message: 'Tên quyền đã tồn tại!'
                            }
                        });
                    }
                    else {
                        permissionSvc.create(vmAddPermission.formData).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Phân quyền',
                                    message: resp.message
                                }
                            });
                            $state.go('permission');
                        }).catch(function (error) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Phân quyền',
                                    message: error.message
                                }
                            });
                        });
                    }

                })
            }
            else {
                vmAddPermission.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
;(function(){
	'use strict';

	angular
	.module('bzAuth')
	.controller('authCtrl', authCtrl);

	function authCtrl($rootScope, $scope, $state, $window, $bzPopup, authSvc){
		var auth = this;

		// Methods
		auth.siteLogin = siteLogin;
		auth.loginFacebook = loginFacebook;

		// Init
		initFormData();

		function initFormData(){
			auth.lockForm = false;
			auth.submitted = false;
			auth.formData = {
				phone: '',
				password: ''
			};
		}

		function siteLogin(isValid){
			auth.submitted = true;

			if(!auth.lockForm && isValid){
				auth.lockForm = true;
				$scope.pageMethods.authSvc.siteLogin(auth.formData, function(resp){
					$window.location.href = settingJs.configs.adminUrl;
					auth.lockForm = false;
				}, function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: 'Login',
							message: err.data.message
						}
					});

					auth.lockForm = false;
				});
			}
		}

		function loginFacebook(){
			authSvc.getFacebook().then(function(user){
				if(!user.error){
					social('facebook', user);
					auth.lockForm = true;
					$scope.pageMethods.authSvc.facebookLogin(user, function(resp){
						$window.location.href = '/';
						auth.lockForm = false;
					}, function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Login',
								message: err.data.message
							}
						});
						auth.lockForm = false;
					});
				}else{
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: 'Login',
							message: '' + user.error
						}
					});
					auth.lockForm = false;
				}
			});
		}

		function social(type, user){
			$scope.social = {
				type: type,
				id: user.id,
				name: user.name,
				email: user.email,
				profile_picture:user.picture+'?sz=200'
			};
			if(type == 'facebook'){
				$scope.social.profile_picture = 'https://graph.facebook.com/v2.5/'+user.id+'/picture?width=200&height=200';
			}
			/*Thao tác tại đây*/
		}
	}
})();
; (function () {
    'use strict';

    Application.registerRouter({
        state: 'user-shipping',
        config: {
            url: '/user-shipping/{id}',
            data: {
                title: 'UserShipping',
                menuType: 'user-shipping'
            },
            templateUrl: 'modules/admin-user/view/client/user-shipping/view.html',
            controller: 'userShippingCtrl',
            controllerAs: 'vmUserShipping',
            resolve: userShippingCtrl.resolve
        }
    });
})();
; (function () {
	'use strict';

	Application.registerRouter({
		state: 'users',
		config: {
			url: '/users?page&limit&sort&role&id&keyword&status&deletedAt',
			data: {
				title: 'Users',
				menuType: 'user'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
			},
			templateUrl: 'modules/admin-user/view/client/list-user/view.html',
			controller: 'usersCtrl',
			controllerAs: 'vmUsers',
			resolve: usersCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'usersDeleted',
		config: {
			url: '/users-deleted?page&limit&sort&role&id&keyword&status&deletedAt',
			data: {
				title: 'Users deleted',
				menuType: 'user-deleted'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				deletedAt: 'true'
			},
			templateUrl: 'modules/admin-user/view/client/list-user/view.html',
			controller: 'usersCtrl',
			controllerAs: 'vmUsers',
			resolve: usersCtrl.resolve
		}
	});

})();

;(function(){
	'use strict';

	// Application.registerRouter({
	// 	state: 'user-edit-profile',
	// 	config: {
	// 		url: '/user-edit-profile',
	// 		data: {
	// 			title: 'Sửa Profile',
	// 			menuType: 'user-edit-profile'
	// 		},
	// 		params: {
	// 		},
	// 		templateUrl: 'modules/admin-user/view/client/edit-profile/view.html',
	// 		controller: 'userEditProfileCtrl',
	// 		controllerAs: 'mvUEP',
	// 		resolve: userEditProfileCtrl.resolve
	// 	}
	// });
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'user-edit',
		config: {
			url: '/user-edit?module&page&filter&limit&cateid&sortfield&sortdir&publish&id&keyword',
			data: {
				title: 'Bài viết',
				menuType: 'user'
			},
			params: {
				page: '1',
				sortfield: 'createdAt',
				sortdir: 'desc',
				limit: '10'
			},
			templateUrl: 'modules/admin-user/view/client/edit/view.html',
			controller: 'userEditCtrl',
			controllerAs: 'userEdit',
			resolve: userEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'units',
		config: {
			url: '/units?page&limit&sort&role&id&keyword',
			data: {
				title: 'Unit',
				menuType: 'unit'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '20'
			},
			templateUrl: 'modules/admin-unit/view/client/list-unit/view.html',
			controller: 'unitsCtrl',
			controllerAs: 'vmUnits',
			// resolve: unitsCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editUnit',
		config: {
			url: '/units/edit/{id}',
			data: {
				title: 'Edit Unit',
				menuType: 'unit'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-unit/view/client/edit-unit/view.html',
			controller: 'unitEditCtrl',
			controllerAs: 'vmEditUnits',
			// resolve: unitsCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createUnit',
		config: {
			url: '/units/add',
			data: {
				title: 'Create new Unit',
				menuType: 'unit'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-unit/view/client/add-unit/view.html',
			controller: 'unitAddCtrl',
			controllerAs: 'vmAddUnits',
			// resolve: unitsCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'test-resize-img',
		config: {
			url: '/test/resize-img',
			data: {
				title: 'test resize',
				menuType: 'test-resize'
			},
			templateUrl: 'modules/admin-test/view/client/test-resize/view.html',
			controller: 'testResizeCtrl',
			controllerAs: 'vmTestResize',
			resolve: testResizeCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'suppliers',
		config: {
			url: '/suppliers?page&limit&sort&role&id&keyword',
			data: {
				title: 'Suppliers',
				menuType: 'supplier'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-supplier/view/client/list-supplier/view-list.html',
			controller: 'supplierListCtrl',
			controllerAs: 'vmListSupplier',
			resolve: supplierListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'importProductHistory',
		config: {
			url: '/suppliers/history-import-product/{id}?page&limit',
			data: {
				title: 'Import Product History',
				menuType: 'supplier'
			},
			params: {
				page: '1',
				// sort: '-created',
				limit: '10'
			},
			templateUrl: 'modules/admin-supplier/view/client/import-product-history/view.html',
			controller: 'supplierImportProductHistoryCtrl',
			controllerAs: 'vmSupplierImportProductHistory',
			// resolve: supplierImportProductHistoryCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editSupplier',
		config: {
			url: '/suppliers/edit/{id}',
			data: {
				title: 'Update info Supplier',
				menuType: 'supplier'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-supplier/view/client/edit-supplier/view-edit.html',
			controller: 'supplierEditCtrl',
			controllerAs: 'vmsupplierEdit',
			// resolve: suppliersCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createSupplier',
		config: {
			url: '/suppliers/add',
			data: {
				title: 'Create new Supplier',
				menuType: 'supplier'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-supplier/view/client/add-supplier/view-add.html',
			controller: 'supplierAddCtrl',
			controllerAs: 'vmsupplierAdd',
			// resolve: suppliersCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'tag-product',
		config: {
			url: '/tag-product?type&tag&expire',
			data: {
				title: 'Tag',
				menuType: 'tag-product'
			},
			params: {
				type: 'SP'
			},
			templateUrl: 'modules/admin-tag/view/client/tag-product/view.html',
			controller: 'tagProductCtrl',
			controllerAs: 'vmTagProduct',
			// resolve: tagCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'tag-processing',
		config: {
			url: '/tag-processing?type',
			data: {
				title: 'Tag',
				menuType: 'tag-processing'
			},
			params: {
				type: 'CN'
			},
			templateUrl: 'modules/admin-tag/view/client/tag-processing/view.html',
			controller: 'tagProcesssingCtrl',
			controllerAs: 'vmTagProcessing',
			// resolve: tagCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'tag-list',
		config: {
			url: '/tag-list?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Tag',
				menuType: 'tag'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-tag/view/client/list-tag/view.html',
			controller: 'tagCtrl',
			controllerAs: 'vmTags',
			// resolve: tagCtrl.resolve
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'tag-edit',
        config: {
            url: '/tag-edit/{id}',
            data: {
                title: 'Tag',
                menuType: 'tag'
            },
            templateUrl: 'modules/admin-tag/view/client/edit-tag/view.html',
            controller: 'tagEditCtrl',
            controllerAs: 'vmEditTags',
            // resolve: tagCtrl.resolve
        }
    });
})();
; (function () {
    'use strict';

    Application.registerRouter({
        state: 'tag-create',
        config: {
            url: '/tag-create',
            data: {
                title: 'Tag',
                menuType: 'tag'
            },
            templateUrl: 'modules/admin-tag/view/client/create-tag/view.html',
            controller: 'tagAddCtrl',
            controllerAs: 'vmAddTags',
            // resolve: tagCtrl.resolve
        }
    });
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'shippingfee-list',
		config: {
			url: '/shippingfee-list?page&limit&sort&role&id&keyword',
			data: {
				title: 'ShippingFee',
				menuType: 'shippingfee'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-shippingfee/view/client/list-shippingfee/view.html',
			controller: 'shippingfeeCtrl',
			controllerAs: 'vmShippingFees',
			// resolve: shippingfeeCtrl.resolve
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'shippingfee-edit',
        config: {
            url: '/shippingfee-edit/{id}',
            data: {
                title: 'ShippingFee',
                menuType: 'shippingfee'
            },
            templateUrl: 'modules/admin-shippingfee/view/client/edit-shippingfee/view.html',
            controller: 'shippingfeeEditCtrl',
            controllerAs: 'vmEditShippingFees',
            // resolve: shippingfeeCtrl.resolve
        }
    });
})();
; (function () {
    'use strict';

    Application.registerRouter({
        state: 'shippingfee-create',
        config: {
            url: '/shippingfee-create',
            data: {
                title: 'ShippingFee',
                menuType: 'shippingfee'
            },
            templateUrl: 'modules/admin-shippingfee/view/client/create-shippingfee/view.html',
            controller: 'shippingfeeAddCtrl',
            controllerAs: 'vmAddShippingFees',
            // resolve: shippingfeeCtrl.resolve
        }
    });
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'search-list',
		config: {
			url: '/search?page&limit',
			data: {
				title: 'Search',
				menuType: 'search'
			},
			params: {
				page: '1',
				limit: '20'
			},
			templateUrl: 'modules/admin-search/view/client/list-search/view.html',
			controller: 'searchListCtrl',
			controllerAs: 'vmSeL',
			resolve: searchListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'search-edit',
		config: {
			url: '/search-edit/{id}',
			data: {
				title: 'Search',
				menuType: 'search'
			},
			templateUrl: 'modules/admin-search/view/client/edit-search/view.html',
			controller: 'searchEditCtrl',
			controllerAs: 'vmSeE',
			resolve: searchEditCtrl.resolve
		}
	});
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'search-add',
		config: {
			url: '/search-add',
			data: {
				title: 'Search',
				menuType: 'search'
			},
			templateUrl: 'modules/admin-search/view/client/add-search/view.html',
			controller: 'searchAddCtrl',
			controllerAs: 'vmSeA',
			resolve: searchAddCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'report-product-order',
		config: {
			url: '/report-product-order?page&limit&name&status&active&category&tag&dueDate&date&qty_in_stock&total_order',
			data: {
				title: 'Report Product Order',
				menuType: 'report-product-order'
			},
			params: {
				page: '1',
				limit: '10',
			},
			templateUrl: 'modules/admin-report/view/client/list-report-product-order/view.html',
			controller: 'reportProductOrderCtrl',
			controllerAs: 'vmRPO',
			resolve: reportProductOrderCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'report-product-a-day',
		config: {
			url: '/report-product-a-day?page&limit&name&status&active&category&tag&dueDate',
			data: {
				title: 'Report Product A Day',
				menuType: 'report-product-a-day'
			},
			params: {
				page: '1',
				limit: '10',
			},
			templateUrl: 'modules/admin-report/view/client/list-report-product-a-day/view.html',
			controller: 'reportProductADayCtrl',
			controllerAs: 'vmRPA',
			resolve: reportProductADayCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'promotion-list',
		config: {
			url: '/promotion?page&limit',
			data: {
				title: 'Promotion',
				menuType: 'promotion'
			},
			params: {
				page: '1',
				limit: '20'
			},
			templateUrl: 'modules/admin-promotion/view/client/list-promotion/view.html',
			controller: 'promotionListCtrl',
			controllerAs: 'vmPoL',
			resolve: promotionListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'promotion-edit',
		config: {
			url: '/promotion-edit/{id}',
			data: {
				title: 'promotion',
				menuType: 'promotion'
			},
			templateUrl: 'modules/admin-promotion/view/client/edit-promotion/view.html',
			controller: 'promotionEditCtrl',
			controllerAs: 'vmPoE',
			resolve: promotionEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'promotion-add',
		config: {
			url: '/promotion-add',
			data: {
				title: 'promotion',
				menuType: 'promotion'
			},
			templateUrl: 'modules/admin-promotion/view/client/add-promotion/view.html',
			controller: 'promotionAddCtrl',
			controllerAs: 'vmPoA',
			resolve: promotionAddCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'product',
		config: {
			url: '/product?page&limit&name&status&active&category&tag&dueDate',
			data: {
				title: 'Product',
				menuType: 'product'
			},
			params: {
				page: '1',
				limit: '10',
			},
			templateUrl: 'modules/admin-product/view/client/list-product/view.html',
			controller: 'productListCtrl',
			controllerAs: 'vmPrL',
			resolve: productListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'product-edit',
		config: {
			url: '/product-edit/{id}',
			data: {
				title: 'Product',
				menuType: 'product'
			},
			templateUrl: 'modules/admin-product/view/client/edit-product/view.html',
			controller: 'productEditCtrl',
			controllerAs: 'vmPrE',
			resolve: productEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'product-add',
		config: {
			url: '/product-add',
			data: {
				title: 'Product',
				menuType: 'product'
			},
			templateUrl: 'modules/admin-product/view/client/add-product/view.html',
			controller: 'productAddCtrl',
			controllerAs: 'vmPrA',
			resolve: productAddCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'order-report',
		config: {
			url: '/order-report?page&limit&customer_name&coupon&date&status&type&user&user_id&min_order&max_order',
			data: {
				title: 'Report order',
				menuType: 'order-report'
			},
			params: {
				page: '1',
				limit: '50'
			},
			templateUrl: 'modules/admin-order/view/client/report-order/view.html',
			controller: 'orderReportCtrl',
			controllerAs: 'vmOrR',
			resolve: orderReportCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'order-list',
		config: {
			url: '/order?page&limit&customer_name&coupon&date&status&type&user&user_id&min_order&max_order&export&coupon_order',
			data: {
				title: 'Order list',
				menuType: 'order'
			},
			params: {
				page: '1',
				limit: '50'
			},
			templateUrl: 'modules/admin-order/view/client/list-order/view.html',
			controller: 'orderListCtrl',
			controllerAs: 'vmOrL',
			resolve: orderListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'order-edit',
		config: {
			url: '/order/{id}',
			data: {
				title: 'Order edit',
				menuType: 'order'
			},
			templateUrl: 'modules/admin-order/view/client/edit-order/view.html',
			controller: 'orderEditCtrl',
			controllerAs: 'vmOrE',
			resolve: orderEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'order-add',
		config: {
			url: '/order-add',
			data: {
				title: 'Order add',
				menuType: 'order'
			},
			params: {
				page: '1',
				limit: '10'
			},
			templateUrl: 'modules/admin-order/view/client/add-order/view.html',
			controller: 'orderAddCtrl',
			controllerAs: 'vmOrA',
			resolve: orderAddCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'logs',
		config: {
			url: '/log?page&limit&action&label&actor&date',
			data: {
				title: 'System log',
				menuType: 'log'
			},
            params: {
				page: '1',
				limit: '20'
			},
			templateUrl: 'modules/admin-log/view/client/list/log-list.html',
			controller: 'auditLogCtrl',
			controllerAs: 'vmLog',
			resolve: auditLogCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'import-product',
		config: {
			url: '/import-product?page&limit&slug&product&date',
			data: {
				title: 'Import Product',
				menuType: 'import-product'
			},
            params: {
				page: '1',
				limit: '20'
			},
			templateUrl: 'modules/admin-import-product/view/client/list-import-product/view.html',
			controller: 'importProductListCtrl',
			controllerAs: 'vmIPr',
			resolve: importProductListCtrl.resolve
		}
	});
})();

// ;(function(){
// 	'use strict';

// 	Application.registerRouter({
// 		state: 'import-product-edit',
// 		config: {
// 			url: '/import-product/{id}',
// 			data: {
// 				title: 'Import Product',
// 				menuType: 'import-product'
// 			},
//             params: {
// 				page: '1',
// 				limit: '20'
// 			},
// 			templateUrl: 'modules/admin-import-product/view/client/edit-import-product/view.html',
// 			controller: 'importProductEditCtrl',
// 			controllerAs: 'vmIPrE',
// 			resolve: importProductEditCtrl.resolve
// 		}
// 	});
// })();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'import-product-add',
		config: {
			url: '/import-product-add',
			data: {
				title: 'Import Product',
				menuType: 'import-product'
			},
			templateUrl: 'modules/admin-import-product/view/client/add-import-product/view.html',
			controller: 'importProductCtrl',
			controllerAs: 'vmIPr',
			resolve: importProductCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'coupon-list',
		config: {
			url: '/coupon-list?page&limit&sort&role&id&keyword',
			data: {
				title: 'Coupon',
				menuType: 'coupon'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '20'
			},
			templateUrl: 'modules/admin-coupon/view/client/list-coupon/view.html',
			controller: 'couponCtrl',
			controllerAs: 'vmCoupons',
			// resolve: couponCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'coupon-group',
		config: {
			url: '/coupon-group?page&limit&sort&role&id&keyword',
			data: {
				title: 'Coupon',
				menuType: 'coupon-group'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '20'
			},
			templateUrl: 'modules/admin-coupon/view/client/group-list-coupon/view.html',
			controller: 'couponGroupCtrl',
			controllerAs: 'vmCPG',
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'coupon-edit',
        config: {
            url: '/coupon-edit/{id}',
            data: {
                title: 'Coupon',
                menuType: 'coupon'
            },
            templateUrl: 'modules/admin-coupon/view/client/edit-coupon/view.html',
            controller: 'couponEditCtrl',
            controllerAs: 'vmEditCoupons',
            // resolve: couponCtrl.resolve
        }
    });
})();
; (function () {
    'use strict';

    Application.registerRouter({
        state: 'coupon-create',
        config: {
            url: '/coupon-create?type',
            data: {
                title: 'Coupon',
                menuType: 'coupon'
            },
            templateUrl: 'modules/admin-coupon/view/client/create-coupon/view.html',
            controller: 'couponAddCtrl',
            controllerAs: 'vmAddCoupons',
            // resolve: couponCtrl.resolve
        }
    });
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'configs',
		config: {
			url: '/configs?page&limit&sort&role&id&keyword',
			data: {
				title: 'Configs',
				menuType: 'config'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-config/view/client/list/view.html',
			controller: 'configListCtrl',
			controllerAs: 'vmListConfig',
			resolve: configListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editConfig',
		config: {
			url: '/config/edit/{id}',
			data: {
				title: 'Edit Config',
				menuType: 'config'
			},
			params: {
			},
			templateUrl: 'modules/admin-config/view/client/edit/view.html',
			controller: 'configEditCtrl',
			controllerAs: 'vmEditConfig',
			// resolve: configEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createConfig',
		config: {
			url: '/configs/add',
			data: {
				title: 'Create new Config',
				menuType: 'config'
			},
			params: {
			},
			templateUrl: 'modules/admin-config/view/client/add/view.html',
			controller: 'configAddCtrl',
			controllerAs: 'vmAddConfigs'
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'certificate-list',
		config: {
			url: '/certificate-list?page&limit&sort&role&id&keyword',
			data: {
				title: 'Certificate',
				menuType: 'certificate'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '20'
			},
			templateUrl: 'modules/admin-certificate/view/client/list-certificate/view.html',
			controller: 'certificateCtrl',
			controllerAs: 'vmCertificates',
			// resolve: certificateCtrl.resolve
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'certificate-edit',
        config: {
            url: '/certificate-edit/{id}',
            data: {
                title: 'Certificate',
                menuType: 'certificate'
            },
            templateUrl: 'modules/admin-certificate/view/client/edit-certificate/view.html',
            controller: 'certificateEditCtrl',
            controllerAs: 'vmEditCertificates',
            // resolve: certificateCtrl.resolve
        }
    });
})();
; (function () {
    'use strict';

    Application.registerRouter({
        state: 'certificate-create',
        config: {
            url: '/certificate-create',
            data: {
                title: 'Certificate',
                menuType: 'certificate'
            },
            templateUrl: 'modules/admin-certificate/view/client/create-certificate/view.html',
            controller: 'certificateAddCtrl',
            controllerAs: 'vmAddCertificates',
            // resolve: certificateCtrl.resolve
        }
    });
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'certificate-product',
		config: {
			url: '/certificate-product/{id}?page&limit&sort&role&keyword',
			data: {
				title: 'Certificate',
				menuType: 'certificate'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-certificate/view/client/certificate-product/view.html',
			controller: 'certificateProductCtrl',
			controllerAs: 'vmCertificateProduct',
			// resolve: certificateProductCtrl.resolve
		}
	});
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'categories',
		config: {
			url: '/categories/{parrentSlug}?page&limit&sort&role&id&keyword',
			data: {
				title: 'Categories',
				menuType: 'category'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-category/view/client/list-category/view-list.html',
			controller: 'categoryListCtrl',
			controllerAs: 'vmListCategory',
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editCategory',
		config: {
			url: '/category/edit/{slug}',
			data: {
				title: 'Edit new Category',
				menuType: 'category'
			},
			params: {
				// page: '1',
				// sort: '-editd',
				// limit: '10'
			},
			templateUrl: 'modules/admin-category/view/client/edit-category/view-edit.html',
			controller: 'categoryEditCtrl',
			controllerAs: 'vmcategoryEdit',
			// resolve: categoryCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createCategory',
		config: {
			url: '/category/add/{parrentId}',
			data: {
				title: 'Create new Category',
				menuType: 'category'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-category/view/client/add-category/view-add.html',
			controller: 'categoryAddCtrl',
			controllerAs: 'vmcategoryAdd',
			resolve: categoryAddCtrl.resolve
		}
	});
})();

; (function () {
	'use strict';

	Application.registerRouter({
		state: 'blogsPost',
		config: {
			url: '/blog-post?page&limit&sort&role&id&keyword&type&tag',
			data: {
				title: 'Blogs Post',
				menuType: 'blog-post'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'GB'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-post.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsPolicy',
		config: {
			url: '/blogs-policy?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Policy',
				menuType: 'blog-policy'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'CS'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-policy.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsBanner',
		config: {
			url: '/blogs-banner?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Banner',
				menuType: 'blog-banner'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'BN'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-banner.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsTip',
		config: {
			url: '/blogs-tip?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Tips',
				menuType: 'blog-tip'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'MV'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-tip.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsNews',
		config: {
			url: '/blogs-new?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Tips',
				menuType: 'blog-tip'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'TT'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-news.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editPost',
		config: {
			url: '/blog/edit/{slug}',
			data: {
				title: 'Edit Post',
				menuType: 'blog-post'
			},
			params: {
			},
			templateUrl: 'modules/admin-blog/view/client/edit/view.html',
			controller: 'blogEditCtrl',
			controllerAs: 'vmEditBlog',
			// resolve: blogEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createPost',
		config: {
			url: '/blog/add?type',
			data: {
				title: 'Create new Post',
				menuType: 'blog-post'
			},
			params: {
				type: 'GB',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-blog/view/client/add/view.html',
			controller: 'blogAddCtrl',
			controllerAs: 'vmBlogAdd',
			// resolve: blogCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'banner-list',
		config: {
			url: '/banner',
			data: {
				title: 'banner',
				menuType: 'banner'
			},
			params: {
			},
			templateUrl: 'modules/admin-banner/view/client/list-banner/view.html',
			controller: 'bannerListCtrl',
			controllerAs: 'vmBaL',
			resolve: bannerListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'banner-home-top',
		config: {
			url: '/banner-home-top',
			data: {
				title: 'banner',
				menuType: 'banner'
			},
			params: {
			},
			templateUrl: 'modules/admin-banner/view/client/home-top-banner/view.html',
			controller: 'bannerHomeTopCtrl',
			controllerAs: 'vmBaHT',
			resolve: bannerHomeTopCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'banner-home-bottom',
		config: {
			url: '/banner-home-bottom',
			data: {
				title: 'banner',
				menuType: 'banner'
			},
			params: {
			},
			templateUrl: 'modules/admin-banner/view/client/home-bottom-banner/view.html',
			controller: 'bannerHomeBottomCtrl',
			controllerAs: 'vmBaHB',
			resolve: bannerHomeBottomCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'banner-category-top',
		config: {
			url: '/banner-category-top',
			data: {
				title: 'banner',
				menuType: 'banner'
			},
			params: {
			},
			templateUrl: 'modules/admin-banner/view/client/category-top-banner/view.html',
			controller: 'bannerCategoryTopCtrl',
			controllerAs: 'vmBaCT',
			resolve: bannerCategoryTopCtrl.resolve
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'permission',
        config: {
            url: '/permission',
            data: {
                title: 'Permission',
                menuType: 'permission'
            },
            params: {
            },
            templateUrl: 'modules/admin-acl/view/client/list/view.html',
            controller: 'permissionListCtrl',
            controllerAs: 'vmPermission',
            resolve: permissionListCtrl.resolve
        }
    });
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'editPermission',
        config: {
            url: '/permission/edit/{mod}/{role}/{resource}',
            data: {
                title: 'Edit Permission',
                menuType: 'permission'
            },
            params: {
            },
            templateUrl: 'modules/admin-acl/view/client/edit/view.html',
            controller: 'permissionEditCtrl',
            controllerAs: 'vmEditPermission',
            resolve: permissionListCtrl.resolve
        }
    });
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'add-permission',
        config: {
            url: '/permission/add',
            data: {
                title: 'Add permission',
                menuType: 'permission'
            },
            params: {
            },
            templateUrl: 'modules/admin-acl/view/client/add/view.html',
            controller: 'permissionAddCtrl',
            controllerAs: 'vmAddPermission',
            resolve: permissionAddCtrl.resolve
        }
    });
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'dashboard',
		config: {
			url: '/',
			data: {
				title: 'Dashboard',
				menuType: 'dashboard'
			},
			params: {
			},
			templateUrl: 'modules/admin-dashboard/view/client/view.html',
			controller: 'dashboardCtrl',
			controllerAs: 'vmDashboard',
			resolve: dashboardCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'error404',
		config: {
			url: '/error404',
			data: {
				title: 'Error 404',
				menuType: 'error404'
			},
			templateUrl: 'modules/admin-core/view/client/error/404.html',
		}
	});

	Application.registerRouter({
		state: 'error403',
		config: {
			url: '/error403',
			data: {
				title: 'Error 403',
				menuType: 'error403'
			},
			templateUrl: 'modules/admin-core/view/client/error/403.html',
		}
	});
})();