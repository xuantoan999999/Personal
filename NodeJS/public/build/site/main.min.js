var languageJs = (function(){
	return {
		vi:{
			MESSAGE: 'Thông báo!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm.',

			MENU_HOME: 'Trang chủ',
			MENU_ABOUT: 'Giới thiệu',
			MENU_CONTACT: 'Liên hệ',
			MENU_LANGUAGE: 'Ngôn ngữ',

			DT_SUNDAY: 'Cn',
			DT_MONDAY: 'Hai',
			DT_TUESDAY: 'Ba',
			DT_WEDNESDAY: 'Tư',
			DT_THURSDAY: 'Năm',
			DT_FRIDAY: 'Sáu',
			DT_SATURDAY: 'Bảy',

			DT_JANUARY: 'Tháng 1',
			DT_FEBRUARY: 'Tháng 2',
			DT_MARCH: 'Tháng 3',
			DT_APRIL: 'Tháng 4',
			DT_MAY: 'Tháng 5',
			DT_JUNE: 'Tháng 6',
			DT_JULY: 'Tháng 7',
			DT_AUGUST: 'Tháng 8',
			DT_SEPTEMBER: 'Tháng 9',
			DT_OCTOBER: 'Tháng 10',
			DT_NOVEMBER: 'Tháng 11',
			DT_DECEMBER: 'Tháng 12'
		},
		en:{
			MESSAGE: 'Infomation!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm EN.',

			MENU_HOME: 'Home',
			MENU_ABOUT: 'About',
			MENU_CONTACT: 'Contact',
			MENU_LANGUAGE: 'Languages',

			DT_SUNDAY: 'Sun',
			DT_MONDAY: 'Mon',
			DT_TUESDAY: 'Tue',
			DT_WEDNESDAY: 'Wed',
			DT_THURSDAY: 'Thu',
			DT_FRIDAY: 'Fri',
			DT_SATURDAY: 'Sat',

			DT_JANUARY: 'Jan',
			DT_FEBRUARY: 'Feb',
			DT_MARCH: 'Mar',
			DT_APRIL: 'Apr',
			DT_MAY: 'May',
			DT_JUNE: 'Jun',
			DT_JULY: 'Jul',
			DT_AUGUST: 'Aug',
			DT_SEPTEMBER: 'Sep',
			DT_OCTOBER: 'Otc',
			DT_NOVEMBER: 'Nov',
			DT_DECEMBER: 'Dec'
		}
	};
})();
/***************************************************
Description: Site configs
****************************************************/
var settingJs = (function () {
	'use strict';

	var currentDate = new Date(),
		// endDate = new Date(2017,0,1,23,59,59),
		host = window.location.host,
		configs = {
			appPrefix: 'Muahangviet',
			facebookAppId: settings.facebookId,
			webUrl: settings.services.webUrl,
			apiUrl: settings.services.apiUrl,
			socketUrl: settings.services.socketApi,
			adminUrl: settings.services.admin,
			userApiUrl: settings.services.apiUrl,
			logApiUrl: settings.services.logApi,
			uploadApiUrl: settings.services.uploadApi,
			uploadDirectory: {
				general: '/files/',
				category: '/files/category_image/',
				product: '/files/product_image/',
				certificate: '/files/certificate_image/',
				blog: '/files/blog_image/',
				banner: '/files/banner_image/',
				thumb: '/files/thumb_image/',
				thumb_product: '/files/thumb_image/product_image/',
				tmp: '/files/tmp/',
				avatar: '/files/avatar_image/',
				media_old: '/files/media_old/',
				media_old_product: '/files/media_old/product/'
			}
		};

	return {
		configs: configs,
		appPrefix: configs.appPrefix,
		storageExpireTime: undefined
		// baseUrl: configs.baseUrl,
		// baseUrlDb: configs.baseUrlDb,
		// hostSubFolder: '/',
		// apiVersion: '',
		// language: 'vi',
		// routers: [],
		// reloadPageOnStateChange: false,
		// enabledHtml5Mode: false,
		// animationDelay: 0,
		// pageTransitionSequence: [
		// {stateName:'home', transition:'0,0'},
		// {stateName:'about', transition:'0,0'},
		// {stateName:'contact', transition:'0,0'}
		// ],
		// pageTransitionLoop: true,
		// pageTransitionDelay: 1500,
		// pageVisibleCount: 5,
		// preloadResource: [
		// ],
		// stopCampaign: currentDate > endDate,
		// facebook: {
		// 	appId: configs.facebookAppId,
		// 	version: 'v2.5',
		// 	permissions: 'email',
		// 	cookie: true,
		// 	xfbml: true,
		// 	language: 'vi_VN',
		// 	redirect: configs.baseUrl
		// },
		// google: {
		// 	api:{
		// 		apiKey: configs.googleApiKey,
		// 		clientId: configs.googleApiClientId,
		// 		scope: [
		// 		'https://www.googleapis.com/auth/plus.login'
		// 		]
		// 	},
		// 	ga: {
		// 		ids: configs.googleAnalyticIds
		// 	}
		// },
		// admin: {
		// 	itemPerPage: '20',
		// 	routers: []
		// },
		// roles: {
		// 	ALL: '*',
		// 	ADMIN: 'admin',
		// 	EDITOR: 'editor',
		// 	REGISTER: 'register',
		// 	GUEST: 'guest'
		// }
	}
})();

var DateTime = (function(){
	'use strict';

	return {
		dayCount: dayCount,                                 // Đếm số ngày giữa 2 mốc thời gian
        monthCount: monthCount,                             // Đếm số tháng giữa 2 mốc thời gian
        dateBetween: dateBetween,                           // Kiểm tra ngày có thuộc giữ 2 mốc thời gian
        dateContain: dateContain,                           // Kiểm tra ngày có nằm trong mảng ngày
        // dateInfo: dateInfo,                                 // Lấy thông tin ngày (Thứ, ngày, tháng, năm...)
        // timestampToDate: timestampToDate,                   // Chuyển đổi timestamp sang Date()
        dateToTimestamp: dateToTimestamp,                   // Chuyển đổi Date() sang timestamp
        isoDateToDate: isoDateToDate,                       // Chuyển đổi ISODate sang Date()
        daysInMonth: daysInMonth,                           // Lấy số ngày của tháng
        getAge: getAge                                      // Lấy số tuổi
    };

    function dayCount(date1, date2) {
    	var oneDay = 1000 * 60 * 60 * 24;
    	return Math.round((date2.getTime() - date1.getTime()) / oneDay);
    }

    function monthCount(date1, date2) {
    	return (date1.getMonth()) - (date2.getMonth()) + (12 * (date1.getFullYear() - date2.getFullYear())) + 1;
    }

    function dateBetween(date, startDate, endDate) {
    	return date >= startDate && date <= endDate;
    }

    function dateContain(date, dateArray) {
    	var result = dateArray.filter(function(value){
    		return new Date(value).toDateString() === date.toDateString();
    	});
    	return result.length !== 0;
    }

    // function dateInfo(date, lang) {
    //     var lang = lang || 'en';
    //     var dateNameArr = [
    //     languageJs[lang].DT_SUNDAY,
    //     languageJs[lang].DT_MONDAY,
    //     languageJs[lang].DT_TUESDAY,
    //     languageJs[lang].DT_WEDNESDAY,
    //     languageJs[lang].DT_THURSDAY,
    //     languageJs[lang].DT_FRIDAY,
    //     languageJs[lang].DT_SATURDAY
    //     ];
    //     var monthNameArr = [
    //     languageJs[lang].DT_JAN,
    //     languageJs[lang].DT_JANUARY,
    //     languageJs[lang].DT_FEBRUARY,
    //     languageJs[lang].DT_MARCH,
    //     languageJs[lang].DT_APRIL,
    //     languageJs[lang].DT_MAY,
    //     languageJs[lang].DT_JUNE,
    //     languageJs[lang].DT_JULY,
    //     languageJs[lang].DT_AUGUST,
    //     languageJs[lang].DT_SEPTEMBER,
    //     languageJs[lang].DT_OCTOBER,
    //     languageJs[lang].DT_NOVEMBER,
    //     languageJs[lang].DT_DECEMBER
    //     ];
    //     var dayOfWeek = date.getDay();
    //     var day = date.getDate();
    //     var month = date.getMonth();
    //     var year = date.getFullYear();
    //     var hours = date.getHours();
    //     var minutes = date.getMinutes();
    //     var seconds = date.getSeconds();
    //     var dayName = dateNameArr[dayOfWeek];
    //     var monthName = monthNameArr[month];

    //     return {
    //         day: day,
    //         month: parseInt(month + 1),
    //         year: year,
    //         hours: hours,
    //         minutes: minutes,
    //         seconds: seconds,
    //         dateString: (day < 10 ? '0' + day : day) + '/' + (parseInt(month + 1) < 10 ? '0' + parseInt(month + 1) : parseInt(month + 1)) + '/' + year,
    //         timeString: (hours < 10 ? '0' + hours : hours) + ':' + (minutes < 10 ? '0' + minutes : minutes),
    //         dayName: dayName,
    //         monthName: monthName,
    //         dayCount: dayCount(date, new Date())
    //     }
    // }

    // function timestampToDate(timestamp){
    //     var date = new Date(timestamp * 1000);
    //     return dateInfo(date);
    // }

    function dateToTimestamp(date){
        return date.getTime() / 1000;
    }

    function isoDateToDate(isoString){
    	var dtstr = isoString;
    	dtstr = dtstr.replace(/\D/g,' ');
    	var arr = dtstr.split(' ');
    	arr[1]--;
    	var result = new Date(Date.UTC(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5]));
    	return result;
    }

    function daysInMonth(month){
    	var date = new Date();
    	return new Date(date.getFullYear(), month, 0).getDate();
    }

    function getAge(birthday) {
    	var today = new Date();
    	var thisYear = 0;
    	if (today.getMonth() < birthday.getMonth()) {
    		thisYear = 1;
    	} else if ((today.getMonth() == birthday.getMonth()) && today.getDate() < birthday.getDate()) {
    		thisYear = 1;
    	}
    	var age = today.getFullYear() - birthday.getFullYear() - thisYear;
    	return age;
    }
})();
/***************************************************
Description: Excel
****************************************************/
var ExcelJs = (function() {
    'use strict';
    return {
        exportExcel: exportExcel,       // Xuất Excel
        testExcel: testExcel,       // Xuất Excel test
    };

    function testExcel(){
        /* original data */
        var data = [
        [1,2,3,0.5,7],
        [true, false, null, "sheetjs"],
        ["foo","bar",new Date("2014-02-19T14:30Z"), "0.3"], 
        ["baz", null, "qux"]
        ];

        var options = {
            type: 'xlsx',
            sheetName: 'SheetJS1',
            fileName: 'dl',
        };
        exportExcel(data, options);
    }

    function exportExcel(data, options){
        options = {
            type: options.type || "xlsx",
            sheetName: options.sheetName || "SheetJS",
            fileName: options.fileName || "test",
        };

        var ws_name = options.sheetName;
        var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
        /* add worksheet to workbook */
        wb.SheetNames.push(ws_name);
        wb.Sheets[ws_name] = ws;
        var wopts = { bookType:options.type, bookSST:false, type:'binary' };
        /* write file */
        var wbout = XLSX.write(wb, wopts);

        /* the saveAs call downloads a file on the local machine */
        saveAs(new Blob([s2ab(wbout)],{type:""}), options.fileName+'.'+options.type)
    }

    function datenum(v, date1904) {
        if(date1904) v+=1462;
        var epoch = Date.parse(v);
        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }

    function sheet_from_array_of_arrays(data, opts) {
        var ws = {};
        var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
        for(var R = 0; R != data.length; ++R) {
            for(var C = 0; C != data[R].length; ++C) {
                if(range.s.r > R) range.s.r = R;
                if(range.s.c > C) range.s.c = C;
                if(range.e.r < R) range.e.r = R;
                if(range.e.c < C) range.e.c = C;
                var cell = {v: data[R][C] };
                if(cell.v == null) continue;
                var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

                if(typeof cell.v === 'number') cell.t = 'n';
                else if(typeof cell.v === 'boolean') cell.t = 'b';
                else if(cell.v instanceof Date) {
                    cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                    cell.v = datenum(cell.v);
                }
                else cell.t = 's';

                ws[cell_ref] = cell;
            }
        }
        if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
        return ws;
    }

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
    }

    function Workbook() {
        if(!(this instanceof Workbook)) return new Workbook();
        this.SheetNames = [];
        this.Sheets = {};
    }

})();
/***************************************************
Description: Helpers
****************************************************/
var helperJsCustom = (function() {
    'use strict';
    return {
        detectScrollDirection: detectScrollDirection,       // Bắt sự kiện scroll lên hoặc scroll xuống
        clearFileInput: clearFileInput,                     // Xóa nội dung input["file"]
        isUndefinedNullEmpty: isUndefinedNullEmpty,         // Kiểm tra dữ liệu
        getQueryString: getQueryString,                     // Lấy tham số trên URL
        formatMoney: formatMoney,                           // Định dạng đơn vị tiền tệ
        enterFullScreen: enterFullScreen,                   // Bật chế độ xem toàn màn hình
        exitFullScreen: exitFullScreen,                     // Tắt chế độ xem toàn màn hình
        debounce: debounce,                                 // Trì hoãn thực thi hàm khi hoàn thành thao tác
        throttle: throttle,                                 // Trì hoãn thực thi hàm theo thời gian cố định
        hexToRgb: hexToRgb,                                 // Chuyển đổi màu sắc Hex sang RGBA
        preloader: preloader,                               // Các tài nguyên sẽ được tải trước
        scrollToElement: scrollToElement,                   // Tự động cuộn tới đối tượng chỉ định
        scrollToTop: scrollToTop,                           // Tự động cuộn lên trên
        randomRangeFloat: randomRangeFloat,                 // Tạo số thực ngẫu nhiên
        randomRangeInt: randomRangeInt,                     // Tạo số nguyên ngẫu nhiên
        extend: extend ,                                    // Kế thừa đối tượng
        findObject: findObject ,                            // Tìm đối tượng trong mảng đối tượng
        GA: GA,
    };

    function GA (request, type, arg1, arg2, arg3, arg4){
        if(request == 'send'){
            if(type == 'event'){
                let category = arg1;
                let action = arg2;
                let label = arg3;
                if(typeof ga !== 'undefined'){
                    ga.getAll()[0].send(type, category, action, label);
                }
            }

            if(type == 'pageview'){
                var page = arg1;
                if(typeof ga !== 'undefined'){
                    ga.getAll()[0].send(type, page);
                }
            }
        }
    }

    function findObject(field, value, array){
        function findCherries(fruit) { 
            return fruit[field] === value;
        }

        return array.find(findCherries);
    }

    function detectScrollDirection(){
        var previousScroll = 0;

        $(window).on('scroll', function(event) {
            var currentScroll = $(this).scrollTop();
            if (currentScroll > previousScroll){
                console.log('down');
            } else {
                console.log('up');
            }
            previousScroll = currentScroll;
        });
    }


    function clearFileInput(obj) {
        obj.replaceWith(obj.val('').clone(true));
    }

    function isUndefinedNullEmpty(data) {
        var output = true;
        if(!isNaN(data)){
            output = false;
        } else if(data === null || data === undefined){
            output = true;
        } else {
            for(var key in data) {
                if(data.hasOwnProperty(key)){
                    output = false;
                }
            }
        }
        return output;
    }
    /******************************************************************
    1. Array
    2. Image
    3. Markup
    *******************************************************************/

    function getQueryString(url, name) {
        var a = name.replace(/[\[]/, '\\\[').replace(/[\]]/, '\\\]');
        var regexS = '[\\?&]' + a + '=([^&#]*)';
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (results === null) return '';
        else return decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    function formatMoney(number, places, symbol, thousand, decimal) {
        number = number || 0;
        places = !isNaN(places = Math.abs(places)) ? places : 0;
        symbol = symbol !== undefined ? symbol : '';
        thousand = thousand || '.';
        decimal = decimal || ',';
        var negative = number < 0 ? '-' : '',
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + '',
        j = (j = i.length) > 3 ? j % 3 : 0;
        return symbol + negative + (j ? i.substr(0, j) + thousand : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : '');
    }

    function enterFullScreen(element) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    }

    function exitFullScreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }

    function debounce(fn, ms) {
        var timer = null;
        return function() {
            var context = this,
            args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function() {
                fn.apply(context, args);
            }, ms);
        };
    }

    function throttle(fn, ms, scope) {
        ms || (ms = 250);
        var last,
        deferTimer;
        return function () {
            var context = scope || this;

            var now = +new Date,
            args = arguments;
            if (last && now < last + ms) {
                clearTimeout(deferTimer);
                deferTimer = setTimeout(function () {
                    last = now;
                    fn.apply(context, args);
                }, ms);
            } else {
                last = now;
                fn.apply(context, args);
            }
        };
    }

    function hexToRgb(hex, opacity){
        var h = hex.replace('#', '');
        h =  h.match(new RegExp('(.{'+h.length/3+'})', 'g'));

        for(var i=0; i<h.length; i++){
            h[i] = parseInt(h[i].length==1? h[i]+h[i]:h[i], 16);
        }

        if (typeof opacity != 'undefined') {
            h.push(opacity);
        }

        return 'rgba('+h.join(',')+')';
    }

    function preloader(fileList, callback){
        var loaded = 0;
        var len = fileList.length;
        if(len){
            for (var i = 0; i < len; i++) {
                var img = new Image();
                img.src = fileList[i];
                img.onload = function(event){
                    check(len);
                    console.info('File loaded: ', event.target.currentSrc);
                };

                img.onerror = function(event){
                    check(len);
                    console.info('Cannot load file: ', event.target.currentSrc);
                };
            };
        } else {
            complete();
        }

        function check(count){
            loaded++;
            if(loaded === count){
                complete();
            }
        }

        function complete(){
            if(typeof callback === 'function'){
                callback();
            }
        }
    }

    function scrollToElement(selector, time, verticalOffset) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        verticalOffset = typeof(verticalOffset) !== 'undefined' ? verticalOffset : 0;
        var offset = $(selector).offset();
        var offsetTop = offset.top + verticalOffset;
        $('html,body').animate({ scrollTop: offsetTop }, time);
    }

    function scrollToTop(time) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        $('html,body').animate({ scrollTop: 0 }, time);
    }

    function randomRangeFloat(min, max) {
        return Math.random() * (max - min + 1) + min;
    }

    function randomRangeInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function extend(a, b){
        for(var key in b){
            if(b.hasOwnProperty(key)){
                a[key] = b[key];
            }
        }
        return a;
    }
})();
(function() {
    'use strict';
    $.fn.bzAccordion = function(autoCollapse, expandFirstItem) {
        var $accord = this.find('.item');
        if (expandFirstItem) {
            $accord.first().find('.question').addClass('expanded');
            $accord.first().find('.answer').show();
        }
        $accord.find('.question').click(function() {
            if ($(this).hasClass('expanded')) {
                $(this).removeClass('expanded');
                $(this).parent().find('.answer').slideUp(200);
            } else {
                if (autoCollapse) {
                    $.each($accord.find('.question'), function(i, o) {
                        $(o).removeClass('expanded');
                        $(o).parent().find('.answer').slideUp(200);
                    });
                }
                $(this).addClass('expanded');
                $(this).parent().find('.answer').slideDown(200);
            }
        });
    };
})();
(function() {
    'use strict';

    /******************************************************************
    Array
    *******************************************************************/
    Array.prototype.getIndexBy = function(name, value) {
        for (var i = 0; i < this.length; i++) {
            if (this[i][name] == value) {
                return i;
            }
        }
        return -1;
    };

    Array.prototype.removeAt = function(index) {
        var b = this.splice(index, 1);
        return b;
    };
    /******************************************************************
    String
    *******************************************************************/
    String.prototype.format = function() {
        var args = arguments;
        return this.replace(/\{\{|\}\}|\{(\d+)\}/g, function(m, n) {
            if (m == '{{') {
                return '{';
            }
            if (m == '}}') {
                return '}';
            }
            return args[n];
        });
    };

    String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
})();



/***************************************************
Description: Sort algorithms
****************************************************/
var sortJs = (function(){

    return {
        bubble: bubbleSort,
        quick: quickSort,
        merge: mergeSort,
        selection: selectionSort,
        insertion: insertionSort
    };

    function bubbleSort(arr) {
        if (arr.length <= 1) return arr;
        var alen = arr.length;
        for (var i = 0; i < alen; i++) {
            for (var j = 0; j < alen - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    var temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    function quickSort(arr) {
        if (arr.length <= 1) return arr;
        var pivot = Math.floor((arr.length - 1) / 2),
        pivotValue = arr[pivot],
        left = [],
        right = [];
        arr = arr.slice(0, pivot).concat(arr.slice(pivot + 1));
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] < pivotValue) {
                left.push(arr[i]);
            } else {
                right.push(arr[i]);
            }
        }
        return [].concat(quickSort(left), [pivotValue], quickSort(right));
    }

    function mergeSort(arr) {
        if (arr.length <= 1) return arr;
        var mid = Math.floor(arr.length / 2),
        left = arr.slice(0, mid),
        right = arr.slice(mid);

        var merge = function merge(left, right){
            var result = [];
            while (left.length && right.length) {
                if (left[0] < right[0]) {
                    result.push(left.shift());
                } else {
                    result.push(right.shift());
                }
            }
            return result.concat(left).concat(right);
        };
        return merge(mergeSort(left), mergeSort(right));
    }

    function selectionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var min = i;
            for (var j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[min]) {
                    min = j;
                }
            }
            if (min != i) {
                var temp = arr[min];
                arr[min] = arr[i];
                arr[i] = temp;
            }
        }
        return arr;
    }

    function insertionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var j = i - 1,
            temp = arr[i];
            while (j >= 0 && arr[j] > temp) {
                arr[j + 1] = arr[j];
                arr[j] = temp;
                j--;
            }
        }
        return arr;
    }
})();
var Storage = (function() {
	'use strict';
	return {
		get: get,
		set: set,
		remove: remove,
		clear: clear
	};

	function get(name) {
		var date = new Date(),
		current = Math.round(+date / 1000),
		storedData = JSON.parse(localStorage.getItem(settingJs.appPrefix + '.' + name)) || {},
		storedTime = storedData.storageExpireTime || 0;

		if (storedTime && storedTime < current) {
			remove(settingJs.appPrefix + '.' + name);
			return undefined;
		} else {
			return storedData.store;
		}
	}

	function set(name, value, seconds) {
		var date = new Date(),
		schedule = Math.round((date.setSeconds(date.getSeconds() + seconds)) / 1000),
		data = JSON.stringify({storageExpireTime: schedule, store: value});
		try {
			localStorage.setItem(settingJs.appPrefix + '.' + name, data);
		} catch (e) {
			if (e == QUOTA_EXCEEDED_ERR) {
				alert('Quota exceeded!');
			}
		}

		return data;
	}

	function remove(name) {
		localStorage.removeItem(settingJs.appPrefix + '.' + name);
	}

	function clear() {
		localStorage.clear();
	}
})();
var Application = (function () {
    'use strict';

    var appName = 'bzApp';
    var appDependencies = [
        'ui.bootstrap',
        'ngSanitize',
        'ngAnimate',
        'ngMessages',
        'ngResource',
        'ui.router',
        'toastr',
        'ngPopup',
        'daterangepicker',
        'angularjs-datetime-picker',
        'ngFileUpload',
        'ngTable',
        'angulike'
    ];

    angular
        .module(appName, appDependencies)
        .config(config)
        .run(run);

    angular.element(document).ready(function () {
        /* visible view-container*/
        // document.getElementsByClassName('view-container')[0].style.visibility = 'visible';
        
        //Facebook SDK
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/vi_VN/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        angular.bootstrap(document, [appName]);
    });

    function registerModule(name) {
        angular.module(appName).requires.push(name);
    }

    function config(
        $qProvider,
        $httpProvider,
        $locationProvider,
        $bzPopupProvider,
        toastrConfig,
        $interpolateProvider,
        $resourceProvider
    ) {

        /*fix error (Possibly unhandled rejection) angular > 1.5.5*/
        $qProvider.errorOnUnhandledRejections(false);

        $bzPopupProvider.setMessageTemplate('assets/global/message/view.html');

        angular.extend(toastrConfig, {
            extendedTimeOut: 1000,
            timeOut: 1000,
            newestOnTop: true,
            positionClass: 'toast-bottom-right',
            preventDuplicates: false,
            preventOpenDuplicates: false,
            tapToDismiss: true,
            allowHtml: true,
            closeButton: true,
            target: 'body'
        });

        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');

        // Configs HTML5 API Pushstate
        // $locationProvider.html5Mode(false).hashPrefix('!');
        $locationProvider.html5Mode({ enabled: true, requireBase: false, rewriteLinks: false });

        $httpProvider.defaults.withCredentials = true;
        $httpProvider.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8';

        // $resourceProvider.defaults.stripTrailingSlashes = false;
    }

    function run(
        $rootScope,
        $window,
        $document,
        $timeout,
        $locale,
        authSvc,
        notiSvc) {

        // In it cart data
        $rootScope.Cart = {
            items: [],
            total: 0,
            total_quantity: 0
        }

        // value config default
        $rootScope.TextOrderConfig = [];

        // Khuyến mãi cho order giao vào buổi chiều
        $rootScope.promotionForOrderDeleveryOnAffternoon = {
            value: 0,
            status: false,
            type: "PC"
        }

        // khuyến mãi cho đơn hàng đầu tiên
        $rootScope.promotionForFirstOrder = {
            value: 0,
            status: false,
            type: "PC"
        };

        $rootScope.freeShipUrban = {
            value: 999999999,
            status: false,
            type: "MN"
        }; // Nội thành
        $rootScope.freeShipSuburb = {
            value: 999999999,
            status: false,
            type: "MN"
        }; // Ngoại thành

        //Init Facebook
        window.fbAsyncInit = function () {
            FB.init({
                appId: settingJs.configs.facebookAppId,
                status: true,
                xfbml: true,
                version: 'v2.9'
            });
        };

        // Config for module angulike
        $rootScope.facebookAppId = settingJs.configs.facebookAppId;


        angular.element('body').removeClass('hide');
        $timeout(function () {
            angular.element('#mod-footer').css({
                visibility: 'visible',
                position: 'relative'
            });
        }, 1500);


        $rootScope._ = window._;
        // $rootScope.socket = io(settingJs.configs.socketUrl);

        // Global variables
        $rootScope.pageData = {};

        // Global methods
        $rootScope.pageMethods = {};
        $rootScope.pageMethods.authSvc = authSvc;
        $rootScope.Url = settingJs.configs.webUrl;

        // Set currency filter
        $locale.NUMBER_FORMATS.GROUP_SEP = '.';

        // List tracked facebook pixel
        $rootScope.list_track_fpq = [];
    }

    return {
        registerModule: registerModule
    };
})();

(function () {
    'use strict';

    angular
        .module('bzApp')
        .service('bzUtilsSvc', bzUtilsSvc)
        .service('bzResourceSvc', bzResourceSvc)
        .factory('bzPreloadSvc', bzPreloadSvc)
        .service('authSvc', authSvc)
        .service('notiSvc', notiSvc)
        .factory('userApiFac', userApiFac)
        .service('orderApiSvc', orderApiSvc)
        .service('bzUpload', bzUpload);

    function orderApiSvc($q, $window, $rootScope, bzResourceSvc) {
        return {
            getCart: getCart,
            update: update,
        }
        /**
         * Update product
         * @param {*} type enum: 'add-product' || 'set-quantity' || 'delete-product' || 'delete-cart'
         * @param {*} data custom by type: {product: id_product, quantity: number || string}
         */
        function update(type, data) {
            var defer = $q.defer();
            if (type === 'add-product')
                return addProduct(data.product, data.quantity);

            if (type === 'set-quantity')
                return setQuantity(data.product, data.quantity);

            if (type === 'delete-product')
                return deleteProduct(data.product);

            if (type === 'delete-cart')
                return deleteCart();

            defer.reject('Type mismach');
            return defer.promise;
        }

        function getCart() {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/cart')
                .get({}, function (resp) {
                    $rootScope.Cart = resp.cart;
                    $rootScope.$broadcast('Cart:getCart', resp.cart);
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function deleteCart() {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/delete-cart')
                .get({}, function (resp) {
                    $rootScope.Cart = { items: [], total: 0 };
                    $rootScope.$broadcast('Cart:getCart', resp.cart);
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function deleteProduct(product) {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/delete-product/' + product)
                .get({}, function (resp) {
                    $rootScope.Cart = resp.cart;
                    $rootScope.$broadcast('Cart:getCart', resp.cart);
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function setQuantity(product, new_quantity) {
            var defer = $q.defer();
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/set-quantity/' + product + '/' + new_quantity)
                .get({}, function (resp) {
                    if (resp.success) {
                        $rootScope.Cart = resp.cart;
                        $rootScope.$broadcast('Cart:getCart', resp.cart);
                    }
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

        function addProduct(product, quantity) {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.userApiUrl + '/order/' + product + '/' + quantity)
                .get({}, function (resp) {
                    if (resp.success) {
                        $rootScope.Cart = resp.cart;
                        $rootScope.$broadcast('Cart:getCart', resp.cart);
                    }
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });
            return defer.promise;
        }

    }
    function userApiFac($window, bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.userApiUrl + '/user/:method/:id', { method: '@method', id: '@id' });
    }

    function bzUpload($q, bzResourceSvc) {
        return {
            uploadBase64: uploadBase64
        };
        function uploadBase64(data) {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.userApiUrl + '/upload/base64')
                .save(data, function (resp) {
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });

            return defer.promise;
        }
    }

    function notiSvc($q, bzResourceSvc) {
        return {
            getDupContact: getDupContact,
        };

        function getDupContact() {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.adminUrl + '/noti-dup-contact')
                .get({}, {}, function (resp) {
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });

            return defer.promise;
        }
    }

    function authSvc($uibModal, $q, $window, userApiFac, bzResourceSvc) {
        $window.user = $window.user || {};

        return {
            /*Role*/
            isSuperAdmin: isSuperAdmin,
            isAdmin: isAdmin,
            hasPermission: hasPermission,
            // isSale: isSale,
            // isSaleManager: isSaleManager,
            exist: exist,
            /* */
            register: register,
            /*Info*/
            getProfile: getProfile,
            setProfile: setProfile,
            isSignedIn: isSignedIn,
            siteLogin: siteLogin,
            siteLogout: siteLogout,
            popLogin: popLogin,
            popRegister: popRegister,
            popForgotPass: popForgotPass,
            popChangePass: popChangePass,
            postChangePass: postChangePass,
            forgotPassword: forgotPassword,
            resetPassword: resetPassword,
            // create    : create,
            update: update,
            /*Facebook*/
            getFacebook: getFacebook,
            facebookLogin: facebookLogin
        };

        /*ROLES*/
        function isSuperAdmin() {
            if (_.intersection($window.user.scope, ['super-admin']).length === 0)
                return false;
            return true;
        }

        function isAdmin() {
            if (_.intersection($window.user.scope, ['admin']).length === 0)
                return false;
            return true;
        }

        function hasPermission(resource, permission) {
            var isString = typeof permission == 'string' ? true : false;
            var permissions = $window.permissions;
            var p = null;

            angular.forEach(permissions, function (value, key) {
                if (key === resource) {
                    p = value;
                }
            });
            if (p) {
                if (p[0] === '*') {
                    // console.log(1);
                    return true;
                }

                if (isString) {
                    if (_.intersection([permission], p).length === 1) {
                        // console.log(2);
                        return true;
                    }
                }

                if (_.intersection(permission, p).length === permission.length) {
                    // console.log(3);
                    return true;
                }

            }
            return false;


        }
        // function isSale(){
        //     $window.user.saleman = $window.user.saleman || {};
        //     if(_.intersection($window.user.scope, ['sale']).length !== 0 && $window.user.saleman.active === true)
        //         return true;
        //     return false;
        // }

        // function isSaleManager(){
        //     $window.user.saleman = $window.user.saleman || {};
        //     if(isSale() && $window.user.saleman.manager === true)
        //         return true;
        //     return false;
        // }

        function exist(roles) {
            return _.intersection($window.user.scope, roles).length > 0;
        }
        /* */
        function register(data) {


            var register = new userApiFac(data);

            return register.$save({ method: 'register' });
        }

        /*INFO*/
        function getProfile() {
            var profileData = $window.user;
            return profileData;
        }

        function setProfile(data) {
            Storage.set(settingJs.appPrefix + 'bzp', data, settingJs.storageExpireTime);
            Storage.set(settingJs.appPrefix + 'bzl', true, settingJs.storageExpireTime);
            return data;
        }

        function isSignedIn() {
            var log = Storage.get(settingJs.appPrefix + 'bzl');
            return log ? true : false;
        }

        function siteLogin(data, successCb, errorCb) {
            var defer = $q.defer();

            bzResourceSvc.api($window.settings.services.apiUrl + '/user/login')
                .save({}, data, function (resp) {
                    setProfile(resp);
                    defer.resolve(resp);
                    if (angular.isFunction(successCb)) {
                        successCb(resp);
                    }
                }, function (err) {
                    defer.reject(err);
                    if (angular.isFunction(errorCb)) {
                        errorCb(err);
                    }
                });

            return defer.promise;
        }

        function siteLogout(callback) {
            var profile = getProfile();
            bzResourceSvc.api($window.settings.services.apiUrl + '/user/logout')
                .save({}, {}, function (resp) {
                    setProfile(undefined);
                    if (angular.isFunction(callback)) {
                        callback(resp);
                    }
                    $window.location.href = settings.services.webUrl;
                });
        }
        function popLogin(urlRedirect) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/login/view.html',
                controller: 'popLoginCtrl',
                controllerAs: 'vmLogin',
            });
            modalInstance.result.then(function (resp) {
                if (!resp) {
                    if (urlRedirect) {
                        $window.location.href = urlRedirect;
                    }
                    else {
                        $window.location.reload();
                    }

                }
                return resp;

            });
        }
        function popRegister() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/register/view.html',
                controller: 'popRegisterCtrl',
                controllerAs: 'vmRegister',
            });
        }
        function popForgotPass() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/forgot-pass/view.html',
                controller: 'popForgotPassCtrl',
                controllerAs: 'vmForgotPass',
            });
        }
        function popChangePass() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'modules/admin-user/view/client/popup/change-pass/view.html',
                controller: 'popChangePassCtrl',
                controllerAs: 'mvCPass',
            });
        }

        function postChangePass(data) {
            var postChangePass = new userApiFac(data);

            return postChangePass.$save({ method: 'change-password' });
        }

        function forgotPassword(data) {
            var forgotPassword = new userApiFac(data);

            return forgotPassword.$save({ method: 'forgot-password' });
        }

        function resetPassword(data) {
            var resetPassword = new userApiFac(data);

            return resetPassword.$save({ method: 'reset-password' });
        }
        // function create(data, id){
        //     var createData = new userFac(data);

        //     return createData.$save({method: 'user'});
        // }

        function update(data, id) {
            var createData = new userApiFac(data);

            return createData.$update({ id: id });
        }

        /*FACEBOOK*/

        function getFacebook() {
            var deferred = $q.defer();
            FB.getLoginStatus(function (response) {
                if (response.status === "connected") {
                    var accessToken = response.authResponse.accessToken;
                    FB.api("/me", { fields: "id,name,email,picture" }, function (response) {
                        // console.log('da login',response);
                        deferred.resolve(response);
                    });
                } else {
                    FB.login(function (response) {
                        if (response.status === 'not_authorized') {
                            deferred.resolve({ error: 'Vui lòng đồng ý sử dụng ứng dụng để đăng nhập tài khoản' });
                        }
                        if (response.status === 'connected') {
                            var accessToken = response.authResponse.accessToken;
                            FB.api("/me", { fields: "id,name,email,picture" }, function (response) {
                                // console.log('moi login',response);
                                deferred.resolve(response);
                            });
                        }
                    }, { scope: "email" });
                }
            });

            return deferred.promise;
        }

        /*
        * Login by Facebook Account function
        */
        function facebookLogin(fbAccount, successCb, errorCb) {
            let defer = $q.defer();
            let data = {
                email: fbAccount.email,
                provider_id: fbAccount.id,
                name: fbAccount.name,
                profile_picture: fbAccount.profile_picture
            };

            bzResourceSvc.api($window.settings.services.userApi + '/user/facebook-login')
                .save({}, data, function (resp) {
                    setProfile(resp);
                    defer.resolve(resp);
                    if (angular.isFunction(successCb)) {
                        successCb(resp);
                    }
                }, function (err) {
                    defer.reject(err);
                    if (angular.isFunction(errorCb)) {
                        errorCb(err);
                    }
                });
            return defer.promise;
        }
    }

    function bzUtilsSvc($bzPopup) {
        return {
            recusive: recusive,
            cropAvatar: cropAvatar,
            findObject: findObject,					// Tìm đối tượng trong mảng đối tượng
            textToSlug: textToSlug,                 // genarator slug
            setLocalStorage: setLocalStorage,
            getLocalStorage: getLocalStorage,
            removeLocalStorage: removeLocalStorage,

            setInfoUser: setInfoUser,
            getInfoUser: getInfoUser,
            removeInfoUser: removeInfoUser,

        };
        function textToSlug(string) {
            if (string) {
                //Đổi chữ hoa thành chữ thường
                var slug = string.toLowerCase();

                //Đổi ký tự có dấu thành không dấu
                slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
                slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
                slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
                slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
                slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
                slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
                slug = slug.replace(/đ/gi, 'd');
                //Xóa các ký tự đặt biệt
                slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
                //Đổi khoảng trắng thành ký tự gạch ngang
                slug = slug.replace(/ /gi, "-");
                //Đổi nhiều ký tự gạch ngang liên tiếp thành 1 ký tự gạch ngang
                //Phòng trường hợp người nhập vào quá nhiều ký tự trắng
                slug = slug.replace(/\-\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-/gi, '-');
                slug = slug.replace(/\-\-/gi, '-');
                //Xóa các ký tự gạch ngang ở đầu và cuối
                slug = '@' + slug + '@';
                slug = slug.replace(/\@\-|\-\@|\@/gi, '');
                return slug;

            }

            return string;
        }

        function findObject(field, value, array) {
            function findCherries(fruit) {
                return fruit[field] === value;
            }

            return array.find(findCherries);
        }

        function recusive(data, parentId, seperator) {
            var output;
            var tmp = [];
            seperator = seperator || '';
            if (angular.isArray(data)) {
                var items = data.filter(function (item) { return item.parentId === parentId });
                if (items.length) {
                    for (var i = 0; i < items.length; i++) {
                        items[i].name = seperator + items[i].name;

                        tmp.push(items[i]);

                        var subs = recusive(data, items[i].id, seperator + "—");

                        for (var j = 0; j < subs.length; j++) {
                            tmp.push(subs[j]);
                        }
                    }
                }
                output = tmp;
            } else {
                output = data;
            }
            return output;
        }

        function cropAvatar() {
            $bzPopup.open({
                templateUrl: 'modules/popup/cropper/view.html',
                closeOnBg: false,
                data: {
                    ratio: 1,
                    width: 320,
                    height: 320,
                    type: 'image/jpeg',
                    event: 'bz:CropperAvatarSuccess',
                    image: 'images/demo.jpg',
                    props: {
                        btnOk: 'Lưu',
                        btnCancel: 'Huỷ bỏ',
                        btnOkEvent: 'bz:CropperAvatarOk', // hoặc function(){}
                        btnCancelEvent: 'bz:CroppperAvatarCancel' // hoặc function(){}
                    }
                }
            });
        }

        function setLocalStorage(key, data) {
            if (typeof (Storage) !== "undefined") {
                Storage.set(key, data, settingJs.storageExpireTime);
            } else {
                console.error('Sorry! The browser does not support Storage.');
            }
        }

        function getLocalStorage(key) {
            if (typeof (Storage) !== "undefined") {
                var data = Storage.get(key);
                return data;
            } else {
                console.error('Sorry! The browser does not support Storage.');
                return null;
            }
        }

        function removeLocalStorage(key) {
            if (typeof (Storage) !== "undefined") {
                Storage.remove(key);
            } else {
                console.error('Sorry! The browser does not support Storage.');
            };
        }

        function setInfoUser(data) {
            setLocalStorage(settingJs.appPrefix + '_infoUser', data);
        }

        function getInfoUser() {
            return getLocalStorage(settingJs.appPrefix + '_infoUser');
        }

        function removeInfoUser() {
            removeLocalStorage(settingJs.appPrefix + '_infoUser');
        }
    }

    function bzResourceSvc($resource) {
        return {
            api: api
        };

        function api(apiName, params, methods) {
            methods = methods || {};
            methods.get = angular.extend({}, methods.get);

            methods.query = angular.extend({
                isArray: true
            }, methods.query);

            methods.update = angular.extend({
                method: 'PUT'
            }, methods.update);

            methods.upload = angular.extend({
                method: 'POST',
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            }, methods.upload);

            return $resource(apiName, params, methods);
        }
    }

    function bzPreloadSvc($q) {
        return {
            load: function (list) {
                var defer = $q.defer();
                helperJs.preloader(list, function () {
                    defer.resolve();
                });
                return defer.promise;
            }
        };
    }
})();
(function () {
	'use strict';

	angular
		.module('bzApp')
		.filter('bzTrustHtml', bzTrustHtml)						// Cho phép hiển thị dữ liệu là html
		.filter('bzTrustResource', bzTrustResource)
		.filter('bzCurrency', bzCurrency)
		.filter('bzHexToRgb', bzHexToRgb)
		.filter('bzTripHtml', bzTripHtml)
		.filter('bzFormatDate', bzFormatDate)
		.filter('bzFirstPage', bzFirstPage)
		.filter('bzObjectKeysLength', bzObjectKeysLength);


	function bzTrustHtml($sce) {
		return function (data) {
			return $sce.trustAsHtml(data);
		};
	}
	function bzTrustResource($sce) {
		return function (data) {
			return $sce.trustAsResourceUrl(data);
		};
	}
	function bzCurrency() {
		return function (data) {
			return helperJs.formatMoney(data);
		};
	}

	function bzHexToRgb() {
		return function (data, alpha) {
			return helperJs.hexToRgb(data, alpha);
		};
	}

	function bzTripHtml() {
		return function (data) {
			return String(data).replace(/<[^>]+>/gm, '');
		};
	}

	function bzFormatDate() {
		return function (data, format) {
			var date = new Date(data);
			var convertedDate = moment(date).format(format);
			return convertedDate;
		};
	}

	function bzFirstPage() {
		return function (data, start) {
			start = +start;
			if (angular.isArray(data)) {
				return data.slice(start);
			} else {
				return data;
			}
		};
	}

	function bzObjectKeysLength() {
		return function (obj) {
			return Object.keys(obj).length;
		};
	}
})();
(function () {
    'use strict';
    angular
        .module('bzApp')

        .directive('bzColorPicker', bzColorPicker)
        .directive('autogrow', autogrow)
        .directive('ckEditor', ckEditor)
        .directive('bzInputMask', bzInputMask)
        .directive('bzLoadingProgress', bzLoadingProgress)
        .directive('bzPlaceholder', bzPlaceholder)
        .directive('bzFileModel', bzFileModel)
        .directive('bzInputControls', bzInputControls)                         // Sự kiện cuộn chuột giữa và nhấn phím mũi tên
        .directive('bzValidPasswordMatch', bzValidPasswordMatch)               // Kiểm tra mật khẩu trùng khớp
        .directive('bzValidPassword', bzValidPassword)                         // Kiểm tra độ an toàn của mật khẩu
        .directive('bzPasswordStrength', bzPasswordStrength)                   // Kiểm tra mật khẩu (Ký tự đặc biệt, in hoa, thường, ký tự số)
        .directive('bzWordCount', bzWordCount)                                 // Giới hạn số từ được nhập
        .directive('bzValidExist', bzValidExist)                               // Kiểm tra dữ liệu trong database
        .directive('bzValidFileInput', bzValidFileInput)                       // Kiểm tra tập tin upload
        .directive('bzSubmit', bzSubmit)                                       // Nút submit có trạng thái loading
        .directive('bzPageTransition', bzPageTransition)                       // Hiệu ứng chuyển trang
        .directive('bzTimePicker', bzTimePicker)                               // Popup chọn thời gian
        .directive('bzDatePicker', bzDatePicker)                               // Popup chọn ngày
        .directive('bzDateTimePicker', bzDateTimePicker)                       // Popup chọn ngày
        .directive('bzDateRangePicker', bzDateRangePicker)                     // Popup chọn ngày
        .directive('bzMedia', bzMedia)                                         // Điều khiển HTML5 Audio, video
        .directive('bzLoading', bzLoading)                                     // Trạng thái loading
        .directive('bzCustomScrollbar', bzCustomScrollbar)                     // Giao diện scrollbar
        .directive('bzRepeatCompleted', bzRepeatCompleted)                     // Sự kiện khi ng-repeat hoàn thành
        .directive('bzPager', bzPager)                                         // Tạo phân trang cho dữ liệu
        .directive('bzParallax', bzParallax)                                   // Hiệu ứng parallax
        .directive('bzFancybox', bzFancybox)                                   // Lightbox
        .directive('bzInfinityScroll', bzInfinityScroll)
        .directive('bzFullframe', bzFullframe)
        .directive('bzTag', bzTag)
        .directive('bzInputNumber', bzInputNumber)
        .directive('bzCheckDate', bzCheckDate)
        .directive('iCheck', iCheck)
        .directive('atrDateTimePicker', atrDateTimePicker)
        .directive('singleDateTimePicker', singleDateTimePicker)               //Single date time by xuantoan
        .directive('bzCropper', bzCropper)
        .directive('bzInputOnlyDigits', bzInputOnlyDigits);
    // .directive('bzInputMatch', bzInputMatch);

    /*Icheck vu.dev@antoree.com*/
    function iCheck($timeout, $parse) {
        return {
            require: 'ngModel',
            // scope: {
            //     checkboxClass: '=checkboxClass'
            // },
            link: function ($scope, element, $attrs, ngModel) {
                return $timeout(function () {
                    var checkboxClass = $attrs['checkboxClass'];
                    var value;
                    value = $attrs['value'];

                    $scope.$watch($attrs['ngModel'], function (newValue) {
                        $(element).iCheck('update');
                    })

                    return $(element).iCheck({
                        // checkboxClass: 'icheckbox_square',
                        radioClass: 'iradio_square-blue',
                        checkboxClass: checkboxClass || 'icheckbox_square-blue',
                        increaseArea: '20%'

                    }).on('ifChanged', function (event) {
                        if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {
                            $scope.$apply(function () {
                                return ngModel.$setViewValue(event.target.checked);
                            });
                        }
                        if ($(element).attr('type') === 'radio' && $attrs['ngModel']) {
                            return $scope.$apply(function () {
                                return ngModel.$setViewValue(value);
                            });
                        }
                    });
                });
            }
        };
    }
    /*End Icheck vu.dev@antoree.com*/

    /*DateTime vu.dev@antoree.com*/
    function atrDateTimePicker() {
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function (scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale: {
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                element.daterangepicker(options);
                /*Khi date thay đổi*/
                element.on('apply.daterangepicker', function (ev, picker) {
                    var value = {
                        startDate: picker.startDate,
                        endDate: picker.endDate,
                    };

                    /*khi chọn single, mutil datetime*/
                    if (!options.singleDatePicker) {
                        picker.element.val(picker.startDate.format(picker.locale.format) + ' - ' + picker.endDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value);
                    } else {
                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    }
                });

                /*Render lần đầu vào page model trc khi init datetime*/
                if (!ngModel) return;
                ngModel.$render = function () {
                    if (ngModel.$viewValue) {
                        var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                        element.val(convertedDate || '');
                    }
                };
            }
        };
    }


    /*End DateTime vu.dev@antoree.com*/

    /*Start: DateTime for single date xuantoancth541994@gmail.com*/

    // Only use for select single datetime picker
    function singleDateTimePicker($timeout) {
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function (scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale: {
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                $timeout(function () {
                    element.daterangepicker(options);
                    /*Khi date thay đổi*/
                    element.on('apply.daterangepicker', function (ev, picker) {
                        var value = {
                            startDate: picker.startDate,
                            endDate: picker.endDate,
                        };

                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    });

                    /*Render lần đầu vào page model trc khi init datetime*/
                    if (!ngModel) return;
                    ngModel.$render = function () {
                        if (ngModel.$viewValue) {
                            var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                            element.val(convertedDate || '');
                        }
                    };
                }, 10);
            }
        };
    }
    /*Start: DateTime for single date xuantoancth541994@gmail.com*/



    function bzColorPicker($timeout) {
        return {
            require: 'ngModel',
            scope: {
                modelValue: '=ngModel'
            },
            link: function (scope, iElement, iAttr, ngModel) {
                $timeout(function () {
                    var a = iElement.colorpicker({
                        color: scope.modelValue
                    });

                    a.on('changeColor', function (data) {
                        scope.$apply(function () {
                            ngModel.$setViewValue(data.color.toString());
                        });
                    });
                });
            }
        };
    }

    function autogrow($timeout, $window) {
        return {
            link: function (scope, iElement, iAttr) {
                process(0);

                scope.$on('bz:redrawAutogrow', function () {
                    process(100);
                });

                function process(ms) {
                    $timeout(function () {
                        autosize(iElement);
                    }, ms);
                }
            }
        }
    }

    function ckEditor($timeout) {
        return {
            require: '?ngModel',
            transclude: true,
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                var editor, updateModel;

                $timeout(function () {
                    editor = CKEDITOR.replace(iElement[0], {});
                    if (!ngModel) {
                        return;
                    }

                    editor.on('instanceReady', function () {
                        return editor.setData(ngModel.$viewValue);
                    });
                    editor.on('change', updateModel);
                    editor.on('dataReady', updateModel);
                    editor.on('key', updateModel);
                    editor.on('paste', updateModel);
                    editor.on('selectionChange', updateModel);

                    function updateModel() {
                        return scope.$apply(function () {
                            return ngModel.$setViewValue(editor.getData());
                        });
                    };

                    return ngModel.$render = function () {
                        return editor.setData(ngModel.$viewValue);
                    };
                });
            }
        };
    }

    function bzInputMask() {
        return {
            link: function (scope, iElement, iAttrs) {
                var mask = scope.$eval(iAttrs.bzInputMask);
                Inputmask(mask).mask(iElement[0]);
            }
        };
    }

    function bzLoadingProgress() {
        return {
            restrict: 'E',
            replace: true,
            template: '<div id="bz-progressbar">' +
            '<div></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    setTimeout(function () {
                        iElement.find('>div').css('width', 0);
                        iElement.fadeIn(200);
                    }, 500);

                    run(0);

                    function run(value) {
                        setTimeout(function () {
                            if (value < 90) {
                                var randomVal = helperJs.randomRangeInt(value, value + 10);
                                iElement.find('>div').css('width', randomVal + '%');
                                value += randomVal;
                                run(value);
                            }
                        }, helperJs.randomRangeInt(200, 500));
                    }
                });

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    iElement.find('>div').css('width', '100%');
                    setTimeout(function () {
                        iElement.fadeOut(200);
                    }, 500);
                });
            }
        };
    }

    function bzPlaceholder() {
        return {
            replace: true,
            transclude: true,
            template: '<div>' +
            '<img ng-src="{{icon}}" />' +
            '<span>{{caption}}</span>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                var input = angular.element(iAttrs.for);
                scope.caption = iAttrs.caption;
                scope.icon = iAttrs.icon;

                iElement.on('click', function (event) {
                    iElement.hide();
                    input.focus();
                });

                input.on('focus', function (event) {
                    iElement.hide();
                });

                input.on('blur', function (event) {
                    var val = input.val();

                    if (!val.length) {
                        iElement.show();
                    }
                });
            }
        };
    }

    function bzFileModel($parse) {
        return {
            link: function (scope, iElement, iAttrs) {
                var model = $parse(iAttrs.bzFileModel);
                var modelSetter = model.assign;

                iElement.bind('change', function () {
                    scope.$apply(function () {
                        modelSetter(scope, iElement[0].files);
                    });
                });
            }
        };
    }

    function bzInputControls($state, $timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var len = settingJs.pageTransitionSequence.length - 1,
                    currentPage = '',
                    direction = '',
                    currentIdx = 0;

                scope.allowInputControls = true;

                scope.$on('bz:allowInputControls', function (event, data) {
                    scope.allowInputControls = data;
                });

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    currentPage = toState.name;
                    currentIdx = settingJs.pageTransitionSequence.getIndexBy('stateName', currentPage);

                    $timeout(function () {
                        scope.allowInputControls = true;
                    }, settingJs.pageTransitionDelay);
                });

                iElement.on('keydown', function (event) {
                    currentPage = $state.current.name;
                    if (event.keyCode === 38 || event.keyCode === 39) {
                        direction = 'down';
                        gotoPage(currentPage, direction);
                    }
                    if (event.keyCode === 37 || event.keyCode === 40) {
                        direction = 'up';
                        gotoPage(currentPage, direction);
                    }
                });

                iElement.mousewheel(function (event, delta, deltaX, deltaY) {
                    direction = delta > 0 ? 'down' : 'up';
                    gotoPage(currentPage, direction);
                });

                function gotoPage(page, dir) {
                    if (scope.allowInputControls) {
                        scope.allowInputControls = false;
                        if (dir === 'up') {
                            currentIdx++;
                        } else {
                            currentIdx--;
                        }
                        if (settingJs.pageTransitionLoop) {
                            if (currentIdx > len) currentIdx = 0;
                            if (currentIdx < 0) currentIdx = len;
                        } else {
                            if (currentIdx > len) currentIdx = len;
                            if (currentIdx < 0) currentIdx = 0;
                            $timeout(function () {
                                scope.allowInputControls = true;
                            }, settingJs.pageTransitionDelay);
                        }
                        $state.go(settingJs.pageTransitionSequence[currentIdx].stateName);
                    }
                }
            }
        };
    }

    function bzValidPasswordMatch() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var pw = $(iAttrs.bzValidPasswordMatch);

                ngModel.$parsers.push(function (value) {
                    ngModel.$setValidity('match', value !== '' && value === pw[0].value);
                    return value;
                });
            }
        };
    }

    function bzPasswordStrength() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var PASSWORD_PATTERN = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
                var element = $(iAttrs.bzPasswordStrength);

                iElement.on('focus', function (event) {
                    element.show();
                });

                iElement.on('blur', function (event) {
                    element.hide();
                });

                ngModel.$parsers.push(function (value) {
                    var level = 0;
                    if (value.length >= 8) {
                        angular.forEach(PASSWORD_PATTERN, function (regex) {
                            if (regex.test(value)) {
                                level++;
                            }
                        });
                        scope.passwordStrength = level;
                    }
                });
            }
        };
    }

    function bzWordCount() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var maxW = parseInt(iAttrs.maxWords);
                var minW = parseInt(iAttrs.minWords) || 0;
                var wordCount = 0;

                ngModel.$parsers.push(function (value) {
                    wordCount = value.trim().replace(/(\r\n|\n|\r)/gm, ' ').replace(/\.\s+/g, ' ').split(' ').length;
                    ngModel.$setValidity('mixwords', wordCount >= minW);
                    ngModel.$setValidity('maxwords', wordCount <= maxW);
                    return value;
                });
            }
        };
    }

    function bzValidExist($resource) {
        return {
            require: 'ngModel',
            scope: {
                bzValidExist: '='
            },
            link: function (scope, iElement, iAttrs, ngModel) {
                var data = scope.bzValidExist;
                iElement.on('focus', function (event) {
                    $(data.selector).hide();
                });

                iElement.on('blur', function (event) {
                    data.value = ngModel.$viewValue;
                    var User = $resource(data.url);
                    var userInfo = new User(data);

                    userInfo.$save(function (resp) {
                        //ngModel.$setValidity('recordexist', !resp.status);
                        if (resp.status) {
                            $(data.selector).show();
                        }
                    });

                    scope.$apply();
                });
            }
        };
    }

    function bzValidPassword() {
        var PASSWORD_FORMATS = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    var status = true;

                    angular.forEach(PASSWORD_FORMATS, function (regex) {
                        status = status && regex.test(value);
                    });

                    ngModel.$setValidity('passwordcharacters', status);
                    return value;
                });
            }
        };
    }

    function bzValidFileInput($parse) {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var fileSelected = [],
                    fileSize = iAttrs.fileSize,
                    fileType = iAttrs.fileType.split(',');

                var model = $parse(iAttrs.ngModel);
                var modelSetter = model.assign;

                scope.$on('bz:clearFileInput', function () {
                    ngModel.$setViewValue(null);
                    ngModel.$render();
                    iElement.val('');
                });

                iElement.on('change', function () {
                    scope.$apply(function () {
                        fileSelected = iElement[0].files;
                        modelSetter(scope, iElement[0].files);

                        customValidator(iElement.val());
                    });
                });

                function customValidator(value) {
                    var ouputSize = [];
                    var ouputType = [];

                    for (var i = 0; i < fileSelected.length; i++) {
                        if (fileSelected[i].size > fileSize) {
                            ouputSize.push(fileSelected[i]);
                        }
                        if (fileType.indexOf(fileSelected[i].type) === -1) {
                            ouputType.push(fileSelected[i]);
                        }
                    }

                    ngModel.$setValidity('filesize', ouputSize.length === 0);
                    ngModel.$setValidity('filetype', ouputType.length === 0);

                    return value;
                }
            }
        };
    }

    function bzSubmit() {
        return {
            replace: true,
            transclude: true,
            template: '<button>' +
            '<ng-transclude></ng-transclude>' +
            '<div class="circle animFade" ng-if="type===\'circle\'"></div>' +
            '<div class="bar animFade" ng-if="type===\'bar\'">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '</div>' +
            '</button>',
            link: function (scope, iElement, iAttrs) {
                scope.type = iAttrs.loadingIcon || 'circle';
            }
        };
    }

    function bzPageTransition($animate, bzValueSvc) {
        return {
            link: function (scope, iElement, iAttrs) {
                var inClass = '', outClass = '';
                var curAnim = iAttrs.bzPageTransition.split(',');

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    var uiView = $('.mainView');

                    if (bzValueSvc.loadCounter > 1) {
                        if (is.desktop()) {
                            var animFrom = 0, animTo = 0;

                            if (toState.name === fromState.name) {
                                animData(0);
                                uiView.eq(0).addClass(inClass);
                                uiView.eq(1).addClass(outClass);
                            } else {
                                for (var i = 0; i < settingJs.pageTransitionSequence.length; i++) {
                                    if (settingJs.pageTransitionSequence[i].stateName === fromState.name) {
                                        animFrom = i;
                                    }
                                    if (settingJs.pageTransitionSequence[i].stateName === toState.name) {
                                        animTo = i;
                                    }
                                }

                                uiView.removeClass(inClass + ' ' + outClass);

                                // Next
                                if (animFrom < animTo) {
                                    animData(parseInt(curAnim[0]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                                // Prev
                                if (animFrom > animTo) {
                                    animData(parseInt(curAnim[1]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                            }
                        }

                        $animate.on('enter', uiView.eq(0), function (element, phase) {
                            if (phase === 'close') {
                                scope.$broadcast('bz:pageTransitionCompleted', '');
                            }
                        });
                    } else {
                        animData(0);
                        uiView.eq(0).addClass(inClass);
                        uiView.eq(1).addClass(outClass);
                    }
                });

                function animData(index) {
                    switch (index) {
                        case 0:
                            outClass = 'pt-page-fadeOut';
                            inClass = 'pt-page-fadeIn';
                            break;
                        case 1:
                            outClass = 'pt-page-moveToLeft';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 2:
                            outClass = 'pt-page-moveToRight';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 3:
                            outClass = 'pt-page-moveToTop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 4:
                            outClass = 'pt-page-moveToBottom';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 5:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromRight pt-page-ontop';
                            break;
                        case 6:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromLeft pt-page-ontop';
                            break;
                        case 7:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromBottom pt-page-ontop';
                            break;
                        case 8:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromTop pt-page-ontop';
                            break;
                        case 9:
                            outClass = 'pt-page-moveToLeftFade';
                            inClass = 'pt-page-moveFromRightFade';
                            break;
                        case 10:
                            outClass = 'pt-page-moveToRightFade';
                            inClass = 'pt-page-moveFromLeftFade';
                            break;
                        case 11:
                            outClass = 'pt-page-moveToTopFade';
                            inClass = 'pt-page-moveFromBottomFade';
                            break;
                        case 12:
                            outClass = 'pt-page-moveToBottomFade';
                            inClass = 'pt-page-moveFromTopFade';
                            break;
                        case 13:
                            outClass = 'pt-page-moveToLeftEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 14:
                            outClass = 'pt-page-moveToRightEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 15:
                            outClass = 'pt-page-moveToTopEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 16:
                            outClass = 'pt-page-moveToBottomEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 17:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromRight pt-page-ontop';
                            break;
                        case 18:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromLeft pt-page-ontop';
                            break;
                        case 19:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromBottom pt-page-ontop';
                            break;
                        case 20:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromTop pt-page-ontop';
                            break;
                        case 21:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-scaleUpDown pt-page-delay300';
                            break;
                        case 22:
                            outClass = 'pt-page-scaleDownUp';
                            inClass = 'pt-page-scaleUp pt-page-delay300';
                            break;
                        case 23:
                            outClass = 'pt-page-moveToLeft pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 24:
                            outClass = 'pt-page-moveToRight pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 25:
                            outClass = 'pt-page-moveToTop pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 26:
                            outClass = 'pt-page-moveToBottom pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 27:
                            outClass = 'pt-page-scaleDownCenter';
                            inClass = 'pt-page-scaleUpCenter pt-page-delay400';
                            break;
                        case 28:
                            outClass = 'pt-page-rotateRightSideFirst';
                            inClass = 'pt-page-moveFromRight pt-page-delay200 pt-page-ontop';
                            break;
                        case 29:
                            outClass = 'pt-page-rotateLeftSideFirst';
                            inClass = 'pt-page-moveFromLeft pt-page-delay200 pt-page-ontop';
                            break;
                        case 30:
                            outClass = 'pt-page-rotateTopSideFirst';
                            inClass = 'pt-page-moveFromTop pt-page-delay200 pt-page-ontop';
                            break;
                        case 31:
                            outClass = 'pt-page-rotateBottomSideFirst';
                            inClass = 'pt-page-moveFromBottom pt-page-delay200 pt-page-ontop';
                            break;
                        case 32:
                            outClass = 'pt-page-flipOutRight';
                            inClass = 'pt-page-flipInLeft pt-page-delay500';
                            break;
                        case 33:
                            outClass = 'pt-page-flipOutLeft';
                            inClass = 'pt-page-flipInRight pt-page-delay500';
                            break;
                        case 34:
                            outClass = 'pt-page-flipOutTop';
                            inClass = 'pt-page-flipInBottom pt-page-delay500';
                            break;
                        case 35:
                            outClass = 'pt-page-flipOutBottom';
                            inClass = 'pt-page-flipInTop pt-page-delay500';
                            break;
                        case 36:
                            outClass = 'pt-page-rotateFall pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 37:
                            outClass = 'pt-page-rotateOutNewspaper';
                            inClass = 'pt-page-rotateInNewspaper pt-page-delay500';
                            break;
                        case 38:
                            outClass = 'pt-page-rotatePushLeft';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 39:
                            outClass = 'pt-page-rotatePushRight';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 40:
                            outClass = 'pt-page-rotatePushTop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 41:
                            outClass = 'pt-page-rotatePushBottom';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 42:
                            outClass = 'pt-page-rotatePushLeft';
                            inClass = 'pt-page-rotatePullRight pt-page-delay180';
                            break;
                        case 43:
                            outClass = 'pt-page-rotatePushRight';
                            inClass = 'pt-page-rotatePullLeft pt-page-delay180';
                            break;
                        case 44:
                            outClass = 'pt-page-rotatePushTop';
                            inClass = 'pt-page-rotatePullBottom pt-page-delay180';
                            break;
                        case 45:
                            outClass = 'pt-page-rotatePushBottom';
                            inClass = 'pt-page-rotatePullTop pt-page-delay180';
                            break;
                        case 46:
                            outClass = 'pt-page-rotateFoldLeft';
                            inClass = 'pt-page-moveFromRightFade';
                            break;
                        case 47:
                            outClass = 'pt-page-rotateFoldRight';
                            inClass = 'pt-page-moveFromLeftFade';
                            break;
                        case 48:
                            outClass = 'pt-page-rotateFoldTop';
                            inClass = 'pt-page-moveFromBottomFade';
                            break;
                        case 49:
                            outClass = 'pt-page-rotateFoldBottom';
                            inClass = 'pt-page-moveFromTopFade';
                            break;
                        case 50:
                            outClass = 'pt-page-moveToRightFade';
                            inClass = 'pt-page-rotateUnfoldLeft';
                            break;
                        case 51:
                            outClass = 'pt-page-moveToLeftFade';
                            inClass = 'pt-page-rotateUnfoldRight';
                            break;
                        case 52:
                            outClass = 'pt-page-moveToBottomFade';
                            inClass = 'pt-page-rotateUnfoldTop';
                            break;
                        case 53:
                            outClass = 'pt-page-moveToTopFade';
                            inClass = 'pt-page-rotateUnfoldBottom';
                            break;
                        case 54:
                            outClass = 'pt-page-rotateRoomLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomLeftIn';
                            break;
                        case 55:
                            outClass = 'pt-page-rotateRoomRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomRightIn';
                            break;
                        case 56:
                            outClass = 'pt-page-rotateRoomTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomTopIn';
                            break;
                        case 57:
                            outClass = 'pt-page-rotateRoomBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomBottomIn';
                            break;
                        case 58:
                            outClass = 'pt-page-rotateCubeLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeLeftIn';
                            break;
                        case 59:
                            outClass = 'pt-page-rotateCubeRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeRightIn';
                            break;
                        case 60:
                            outClass = 'pt-page-rotateCubeTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeTopIn';
                            break;
                        case 61:
                            outClass = 'pt-page-rotateCubeBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeBottomIn';
                            break;
                        case 62:
                            outClass = 'pt-page-rotateCarouselLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselLeftIn';
                            break;
                        case 63:
                            outClass = 'pt-page-rotateCarouselRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselRightIn';
                            break;
                        case 64:
                            outClass = 'pt-page-rotateCarouselTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselTopIn';
                            break;
                        case 65:
                            outClass = 'pt-page-rotateCarouselBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselBottomIn';
                            break;
                        case 66:
                            outClass = 'pt-page-rotateSidesOut';
                            inClass = 'pt-page-rotateSidesIn pt-page-delay200';
                            break;
                        case 67:
                            outClass = 'pt-page-rotateSlideOut';
                            inClass = 'pt-page-rotateSlideIn';
                            break;
                    }
                }
            }
        };
    }

    function bzTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                iElement.timepicker();
            }
        };
    }

    function bzDatePicker() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                if (!ngModel) return;

                ngModel.$render = function () {
                    if (ngModel.$viewValue) {
                        var convertedDate = moment(ngModel.$viewValue).format('DD/MM/YYYY');
                        iElement.val(convertedDate || '');
                    }
                };

                iElement.on('blur keyup change', function () {
                    scope.$evalAsync(read);
                });

                read();

                function read() {
                    var date = iElement.val();
                    var convertedDate = moment(date, 'DD/MM/YYYY').toDate();
                    ngModel.$setViewValue(convertedDate);
                }

                iElement.datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onSelect: function (date, data) {
                        scope.$evalAsync(read);
                    }
                });
            }
        };
    }

    function bzDateTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                iElement.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    showTime: false,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                });
            }
        };
    }

    function bzDateRangePicker($timeout) {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                //$timeout(function(){
                var txtStateDate = iElement.find('#dpFrom');
                var txtEndDate = iElement.find('#dpTo');

                console.log(txtStateDate)

                txtStateDate.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onClose: function (dateText, inst) {
                        // if (txtEndDate.val() != '') {
                        //     var testStartDate = txtStateDate.datetimepicker('getDate');
                        //     var testEndDate = txtEndDate.datetimepicker('getDate');
                        //     if (testStartDate > testEndDate)
                        //         txtEndDate.datetimepicker('setDate', testStartDate);
                        // }
                        // else {
                        //     txtEndDate.val(dateText);
                        // }
                    },
                    onSelect: function (selectedDateTime) {
                        txtEndDate.datetimepicker('option', 'minDate', txtStateDate.datetimepicker('getDate'));
                        txtStateDate.datepicker("hide");
                    }
                });
                txtEndDate.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onClose: function (dateText, inst) {
                        // if (txtStateDate.val() != '') {
                        //     var testStartDate = txtStateDate.datetimepicker('getDate');
                        //     var testEndDate = txtEndDate.datetimepicker('getDate');
                        //     if (testStartDate > testEndDate)
                        //         txtStateDate.datetimepicker('setDate', testEndDate);
                        // }
                        // else {
                        //     txtStateDate.val(dateText);
                        // }
                    },
                    onSelect: function (selectedDateTime) {
                        txtStateDate.datetimepicker('option', 'maxDate', txtEndDate.datetimepicker('getDate'));
                        txtEndDate.datepicker("hide");
                    }
                });
                //});
            }
        };
    }

    function bzMedia(bzEvents) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var player = iElement[0];
                registerEvents();

                scope.$on(bzEvents.media.PLAY, function () {
                    play();
                });

                scope.$on(bzEvents.media.PAUSE, function () {
                    pause();
                });

                scope.$on(bzEvents.media.STOP, function () {
                    stop();
                });

                scope.$on(bzEvents.media.SEEK, function (event, data) {
                    seek(data);
                });

                scope.$on(bzEvents.media.VOLUME, function (event, data) {
                    setVolume(data);
                });

                scope.$on(bzEvents.media.FULLSCREEN, function (event, data) {
                    console.log('request Fullscreen');
                    if (data) {
                        helperJs.enterFullScreen(player);
                    } else {
                        helperJs.exitFullScreen();
                    }
                });

                scope.$on(bzEvents.media.ENTER_FULLSCREEN, function (event) {
                    console.log('enter Fullscreen');
                });

                scope.$on(bzEvents.media.EXIT_FULLSCREEN, function (event) {
                    console.log('exit Fullscreen');
                });

                function registerEvents() {
                    document.addEventListener("fullscreenchange", onFullscreenChange, false);
                    document.addEventListener("webkitfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("mozfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("MSFullscreenChange", onFullscreenChange, false);
                    player.addEventListener('webkitendfullscreen', onFullscreenChange, false);
                    iElement.on('ended', function (event) {
                        onEnded();
                    });
                }

                function play() {
                    player.play();
                }

                function pause() {
                    player.pause();
                }

                function stop() {
                    player.pause();
                    player.currentTime = 0;
                }

                function seek(value) {
                    player.currentTime = value;
                }

                function setVolume(value) {
                    player.volume = value;
                }

                function onEnded() {
                    scope.$emit(bzEvents.media.ENDED);
                }

                function onFullscreenChange() {
                    var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
                    if (fullscreenElement) {
                        scope.$emit(bzEvents.media.ENTER_FULLSCREEN);
                    } else {
                        scope.$emit(bzEvents.media.EXIT_FULLSCREEN);
                    }
                }
            }
        };
    }

    function bzLoading() {
        var markup =
            '<div class="loading-mask">' +
            '<div id="bar-wave" class="bar-wave loading-style">' +
            '<div class="bar">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '<div class="rect4"></div>' +
            '<div class="rect5"></div>' +
            '</div>' +
            '</div>' +
            '<div id="circle-spread" class="circle-spread loading-style">' +
            '<div></div>' +
            '<div></div>' +
            '<div></div>' +
            '</div>' +
            '<div id="circle-line-spread" class="circle-line-spread loading-style">' +
            '<div></div>' +
            '<div></div>' +
            '<div></div>' +
            '</div>' +
            '<div id="hoz-load-bar" class="hoz-load-bar loading-style">' +
            '<div class="bar1"></div>' +
            '<div class="bar2"></div>' +
            '<div class="bar3"></div>' +
            '<div class="bar4"></div>' +
            '<div class="bar5"></div>' +
            '<div class="bar6"></div>' +
            '<div class="bar7"></div>' +
            '<div class="bar8"></div>' +
            '</div>' +
            '</div>';
        return {
            restrict: 'E',
            templateUrl: markup,
            replace: true,
            link: function (scope, iElement, iAttrs) {
                iElement.find(iAttrs.loadingType).show();
            }
        };
    }

    function bzCustomScrollbar($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var o = {
                    selector: iElement[0],
                    theme: iAttrs.scrollbarTheme || 'light',
                    scrollbarPosition: iAttrs.scrollbarPosition || 'inside',
                    mouseWheel: {
                        scrollAmount: 20
                    },
                    scrollButtons: {
                        enable: iAttrs.scrollbarArrow === 'true'
                    }
                };

                scope.$on('bz:CustomScrollbarRender', function () {
                    render();
                });

                $timeout(function () {
                    render();
                }, 500);

                function render() {
                    $(o.selector).mCustomScrollbar(o);
                }
            }
        };
    }

    function bzRepeatCompleted() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var arrEvents = iAttrs.bzRepeatCompleted.split(',');
                if (scope.$last) {
                    for (var i = 0; i < arrEvents.length; i++) {
                        scope.$emit(arrEvents[i]);
                    }
                }
            }
        };
    }

    function bzPager($state) {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                pageParams: '=',
                pageState: '@'
            },
            template: '<div class="bz-pager">' +
            '<a class="prev" ng-if="pageParams.page > 1" ui-sref="{{pageState}}({page: pageParams.page - 1 < 1 ? 1 : pageParams.page - 1})"><i class="fa fa-chevron-left"></i></a>' +
            '<a class="first" ng-if="pageParams.page > 3" ui-sref="{{pageState}}({page: 1})">1</a>' +
            '<a class="dot" ng-if="pageParams.page > 3">...</a>' +
            '<a class="num" ng-class="{active: page === pageParams.page}" ng-href="{{toHref(page)}}" ng-repeat="page in pageVisible">{{page}}</a>' +
            '<a class="dot" ng-if="pageParams.page < pageParams.pageCount - 2">...</a>' +
            '<a class="last" ng-if="pageParams.page < pageParams.pageCount - 2" ui-sref="{{pageState}}({page: pageParams.pageCount})">{{pageParams.pageCount}}</a>' +
            '<a class="next" ng-if="pageParams.page < pageParams.pageCount" ui-sref="{{pageState}}({page: (pageParams.page > pageParams.pageCount) ? pageParams.pageCount : (pageParams.page + 1)})"><i class="fa fa-chevron-right"></i></a>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                scope.pageParams.page = parseInt(scope.pageParams.page);
                scope.toHref = toHref;

                processPage();

                scope.$on('bz:pageRefresh', function (event, data) {
                    scope.pageParams.pageCount = data;
                    processPage();
                });

                function toHref(page) {
                    return $state.href(scope.pageState, { page: page });
                };

                function processPage() {
                    scope.pageVisible = [];
                    var pageMin = Math.ceil(Math.min(Math.max(1, scope.pageParams.page - (settingJs.pageVisibleCount / 2)), Math.max(1, scope.pageParams.pageCount - settingJs.pageVisibleCount + 1)));
                    var pageMax = Math.ceil(Math.min(scope.pageParams.pageCount, pageMin + settingJs.pageVisibleCount - 1));
                    for (var i = pageMin; i <= pageMax; i++) {
                        scope.pageVisible.push(i);
                    }
                }
            }
        };
    }

    function bzParallax($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                if (is.desktop()) {
                    scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                        $timeout(function () {
                            iElement.find(iAttrs.bzParallax).parallax();
                        }, 1000);
                    });

                    scope.$on('$destroy', function () {
                        iElement.find(iAttrs.bzParallax).parallax('disable');
                    });
                }
            }
        };
    }

    function bzFancybox($rootScope) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                if (helperJs.isUndefinedNullEmpty(iAttrs.bzFancybox)) {
                    scope.$on('bz:fancyBox', function () {
                        fancyBox();
                    });
                } else if (iAttrs.bzFancybox === 'static') {
                    fancyBox();
                }

                function fancyBox() {
                    iElement.find('a.fancybox').fancybox({
                        beforeLoad: function () {
                            $rootScope.$broadcast('bz:allowInputControls', false);
                        },
                        beforeClose: function () {
                            $rootScope.$broadcast('bz:allowInputControls', true);
                        }
                    });
                }
            }
        }
    }

    function bzInfinityScroll() {
        return {
            restrict: 'A',
            scope: {
                bzInfinityScroll: '&',
                bzInfinityBottom: '@'
            },
            link: function (scope, iElement, iAttrs) {
                var win = $(window);
                scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    if (fromState.name !== toState.name) {
                        win.off('scroll.infinity');
                    }
                });

                win.on('scroll.infinity', helperJs.debounce(function (event) {
                    var offset = isNaN(scope.bzInfinityBottom) ? $(scope.bzInfinityBottom).position().top : parseInt(scope.bzInfinityBottom);
                    if (win.scrollTop() + win.height() >= $(document).height() - offset) {
                        scope.bzInfinityScroll();
                    }
                }, 500));
            }
        };
    }

    function bzFullframe() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var jRes = jRespond([
                    { label: 'handheld', enter: 0, exit: 1023 },
                    { label: 'desktop', enter: 1024, exit: 10000 }
                ]);

                jRes.addFunc({
                    breakpoint: 'handheld',
                    enter: function () {
                        $('html').removeClass(iAttrs.bzFullframe);
                    }
                });

                jRes.addFunc({
                    breakpoint: 'desktop',
                    enter: function () {
                        $('html').addClass(iAttrs.bzFullframe);
                    }
                });
            }
        };
    }

    function bzTag() {
        return {
            require: '?ngModel',
            replace: true,
            template: '<div class="bz-tag form-control">' +
            '<ul>' +
            '<li ng-repeat="key in keys track by $index">{{key}}<i class="glyphicon glyphicon-remove" ng-click="remove($index)"></i></li>' +
            '</ul>' +
            '<input type="text" placeholder="Enter để thêm từ khoá" />' +
            '<div class="clearfix"></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs, ngModel) {
                scope.keys = [];
                scope.remove = remove;

                iElement.find('input').on('keypress', function (event) {
                    if (event.keyCode === 13) {
                        var text = $.trim($(this).val());
                        if (scope.keys.indexOf(text) === -1 && text.length > 0) {
                            scope.keys.push(text);
                            console.log(scope.keys);

                            $(this).val('');
                            ngModel.$setViewValue(scope.keys);
                        }

                        scope.$apply();

                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                });

                function remove(index) {
                    scope.keys.splice(index, 1);
                    ngModel.$setViewValue(scope.keys);
                }
            }
        };
    }
    function bzCheckDate() {
        return {
            require: "ngModel",
            link: function (scope, elem, attr, modelCtrl) {

                modelCtrl.$parsers.push(function (value) {
                    modelCtrl.$setValidity('isdate', moment(value, ["DD/MM/YYYY"], true).isValid() == true || value =='');
                    return value;
                });
            }
        }
    }
    function bzInputNumber() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                iElement.on('keypress', function (event) {
                    // Start: Allow Dot
                    if (iAttrs.allowDot == '1') {
                        if (event.which != 8 && event.which != 0 && event.which != 46 && (event.which < 48 || event.which > 57)) {
                            return false;
                        }
                    }
                    // Start: Allow Dot
                    else {
                        if (event.which != 8 && event.which != 0 && (event.which < 48 || event.which > 57)) {
                            return false;
                        }
                    }
                });
            }
        };
    }

    function bzCropper($state, $timeout) {
        return {
            replace: true,
            templateUrl: '/assets/global/cropper/crop.html',
            link: function (scope, iElement, iAttrs) {
                var cropper = null,
                    flipCircle = 0,
                    fileInput = iElement.find('#cropper-input-file'),
                    imgCrop = iElement.find('#cropper-img');

                scope.showButtonCrop = false;
                scope.loading = false;

                scope.getImage = getImage;
                scope.setImage = setImage;
                scope.fileTrigger = fileTrigger;
                scope.zoom = zoom;
                scope.rotate = rotate;
                scope.scale = scale;

                scope.$on('$destroy', function () {
                    cropper.cropper('destroy');
                });

                if (iAttrs.cropImage) {
                    scope.loading = true;
                    imgCrop[0].crossOrigin = 'anonymous';
                    imgCrop[0].src = iAttrs.cropImage;

                    $timeout(function () {
                        scope.showButtonCrop = true;
                        initCropper();
                    }, 1000);

                } else {
                    initCropper();
                }

                function fileTrigger() {
                    console.log(123);
                    iElement.find('#cropper-input-file').click();
                }

                function zoom(val) {
                    cropper.cropper('zoom', val);
                }

                function rotate(val) {
                    if (val) {
                        cropper.cropper('rotate', val);
                    } else {
                        cropper.cropper('rotate', 90)
                    }
                }

                function scale(val) {
                    if (val) {
                        cropper.cropper('scale', val);
                    } else {
                        flipCircle++;
                        switch (flipCircle) {
                            case 1: cropper.cropper('scale', -1, 1); break;
                            case 2: cropper.cropper('scale', 1, -1); break;
                            case 3: cropper.cropper('scale', -1, -1); break;
                            case 4: cropper.cropper('scale', 1, 1); flipCircle = 0; break;
                        }
                    }
                }

                function initCropper() {
                    cropper = imgCrop.cropper({
                        aspectRatio: iAttrs.cropRatio,
                        guides: false
                    });
                    scope.loading = false;
                }

                function setImage(obj) {
                    var URL = window.URL || window.webkitURL,
                        blobURL;

                    if (URL) {
                        blobURL = URL.createObjectURL(obj.files[0]);
                        imgCrop.one('built.cropper', function () {
                            URL.revokeObjectURL(blobURL);
                        }).cropper('reset').cropper('replace', blobURL);

                        setTimeout(function () {
                            scope.$apply(function () {
                                scope.showButtonCrop = true;
                            });
                        })

                    }
                }

                function getImage() {
                    var canvasData = cropper.cropper('getCroppedCanvas', {
                        width: iAttrs.cropWidth,
                        height: iAttrs.cropHeight
                    });

                    var imgCropped = canvasData.toDataURL(iAttrs.cropMime);

                    scope.$root.$broadcast(iAttrs.cropEvent, { image: imgCropped });
                }
            }
        };
    }

    // bzRestrictInput by The Boss
    function bzInputOnlyDigits() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function (inputValue) {
                    if (inputValue == undefined) return '';
                    var transformedInput = inputValue.replace(/[^0-9]/g, '');
                    if (transformedInput !== inputValue) {
                        modelCtrl.$setViewValue(transformedInput);
                        modelCtrl.$render();
                    }
                    return transformedInput;
                });
            }
        }
    }
})();


// function bzInputMatch() {
//     return {
//         restrict: 'A',
//         scope: true,
//         require: 'ngModel',
//         link: function (scope, elem, attrs, control) {
//             var checker = function () {

//                 //lấy giá trị 
//                 var e1 = scope.$eval(attrs.ngModel);

//                 //lấy giá trị của xác nhận
//                 var e2 = scope.$eval(attrs.bzInputMatch);
//                 return e1 == e2;
//             };
//             scope.$watch(checker, function (n) {


//                 control.$setValidity("unique", n);
//             });
//         }
//     };
// }
(function(){
	'use strict';

	angular
	.module('bzApp')
	/*https://github.com/linhmtran168/vietnam-gis-crawler/edit/master/data.json*/
	.constant('VIETNAM_MAP',[
	{  
		"1":{  
			"name":"Thành phố Cần Thơ",
			"districts":{  
				"66":"Huyện Cờ Đỏ",
				"67":"Huyện Phong Điền",
				"68":"Huyện Thới Lai",
				"69":"Huyện Vĩnh Thạnh",
				"70":"Quận Bình Thủy",
				"71":"Quận Cái Răng",
				"72":"Quận Ninh Kiều",
				"73":"Quận Ô Môn",
				"74":"Quận Thốt Nốt"
			}
		},
		"2":{  
			"name":"Thành phố Đà Nẵng",
			"districts":{  
				"76":"Huyện Hòa Vang",
				"77":"Huyện Hoàng Sa",
				"78":"Quận Cẩm Lệ",
				"79":"Quận Hải Châu",
				"80":"Quận Liên Chiểu",
				"81":"Quận Ngũ Hành Sơn",
				"82":"Quận Sơn Trà",
				"83":"Quận Thanh Khê"
			}
		},
		"3":{  
			"name":"Thành phố Hà Nội",
			"districts":{  
				"85":"Huyện Ba Vì",
				"86":"Huyện Chương Mỹ",
				"87":"Huyện Đan Phượng",
				"88":"Huyện Đông Anh",
				"89":"Huyện Gia Lâm",
				"90":"Huyện Hoài Đức",
				"91":"Huyện Mê Linh",
				"92":"Huyện Mỹ Đức",
				"93":"Huyện Phú Xuyên",
				"94":"Huyện Phúc Thọ",
				"95":"Huyện Quốc Oai",
				"96":"Huyện Sóc Sơn",
				"97":"Huyện Thạch Thất",
				"98":"Huyện Thanh Oai",
				"99":"Huyện Thanh Trì",
				"100":"Huyện Thường Tín",
				"101":"Huyện Từ Liêm",
				"102":"Huyện ứng Hòa",
				"103":"Quận Ba Đình",
				"104":"Quận Cầu Giấy",
				"105":"Quận Đống Đa",
				"106":"Quận Hà Đông",
				"107":"Quận Hai Bà Trưng",
				"108":"Quận Hoàn Kiếm",
				"109":"Quận Hoàng Mai",
				"110":"Quận Long Biên",
				"111":"Quận Tây Hồ",
				"112":"Quận Thanh Xuân",
				"113":"Thị xã Sơn Tây"
			}
		},
		"4":{  
			"name":"Thành phố Hải Phòng",
			"districts":{  
				"115":"Huyện An Dương",
				"116":"Huyện An Lão",
				"117":"Huyện Bạch Long Vĩ",
				"118":"Huyện Cát Hải",
				"119":"Huyện Kiến Thụy",
				"120":"Huyện Thủy Nguyên",
				"121":"Huyện Tiên Lãng",
				"122":"Huyện Vĩnh Bảo",
				"123":"Quận Đồ Sơn",
				"124":"Quận Dương Kinh",
				"125":"Quận Hải An",
				"126":"Quận Hồng Bàng",
				"127":"Quận Kiến An",
				"128":"Quận Lê Chân",
				"129":"Quận Ngô Quyền"
			}
		},
		"5":{  
			"name":"Thành phố Hồ Chí Minh",
			"districts":{  
				"131":"Huyện Bình Chánh",
				"132":"Huyện Cần Giờ",
				"133":"Huyện Củ Chi",
				"134":"Huyện Hóc Môn",
				"135":"Huyện Nhà Bè",
				"136":"Quận 1",
				"137":"Quận 10",
				"138":"Quận 11",
				"139":"Quận 12",
				"140":"Quận 2",
				"141":"Quận 3",
				"142":"Quận 4",
				"143":"Quận 5",
				"144":"Quận 6",
				"145":"Quận 7",
				"146":"Quận 8",
				"147":"Quận 9",
				"148":"Quận Bình Tân",
				"149":"Quận Bình Thạnh",
				"150":"Quận Gò Vấp",
				"151":"Quận Phú Nhuận",
				"152":"Quận Tân Bình",
				"153":"Quận Tân Phú",
				"154":"Quận Thủ Đức"
			}
		},
		"6":{  
			"name":"Tỉnh An Giang",
			"districts":{  
				"155":"Huyện An Phú",
				"156":"Huyện Châu Phú",
				"157":"Huyện Châu Thành",
				"158":"Huyện Chợ Mới",
				"159":"Huyện Phú Tân",
				"160":"Huyện Thoại Sơn",
				"161":"Huyện Tịnh Biên",
				"162":"Huyện Tri Tôn",
				"163":"Thành phố Long Xuyên",
				"164":"Thị xã Châu Đốc",
				"165":"Thị xã Tân Châu"
			}
		},
		"7":{  
			"name":"Tỉnh Bà Rịa-Vũng Tàu",
			"districts":{  
				"166":"Huyện Châu Đức",
				"167":"Huyện Côn Đảo",
				"168":"Huyện Đất Đỏ",
				"169":"Huyện Long Điền",
				"170":"Huyện Tân Thành",
				"171":"Huyện Xuyên Mộc",
				"172":"Thành phố Vũng Tàu",
				"173":"Thị xã Bà Rịa"
			}
		},
		"8":{  
			"name":"Tỉnh Bắc Giang",
			"districts":{  
				"174":"Huyện Hiệp Hòa",
				"175":"Huyện Lạng Giang",
				"176":"Huyện Lục Nam",
				"177":"Huyện Lục Ngạn",
				"178":"Huyện Sơn Động",
				"179":"Huyện Tân Yên",
				"180":"Huyện Việt Yên",
				"181":"Huyện Yên Dũng",
				"182":"Huyện Yên Thế",
				"183":"Thành phố Bắc Giang"
			}
		},
		"9":{  
			"name":"Tỉnh Bắc Kạn",
			"districts":{  
				"184":"Huyện Ba Bể",
				"185":"Huyện Bạch Thông",
				"186":"Huyện Chợ Đồn",
				"187":"Huyện Chợ Mới",
				"188":"Huyện Na Rì",
				"189":"Huyện Ngân Sơn",
				"190":"Huyện Pác Nặm",
				"191":"Thị xã Bắc Kạn"
			}
		},
		"10":{  
			"name":"Tỉnh Bạc Liêu",
			"districts":{  
				"192":"Huyện Đông Hải",
				"193":"Huyện Giá Rai",
				"194":"Huyện Hòa Bình",
				"195":"Huyện Hồng Dân",
				"196":"Huyện Phước Long",
				"197":"Huyện Vĩnh Lợi",
				"198":"Thành Phố Bạc Liêu"
			}
		},
		"11":{  
			"name":"Tỉnh Bắc Ninh",
			"districts":{  
				"199":"Huyện Gia Bình",
				"200":"Huyện Lương Tài",
				"201":"Huyện Quế Võ",
				"202":"Huyện Thuận Thành",
				"203":"Huyện Tiên Du",
				"204":"Huyện Yên Phong",
				"205":"Thành phố Bắc Ninh",
				"206":"Thị xã Từ Sơn"
			}
		},
		"12":{  
			"name":"Tỉnh Bến Tre",
			"districts":{  
				"207":"Huyện Ba Tri",
				"208":"Huyện Bình Đại",
				"209":"Huyện Châu Thành",
				"210":"Huyện Chợ Lách",
				"211":"Huyện Giồng Trôm",
				"212":"Huyện Mỏ Cày Bắc",
				"213":"Huyện Mỏ Cày Nam",
				"214":"Huyện Thạnh Phú",
				"215":"Thành phố Bến Tre"
			}
		},
		"13":{  
			"name":"Tỉnh Bình Định",
			"districts":{  
				"216":"Huyện An Lão",
				"217":"Huyện An Nhơn",
				"218":"Huyện Hoài  Ân",
				"219":"Huyện Hoài Nhơn",
				"220":"Huyện Phù Mỹ",
				"221":"Huyện Phù cát",
				"222":"Huyện Tây Sơn",
				"223":"Huyện Tuy Phước",
				"224":"Huyện Vân Canh",
				"225":"Huyện Vĩnh Thạnh",
				"226":"Thành phố Quy Nhơn"
			}
		},
		"14":{  
			"name":"Tỉnh Bình Dương",
			"districts":{  
				"227":"Huyện Bến Cát",
				"228":"Huyện Dầu Tiếng",
				"229":"Huyện Dĩ An",
				"230":"Huyện Phú Giáo",
				"231":"Huyện Tân Uyên",
				"232":"Huyện Thuận An",
				"233":"Thị xã Thủ Dầu Một"
			}
		},
		"15":{  
			"name":"Tỉnh Bình Phước",
			"districts":{  
				"234":"Huyện Bù Đăng",
				"235":"Huyện Bù Đốp",
				"236":"Huyện Bù Gia Mập",
				"237":"Huyện Chơn Thành",
				"238":"Huyện Đồng Phú",
				"239":"Huyện Hớn Quản",
				"240":"Huyện Lộc Ninh",
				"241":"Thị xã Bình Long",
				"242":"Thị xã Đồng Xoài",
				"243":"Thị xã Phước Long"
			}
		},
		"16":{  
			"name":"Tỉnh Bình Thuận",
			"districts":{  
				"244":"Huyện  Đức Linh",
				"245":"Huyện Bắc Bình",
				"246":"Huyện Hàm Tân",
				"247":"Huyện Hàm Thuận Bắc",
				"248":"Huyện Hàm Thuận Nam",
				"249":"Huyện Phú Qúi",
				"250":"Huyện Tánh Linh",
				"251":"Huyện Tuy Phong",
				"252":"Thành phố Phan Thiết",
				"253":"Thị xã La Gi"
			}
		},
		"17":{  
			"name":"Tỉnh Cà Mau",
			"districts":{  
				"254":"Huyện Cái Nước",
				"255":"Huyện Đầm Dơi",
				"256":"Huyện Năm Căn",
				"257":"Huyện Ngọc Hiển",
				"258":"Huyện Phú Tân",
				"259":"Huyện Thới Bình",
				"260":"Huyện Trần Văn Thời",
				"261":"Huyện U Minh",
				"262":"Thành phố Cà Mau"
			}
		},
		"18":{  
			"name":"Tỉnh Cao Bằng",
			"districts":{  
				"263":"Huyện Bảo Lạc",
				"264":"Huyện Bảo Lâm",
				"265":"Huyện Hạ Lang",
				"266":"Huyện Hà Quảng",
				"267":"Huyện Hòa An",
				"268":"Huyện Nguyên Bình",
				"269":"Huyện Phục Hòa",
				"270":"Huyện Quảng Uyên",
				"271":"Huyện Thạch An",
				"272":"Huyện Thông Nông",
				"273":"Huyện Trà Lĩnh",
				"274":"Huyện Trùng Khánh",
				"275":"Thị xã Cao Bằng"
			}
		},
		"19":{  
			"name":"Tỉnh Đắk Lắk",
			"districts":{  
				"276":"Huyện Buôn Đôn",
				"277":"Huyện Cư Kuin",
				"278":"Huyện Cư MGar",
				"279":"Huyện Ea Kar",
				"280":"Huyện Ea Súp",
				"281":"Huyện EaHLeo",
				"282":"Huyện Krông Ana",
				"283":"Huyện Krông Bông",
				"284":"Huyện Krông Búk",
				"285":"Huyện Krông Năng",
				"286":"Huyện Krông Pắc",
				"287":"Huyện Lắk",
				"288":"Huyện MDrắk",
				"289":"Thành phố Buôn Ma Thuột",
				"290":"Thị xã Buôn Hồ"
			}
		},
		"20":{  
			"name":"Tỉnh Đắk Nông",
			"districts":{  
				"291":"Huyện Cư Jút",
				"292":"Huyện Đắk GLong",
				"293":"Huyện Đắk Mil",
				"294":"Huyện Đắk RLấp",
				"295":"Huyện Đắk Song",
				"296":"Huyện KRông Nô",
				"297":"Huyện Tuy Đức",
				"298":"Thị xã Gia Nghĩa"
			}
		},
		"21":{  
			"name":"Tỉnh Điện Biên",
			"districts":{  
				"299":"Huyện Điện Biên",
				"300":"Huyện Điện Biên Đông",
				"301":"Huyện Mường Chà",
				"302":"Huyện Mương Nhé",
				"303":"Huyện Mường ảng",
				"304":"Huyện Tủa Chùa",
				"305":"Huyện Tuần Giáo",
				"306":"Thành phố Điện Biên phủ",
				"307":"Thị xã Mường Lay"
			}
		},
		"22":{  
			"name":"Tỉnh Đồng Nai",
			"districts":{  
				"308":"Huyện Cẩm Mỹ",
				"309":"Huyện Định Quán",
				"310":"Huyện Long Thành",
				"311":"Huyện Nhơn Trạch",
				"312":"Huyện Tân Phú",
				"313":"Huyện Thống Nhất",
				"314":"Huyện Trảng Bom",
				"315":"Huyện Vĩnh Cửu",
				"316":"Huyện Xuân Lộc",
				"317":"Thành phố Biên Hòa",
				"318":"Thị xã Long Khánh"
			}
		},
		"23":{  
			"name":"Tỉnh Đồng Tháp",
			"districts":{  
				"319":"Huyện Cao Lãnh",
				"320":"Huyện Châu Thành",
				"321":"Huyện Hồng Ngự",
				"322":"Huyện Lai Vung",
				"323":"Huyện Lấp Vò",
				"324":"Huyện Tam Nông",
				"325":"Huyện Tân Hồng",
				"326":"Huyện Thanh Bình",
				"327":"Huyện Tháp Mười",
				"328":"Thành phố Cao Lãnh",
				"329":"Thị xã Hồng Ngự",
				"330":"Thị xã Sa Đéc"
			}
		},
		"24":{  
			"name":"Tỉnh Gia Lai",
			"districts":{  
				"331":"Huyện Chư Păh",
				"332":"Huyện Chư Pưh",
				"333":"Huyện Chư Sê",
				"334":"Huyện ChưPRông",
				"335":"Huyện Đăk Đoa",
				"336":"Huyện Đăk Pơ",
				"337":"Huyện Đức Cơ",
				"338":"Huyện Ia Grai",
				"339":"Huyện Ia Pa",
				"340":"Huyện KBang",
				"341":"Huyện KBang",
				"342":"Huyện Kông Chro",
				"343":"Huyện Krông Pa",
				"344":"Huyện Mang Yang",
				"345":"Huyện Phú Thiện",
				"346":"Thành phố Plei Ku",
				"347":"Thị xã AYun Pa",
				"348":"Thị xã An Khê"
			}
		},
		"25":{  
			"name":"Tỉnh Hà Giang",
			"districts":{  
				"349":"Huyện Bắc Mê",
				"350":"Huyện Bắc Quang",
				"351":"Huyện Đồng Văn",
				"352":"Huyện Hoàng Su Phì",
				"353":"Huyện Mèo Vạc",
				"354":"Huyện Quản Bạ",
				"355":"Huyện Quang Bình",
				"356":"Huyện Vị Xuyên",
				"357":"Huyện Xín Mần",
				"358":"Huyện Yên Minh",
				"359":"Thành Phố Hà Giang"
			}
		},
		"26":{  
			"name":"Tỉnh Hà Nam",
			"districts":{  
				"360":"Huyện Bình Lục",
				"361":"Huyện Duy Tiên",
				"362":"Huyện Kim Bảng",
				"363":"Huyện Lý Nhân",
				"364":"Huyện Thanh Liêm",
				"365":"Thành phố Phủ Lý"
			}
		},
		"27":{  
			"name":"Tỉnh Hà Tĩnh",
			"districts":{  
				"366":"Huyện Cẩm Xuyên",
				"367":"Huyện Can Lộc",
				"368":"Huyện Đức Thọ",
				"369":"Huyện Hương Khê",
				"370":"Huyện Hương Sơn",
				"371":"Huyện Kỳ Anh",
				"372":"Huyện Lộc Hà",
				"373":"Huyện Nghi Xuân",
				"374":"Huyện Thạch Hà",
				"375":"Huyện Vũ Quang",
				"376":"Thành phố Hà Tĩnh",
				"377":"Thị xã Hồng Lĩnh"
			}
		},
		"28":{  
			"name":"Tỉnh Hải Dương",
			"districts":{  
				"378":"Huyện Bình Giang",
				"379":"Huyện Cẩm Giàng",
				"380":"Huyện Gia Lộc",
				"381":"Huyện Kim Thành",
				"382":"Huyện Kinh Môn",
				"383":"Huyện Nam Sách",
				"384":"Huyện Ninh Giang",
				"385":"Huyện Thanh Hà",
				"386":"Huyện Thanh Miện",
				"387":"Huyện Tứ Kỳ",
				"388":"Thành phố Hải Dương",
				"389":"Thị xã Chí Linh"
			}
		},
		"29":{  
			"name":"Tỉnh Hậu Giang",
			"districts":{  
				"390":"Huyện Châu Thành",
				"391":"Huyện Châu Thành A",
				"392":"Huyện Long Mỹ",
				"393":"Huyện Phụng Hiệp",
				"394":"Huyện Vị Thủy",
				"395":"Thành Phố Vị Thanh",
				"396":"Thị xã Ngã Bảy"
			}
		},
		"30":{  
			"name":"Tỉnh Hòa Bình",
			"districts":{  
				"397":"Huyện Cao Phong",
				"398":"Huyện Đà Bắc",
				"399":"Huyện Kim Bôi",
				"400":"Huyện Kỳ Sơn",
				"401":"Huyện Lạc Sơn",
				"402":"Huyện Lạc Thủy",
				"403":"Huyện Lương Sơn",
				"404":"Huyện Mai Châu",
				"405":"Huyện Tân Lạc",
				"406":"Huyện Yên Thủy",
				"407":"Thành phố Hòa Bình"
			}
		},
		"31":{  
			"name":"Tỉnh Hưng Yên",
			"districts":{  
				"408":"Huyện Ân Thi",
				"409":"Huyện Khoái Châu",
				"410":"Huyện Kim Động",
				"411":"Huyện Mỹ Hào",
				"412":"Huyện Phù Cừ",
				"413":"Huyện Tiên Lữ",
				"414":"Huyện Văn Giang",
				"415":"Huyện Văn Lâm",
				"416":"Huyện Yên Mỹ",
				"417":"Thành phố Hưng Yên"
			}
		},
		"32":{  
			"name":"Tỉnh Khánh Hòa",
			"districts":{  
				"418":"Huyện Cam Lâm",
				"419":"Huyện Diên Khánh",
				"420":"Huyện Khánh Sơn",
				"421":"Huyện Khánh Vĩnh",
				"422":"Huyện Ninh Hòa",
				"423":"Huyện Trường Sa",
				"424":"Huyện Vạn Ninh",
				"425":"Thành phố Nha Trang",
				"426":"Thị xã Cam Ranh"
			}
		},
		"33":{  
			"name":"Tỉnh Kiên Giang",
			"districts":{  
				"427":"Huyện An Biên",
				"428":"Huyện An Minh",
				"429":"Huyện Châu Thành",
				"430":"Huyện Giang Thành",
				"431":"Huyện Giồng Riềng",
				"432":"Huyện Gò Quao",
				"433":"Huyện Hòn Đất",
				"434":"Huyện Kiên Hải",
				"435":"Huyện Kiên Lương",
				"436":"Huyện Phú Quốc",
				"437":"Huyện Tân Hiệp",
				"438":"Huyện U Minh Thượng",
				"439":"Huyện Vĩnh Thuận",
				"440":"Thành phố Rạch Giá",
				"441":"Thị xã Hà Tiên"
			}
		},
		"34":{  
			"name":"Tỉnh Kon Tum",
			"districts":{  
				"442":"Huyện Đắk Glei",
				"443":"Huyện Đắk Hà",
				"444":"Huyện Đắk Tô",
				"445":"Huyện Kon Plông",
				"446":"Huyện Kon Rẫy",
				"447":"Huyện Ngọc Hồi",
				"448":"Huyện Sa Thầy",
				"449":"Huyện Tu Mơ Rông",
				"450":"Thành phố Kon Tum"
			}
		},
		"35":{  
			"name":"Tỉnh Lai Châu",
			"districts":{  
				"451":"Huyện Mường Tè",
				"452":"Huyện Phong Thổ",
				"453":"Huyện Sìn Hồ",
				"454":"Huyện Tam Đường",
				"455":"Huyện Tân Uyên",
				"456":"Huyện Than Uyên",
				"457":"Thị xã Lai Châu"
			}
		},
		"36":{  
			"name":"Tỉnh Lâm Đồng",
			"districts":{  
				"458":"Huyện Bảo Lâm",
				"459":"Huyện Cát Tiên",
				"460":"Huyện Đạ Huoai",
				"461":"Huyện Đạ Tẻh",
				"462":"Huyện Đam Rông",
				"463":"Huyện Di Linh",
				"464":"Huyện Đơn Dương",
				"465":"Huyện Đức Trọng",
				"466":"Huyện Lạc Dương",
				"467":"Huyện Lâm Hà",
				"468":"Thành phố Bảo Lộc",
				"469":"Thành phố Đà Lạt"
			}
		},
		"37":{  
			"name":"Tỉnh Lạng Sơn",
			"districts":{  
				"470":"Huyện Bắc Sơn",
				"471":"Huyện Bình Gia",
				"472":"Huyện Cao Lộc",
				"473":"Huyện Chi Lăng",
				"474":"Huyện Đình Lập",
				"475":"Huyện Hữu Lũng",
				"476":"Huyện Lộc Bình",
				"477":"Huyện Tràng Định",
				"478":"Huyện Văn Lãng",
				"479":"Huyện Văn Quan",
				"480":"Thành phố Lạng Sơn"
			}
		},
		"38":{  
			"name":"Tỉnh Lào Cai",
			"districts":{  
				"481":"Huyện Bắc Hà",
				"482":"Huyện Bảo Thắng",
				"483":"Huyện Bảo Yên",
				"484":"Huyện Bát Xát",
				"485":"Huyện Mường Khương",
				"486":"Huyện Sa Pa",
				"487":"Huyện Si Ma Cai",
				"488":"Huyện Văn Bàn",
				"489":"Thành phố Lào Cai"
			}
		},
		"39":{  
			"name":"Tỉnh Long An",
			"districts":{  
				"490":"Huyện Bến Lức",
				"491":"Huyện Cần Đước",
				"492":"Huyện Cần Giuộc",
				"493":"Huyện Châu Thành",
				"494":"Huyện Đức Hòa",
				"495":"Huyện Đức Huệ",
				"496":"Huyện Mộc Hóa",
				"497":"Huyện Tân Hưng",
				"498":"Huyện Tân Thạnh",
				"499":"Huyện Tân Trụ",
				"500":"Huyện Thạnh Hóa",
				"501":"Huyện Thủ Thừa",
				"502":"Huyện Vĩnh Hưng",
				"503":"Thành phố Tân An"
			}
		},
		"40":{  
			"name":"Tỉnh Nam Định",
			"districts":{  
				"504":"Huyện Giao Thủy",
				"505":"Huyện Hải Hậu",
				"506":"Huyện Mỹ Lộc",
				"507":"Huyện Nam Trực",
				"508":"Huyện Nghĩa Hưng",
				"509":"Huyện Trực Ninh",
				"510":"Huyện Vụ Bản",
				"511":"Huyện Xuân Trường",
				"512":"Huyện ý Yên",
				"513":"Thành phố Nam Định"
			}
		},
		"41":{  
			"name":"Tỉnh Nghệ An",
			"districts":{  
				"514":"Huyện Anh Sơn",
				"515":"Huyện Con Cuông",
				"516":"Huyện Diễn Châu",
				"517":"Huyện Đô Lương",
				"518":"Huyện Hưng Nguyên",
				"519":"Huyện Kỳ Sơn",
				"520":"Huyện Nam Đàn",
				"521":"Huyện Nghi Lộc",
				"522":"Huyện Nghĩa Đàn",
				"523":"Huyện Quế Phong",
				"524":"Huyện Quỳ Châu",
				"525":"Huyện Quỳ Hợp",
				"526":"Huyện Quỳnh Lưu",
				"527":"Huyện Tân Kỳ",
				"528":"Huyện Thanh Chương",
				"529":"Huyện Tương Dương",
				"530":"Huyện Yên Thành",
				"531":"Thành phố Vinh",
				"532":"Thị xã Cửa Lò",
				"533":"Thị xã Thái Hòa"
			}
		},
		"42":{  
			"name":"Tỉnh Ninh Bình",
			"districts":{  
				"534":"Huyện Gia Viễn",
				"535":"Huyện Hoa Lư",
				"536":"Huyện Kim Sơn",
				"537":"Huyện Nho Quan",
				"538":"Huyện Yên Khánh",
				"539":"Huyện Yên Mô",
				"540":"Thành phố Ninh Bình",
				"541":"Thị xã Tam Điệp"
			}
		},
		"43":{  
			"name":"Tỉnh Ninh Thuận",
			"districts":{  
				"542":"Huyên Bác ái",
				"543":"Huyện Ninh Hải",
				"544":"Huyện Ninh Phước",
				"545":"Huyện Ninh Sơn",
				"546":"Huyện Thuận Bắc",
				"547":"Huyện Thuận Nam",
				"548":"Thành phố Phan Rang-Tháp Chàm"
			}
		},
		"44":{  
			"name":"Tỉnh Phú Thọ",
			"districts":{  
				"549":"Huyện Cẩm Khê",
				"550":"Huyện Đoan Hùng",
				"551":"Huyện Hạ Hòa",
				"552":"Huyện Lâm Thao",
				"553":"Huyện Phù Ninh",
				"554":"Huyện Tam Nông",
				"555":"Huyện Tân Sơn",
				"556":"Huyện Thanh Ba",
				"557":"Huyện Thanh Sơn",
				"558":"Huyện Thanh Thủy",
				"559":"Huyện Yên Lập",
				"560":"Thành phố Việt Trì",
				"561":"Thị xã Phú Thọ"
			}
		},
		"45":{  
			"name":"Tỉnh Phú Yên",
			"districts":{  
				"562":"Huyện Đông Hòa",
				"563":"Huyện Đồng Xuân",
				"564":"Huyện Phú Hòa",
				"565":"Huyện Sơn Hòa",
				"566":"Huyện Sông Hinh",
				"567":"Huyện Tây Hòa",
				"568":"Huyện Tuy An",
				"569":"Thành phố Tuy Hòa",
				"570":"Thị xã Sông Cầu"
			}
		},
		"46":{  
			"name":"Tỉnh Quảng Bình",
			"districts":{  
				"571":"Huyện Bố Trạch",
				"572":"Huyện Lệ Thủy",
				"573":"Huyện MinhHoá",
				"574":"Huyện Quảng Ninh",
				"575":"Huyện Quảng Trạch",
				"576":"Huyện Tuyên Hoá",
				"577":"Thành phố Đồng Hới"
			}
		},
		"47":{  
			"name":"Tỉnh Quảng Nam",
			"districts":{  
				"578":"Huyện Bắc Trà My",
				"579":"Huyện Đại Lộc",
				"580":"Huyện Điện Bàn",
				"581":"Huyện Đông Giang",
				"582":"Huyện Duy Xuyên",
				"583":"Huyện Hiệp Đức",
				"584":"Huyện Nam Giang",
				"585":"Huyện Nam Trà My",
				"586":"Huyện Nông Sơn",
				"587":"Huyện Núi Thành",
				"588":"Huyện Phú Ninh",
				"589":"Huyện Phước Sơn",
				"590":"Huyện Quế Sơn",
				"591":"Huyện Tây Giang",
				"592":"Huyện Thăng Bình",
				"593":"Huyện Tiên Phước",
				"594":"Thành phố Hội An",
				"595":"Thành phố Tam Kỳ"
			}
		},
		"48":{  
			"name":"Tỉnh Quảng Ngãi",
			"districts":{  
				"596":"Huyện Ba Tơ",
				"597":"Huyện Bình Sơn",
				"598":"Huyện Đức Phổ",
				"599":"Huyện Lý sơn",
				"600":"Huyện Minh Long",
				"601":"Huyện Mộ Đức",
				"602":"Huyện Nghĩa Hành",
				"603":"Huyện Sơn Hà",
				"604":"Huyện Sơn Tây",
				"605":"Huyện Sơn Tịnh",
				"606":"Huyện Tây Trà",
				"607":"Huyện Trà Bồng",
				"608":"Huyện Tư Nghĩa",
				"609":"Thành phố Quảng Ngãi"
			}
		},
		"49":{  
			"name":"Tỉnh Quảng Ninh",
			"districts":{  
				"610":"Huyện Ba Chẽ",
				"611":"Huyện Bình Liêu",
				"612":"Huyện Cô Tô",
				"613":"Huyện Đầm Hà",
				"614":"Huyện Đông Triều",
				"615":"Huyện Hải Hà",
				"616":"Huyện Hoành Bồ",
				"617":"Huyện Tiên Yên",
				"618":"Huyện Vân Đồn",
				"619":"Huyện Yên Hưng",
				"620":"Thành phố Hạ Long",
				"621":"Thành phố Móng Cái",
				"622":"Thị xã Cẩm Phả",
				"623":"Thị xã Uông Bí"
			}
		},
		"50":{  
			"name":"Tỉnh Quảng Trị",
			"districts":{  
				"624":"Huyện Cam Lộ",
				"625":"Huyện Cồn Cỏ",
				"626":"Huyện Đa Krông",
				"627":"Huyện Gio Linh",
				"628":"Huyện Hải Lăng",
				"629":"Huyện Hướng Hóa",
				"630":"Huyện Triệu Phong",
				"631":"Huyện Vính Linh",
				"632":"Thành phố Đông Hà",
				"633":"Thị xã Quảng Trị"
			}
		},
		"51":{  
			"name":"Tỉnh Sóc Trăng",
			"districts":{  
				"634":"Huyện Châu Thành",
				"635":"Huyện Cù Lao Dung",
				"636":"Huyện Kế Sách",
				"637":"Huyện Long Phú",
				"638":"Huyện Mỹ Tú",
				"639":"Huyện Mỹ Xuyên",
				"640":"Huyện Ngã Năm",
				"641":"Huyện Thạnh Trị",
				"642":"Huyện Trần Đề",
				"643":"Huyện Vĩnh Châu",
				"644":"Thành phố Sóc Trăng"
			}
		},
		"52":{  
			"name":"Tỉnh Sơn La",
			"districts":{  
				"645":"Huyện Bắc Yên",
				"646":"Huyện Mai Sơn",
				"647":"Huyện Mộc Châu",
				"648":"Huyện Mường La",
				"649":"Huyện Phù Yên",
				"650":"Huyện Quỳnh Nhai",
				"651":"Huyện Sông Mã",
				"652":"Huyện Sốp Cộp",
				"653":"Huyện Thuận Châu",
				"654":"Huyện Yên Châu",
				"655":"Thành phố Sơn La"
			}
		},
		"53":{  
			"name":"Tỉnh Tây Ninh",
			"districts":{  
				"656":"Huyện Bến Cầu",
				"657":"Huyện Châu Thành",
				"658":"Huyện Dương Minh Châu",
				"659":"Huyện Gò Dầu",
				"660":"Huyện Hòa Thành",
				"661":"Huyện Tân Biên",
				"662":"Huyện Tân Châu",
				"663":"Huyện Trảng Bàng",
				"664":"Thị xã Tây Ninh"
			}
		},
		"54":{  
			"name":"Tỉnh Thái Bình",
			"districts":{  
				"665":"Huyện Đông Hưng",
				"666":"Huyện Hưng Hà",
				"667":"Huyện Kiến Xương",
				"668":"Huyện Quỳnh Phụ",
				"669":"Huyện Thái Thụy",
				"670":"Huyện Tiền Hải",
				"671":"Huyện Vũ Thư",
				"672":"Thành phố Thái Bình"
			}
		},
		"55":{  
			"name":"Tỉnh Thái Nguyên",
			"districts":{  
				"673":"Huyện Đại Từ",
				"674":"Huyện Định Hóa",
				"675":"Huyện Đồng Hỷ",
				"676":"Huyện Phổ Yên",
				"677":"Huyện Phú Bình",
				"678":"Huyện Phú Lương",
				"679":"Huyện Võ Nhai",
				"680":"Thành phố Thái Nguyên",
				"681":"Thị xã Sông Công"
			}
		},
		"56":{  
			"name":"Tỉnh Thanh Hóa",
			"districts":{  
				"682":"Huyện Bá Thước",
				"683":"Huyện Cẩm Thủy",
				"684":"Huyện Đông Sơn",
				"685":"Huyện Hà Trung",
				"686":"Huyện Hậu Lộc",
				"687":"Huyện Hoằng Hóa",
				"688":"Huyện Lang Chánh",
				"689":"Huyện Mường Lát",
				"690":"Huyện Nga Sơn",
				"691":"Huyện Ngọc Lặc",
				"692":"Huyện Như Thanh",
				"693":"Huyện Như Xuân",
				"694":"Huyện Nông Cống",
				"695":"Huyện Quan Hóa",
				"696":"Huyện Quan Sơn",
				"697":"Huyện Quảng Xương",
				"698":"Huyện Thạch Thành",
				"699":"Huyện Thiệu Hóa",
				"700":"Huyện Thọ Xuân",
				"701":"Huyện Thường Xuân",
				"702":"Huyện Tĩnh Gia",
				"703":"Huyện Triệu Sơn",
				"704":"Huyện Vĩnh Lộc",
				"705":"Huyện Yên Định",
				"706":"Thành phố Thanh Hóa",
				"707":"Thị xã Bỉm Sơn",
				"708":"Thị xã Sầm Sơn"
			}
		},
		"57":{  
			"name":"Tỉnh Thừa Thiên Huế",
			"districts":{  
				"709":"Huyện A Lưới",
				"710":"Huyện Hương Trà",
				"711":"Huyện Nam Dông",
				"712":"Huyện Phong Điền",
				"713":"Huyện Phú Lộc",
				"714":"Huyện Phú Vang",
				"715":"Huyện Quảng Điền",
				"716":"Thành phố Huế",
				"717":"thị xã Hương Thủy"
			}
		},
		"58":{  
			"name":"Tỉnh Tiền Giang",
			"districts":{  
				"718":"Huyện Cái Bè",
				"719":"Huyện Cai Lậy",
				"720":"Huyện Châu Thành",
				"721":"Huyện Chợ Gạo",
				"722":"Huyện Gò Công Đông",
				"723":"Huyện Gò Công Tây",
				"724":"Huyện Tân Phú Đông",
				"725":"Huyện Tân Phước",
				"726":"Thành phố Mỹ Tho",
				"727":"Thị xã Gò Công"
			}
		},
		"59":{  
			"name":"Tỉnh Trà Vinh",
			"districts":{  
				"728":"Huyện Càng Long",
				"729":"Huyện Cầu Kè",
				"730":"Huyện Cầu Ngang",
				"731":"Huyện Châu Thành",
				"732":"Huyện Duyên Hải",
				"733":"Huyện Tiểu Cần",
				"734":"Huyện Trà Cú",
				"735":"Thành phố Trà Vinh"
			}
		},
		"60":{  
			"name":"Tỉnh Tuyên Quang",
			"districts":{  
				"736":"Huyện Chiêm Hóa",
				"737":"Huyện Hàm Yên",
				"738":"Huyện Na hang",
				"739":"Huyện Sơn Dương",
				"740":"Huyện Yên Sơn",
				"741":"Thành phố Tuyên Quang"
			}
		},
		"61":{  
			"name":"Tỉnh Vĩnh Long",
			"districts":{  
				"742":"Huyện Bình Minh",
				"743":"Huyện Bình Tân",
				"744":"Huyện Long Hồ",
				"745":"Huyện Mang Thít",
				"746":"Huyện Tam Bình",
				"747":"Huyện Trà Ôn",
				"748":"Huyện Vũng Liêm",
				"749":"Thành phố Vĩnh Long"
			}
		},
		"62":{  
			"name":"Tỉnh Vĩnh Phúc",
			"districts":{  
				"750":"Huyện Bình Xuyên",
				"751":"Huyện Lập Thạch",
				"752":"Huyện Sông Lô",
				"753":"Huyện Tam Đảo",
				"754":"Huyện Tam Dương",
				"755":"Huyện Vĩnh Tường",
				"756":"Huyện Yên Lạc",
				"757":"Thành phố Vĩnh Yên",
				"758":"Thị xã Phúc Yên"
			}
		},
		"63":{  
			"name":"Tỉnh Yên Bái",
			"districts":{  
				"759":"Huyện Lục Yên",
				"760":"Huyện Mù Cang Chải",
				"761":"Huyện Trạm Tấu",
				"762":"Huyện Trấn Yên",
				"763":"Huyện Văn Chấn",
				"764":"Huyện Văn Yên",
				"765":"Huyện Yên Bình",
				"766":"Thành phố Yên Bái",
				"767":"Thị xã Nghĩa Lộ"
			}
		}
	}
	]);
})();
;(function(){
	'use strict';

	Application.registerModule('bzUser');

	angular
	.module('bzUser', ['xeditable'])
	.run(run);

	function run(authSvc, editableOptions) {
        editableOptions.theme = 'bs3';
    }
})();
;(function(){
	'use strict';

	Application.registerModule('bzProduct');
	angular
	.module('bzProduct', [])
	.run(run);

	function run(authSvc){

	}
})();

; (function () {
    'use strict';

    Application.registerModule('bzWebOrder');
    angular
        .module('bzWebOrder', [])
        .run(run);

    function run(authSvc) {

    }
})();

;(function(){
	'use strict';

	Application.registerModule('bzWebHome');
	angular
	.module('bzWebHome', [])
	.run(run);

	function run(authSvc){

	}
})();

; (function () {
    'use strict';

    Application.registerModule('bzWebBlog');
    angular
        .module('bzWebBlog', [])
        .run(run);

    function run(authSvc) {

    }
})();

;(function(){
	'use strict';

	Application.registerModule('bzAuth');

	angular
	.module('bzAuth', ['xeditable'])
	.run(run);

	function run(authSvc, editableOptions) {
        editableOptions.theme = 'bs3';
    }
})();

(function () {
    'use strict';

    angular
        .module('bzUser')
        .service('userSvc', userSvc)
        .service('userFac', userFac)
        .service('userFacApi', userFacApi)
        .service('userSvcApi', userSvcApi);

    function userFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function userFacApi($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function userSvc($q, $window, bzResourceSvc, userFac) {
        return {
            create: create,
            update: update,
        };

        function create(data, id) {
            var createData = new userFac(data);

            return createData.$save({ method: 'user' });
        }

        function update(data, id) {
            var createData = new userFac(data);

            return createData.$update({ method: 'user', id: id });
        }
    }

    function userSvcApi($q, $window, bzResourceSvc, userFacApi) {
        return {
            updateFavoriteProduct: updateFavoriteProduct
        };

        function updateFavoriteProduct(data, id) {
            var createData = new userFacApi(data);

            return createData.$update({ method: 'user-favorite-product', id: id });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzProduct')
        .factory('webProductFac', webProductFac)
        .service('webProductSvc', webProductSvc)
        .service('apiProductSvc', apiProductSvc);

    function webProductFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.webUrl + '/:method/:id',
            { method: '@method', id: '@id' });
    }

    function webProductSvc($q, $window, bzResourceSvc, webProductFac) {
        return {
            detailProduct: detailProduct
        };

        function detailProduct(slug, id) {
            var getData = new webProductFac();
            return getData.$get({ method: 'san-pham', id: slug + '-' + id, api: true });
        }
    }

    function apiProductSvc($rootScope, $window, $uibModal, $sce, webProductSvc, orderApiSvc) {
        return {
            popupDetailPro: popupDetailPro,
            addToCart: addToCart,
            decreaseCart: decreaseCart,
            findByIdProduct: findByIdProduct,
            checkImgOld: checkImgOld,
            fixImgProductDetail: fixImgProductDetail,
            addToCartGA: addToCartGA
        };

        function popupDetailPro(slug, id) {
            var path = "/san-pham/" + slug + '-' + id;
            helperJsCustom.GA('send', 'pageview', path);
            if ($(window).width() > 768) {
                $window.history.pushState(null, "title", path);

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: settings.services.webUrl + '/modules/web-product/view/client/popup/detail-product/view.html',
                    controller: 'popupProductDetail',
                    controllerAs: 'vmPopProDe',
                    resolve: {
                        product: function () {
                            return angular.copy({
                                slug: slug,
                                id: id
                            });
                        },
                    }
                });

                modalInstance.result.then(function (resp) {
                    $window.history.back();
                }, function () {
                    $window.history.back();
                });
            }
            else {
                window.location.href = settings.services.webUrl + path;
            }
        }

        function addToCart(id, cb) {
            orderApiSvc.update('add-product', { product: id, quantity: 1 }).then(function (res) {
                cb(res);
            }).catch(function (err) {
                console.log(err);
            })
        }

        function decreaseCart(id, quantity, cb) {
            var new_quantity = quantity - 1;
            orderApiSvc.update('set-quantity', { product: id, quantity: new_quantity }).then(function (res) {
                cb(res);
            }).catch(function (err) {
                console.log(err);
            })
        }

        // Fix for ie
        function findByIdProduct(arr, id_product) {
            for (var index = 0; index < arr.length; index++) {
                var element = arr[index];
                if (element.id_product == id_product) {
                    return element;
                }
            }
            return undefined;
        }

        // Fix for transfer database
        function checkImgOld(new_url, image) {
            let tmp_arr = image.split('/');
            if (tmp_arr.length > 1) {
                var url = settingJs.configs.uploadDirectory.media_old_product.slice(0, -1);
                return url + image;
            }
            return new_url + image;
        }

        function fixImgProductDetail(content) {
            let urlReplaceLeft = new RegExp('{{media url="', 'g');
            let urlReplaceRight = new RegExp('"}}', 'g');
            let replaceUrl2 = new RegExp("//mhv-live.bizzon.com.vn", 'g')

            content = content.replace(urlReplaceLeft, settings.services.webUrl + settingJs.configs.uploadDirectory.media_old).replace(urlReplaceRight, '').replace(replaceUrl2, settings.services.webUrl);
            return $sce.trustAsHtml(content);
        }

        function addToCartGA(product) {
            if (product) {
                var price = product.price;
                if (product.promotion && product.promotion.status) {
                    if (product.promotion.type == 'PC') {
                        price = price * (100 - product.promotion.value) / 100
                    }
                    else {
                        price = price - product.promotion.value;
                    }
                }
                if ($rootScope.list_track_fpq.indexOf(product._id) == -1) {
                    $rootScope.list_track_fpq.push(product._id);
                    fbq('track', 'AddToCart', {
                        value: price,
                        currency: 'VND'
                    });
                }


            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzWebOrder')
        .service('orderWebSvc', orderWebSvc)
        .factory('orderWebFac', orderWebFac);

    function orderWebFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/order/:method/:id_product/:quantity',
            { method: '@method', id_product: '@id_product', quantity: '@quantity' });
    }

    function orderWebSvc($q, $window, bzResourceSvc, orderWebFac) {
        return {
            sendOrder: sendOrder,
            checkCoupon: checkCoupon,

            getShippingFee: getShippingFee,
            getShippingAddressUser: getShippingAddressUser,
        };

        function sendOrder(data) {
            var orderWeb = new orderWebFac(data);
            return orderWeb.$save({});
        }

        function checkCoupon(data, code_coupon) {
            var order = new orderWebFac(data);
            return order.$save({ method: 'apply-coupon', id_product: code_coupon });
        }

        function getShippingFee() {
            var getData = new orderWebFac();
            return getData.$get({ method: 'list-shiping-fee' });
        }

        function getShippingAddressUser() {
            var getData = new orderWebFac();
            return getData.$get({ method: 'shiping-address-user' });
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('bzWebHome')
        .service('WebSearchSvc', WebSearchSvc)
        .factory('WebSearchFac', WebSearchFac);

    function WebSearchFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/:method/:id',
            { method: '@method', id: '@id' });
    }

    function WebSearchSvc($q, $window, WebSearchFac) {
        return {
            searchList: searchList,
            searchProduct: searchProduct,
            addSearch: addSearch,
            search: search
        };

        function searchList() {
            var searchList = new WebSearchFac();
            return searchList.$get({ method: 'search-list' });
        }

        function searchProduct() {
            var searchProduct = new WebSearchFac();
            return searchProduct.$get({ method: 'product-list' });
        }

        function addSearch(data) {
            data.method = 'add-search';
            var addSearch = new WebSearchFac(data);
            return addSearch.$get(data);
        }

        function search(data) {
            data.method = 'search';
            var addSearch = new WebSearchFac();
            return addSearch.$get(data);
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('bzWebHome')
        .service('webHomeSvc', webHomeSvc)
        .factory('webHomeFac', webHomeFac)
        .factory('webApiFac', webApiFac);

    function webHomeFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.webUrl + '/:method',
            { method: '@method', id_product: '@id_product', quantity: '@quantity' });
    }

    function webApiFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/:method',
            { method: '@method', });
    }

    function webHomeSvc($q, $window, bzResourceSvc, webHomeFac, webApiFac) {
        return {
            get: get,
            getMenu: getMenu
        };

        function get() {
            var getData = new webHomeFac();
            return getData.$get({ method: '', api: true });
        }

        function getMenu() {
            var getData = new webApiFac();
            return getData.$get({ method: 'product-list' });
        }

    }
})();
(function() {
    'use strict';

    angular
        .module('bzWebBlog')
        .service('blogWebSvc', blogWebSvc)
        .factory('blogWebFac', blogWebFac);

    function blogWebFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.webUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function blogWebSvc($q, $window, bzResourceSvc, blogWebFac) {
        return {
            getAll: getAll,
            getAllTag: getAllTag,
        };

        function getAll(options){
            var getFac = new blogWebFac(options);
            return getFac.$get({method: 'blogs'});
        }

        function getAllTag(options){
            var getFac = new blogWebFac(options);
            return getFac.$get({method: 'tags-blog'});
        }
    }
})();
; (function () {
    'use strict';

    angular
    .module('bzUser')
    .controller('popEditShippingAddressCtrl', popEditShippingAddressCtrl);

    function popEditShippingAddressCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModalInstance, bzResourceSvc, authSvc, userSvc, data) {
        var vmEditShippingAddress = this;
        //Vars
        vmEditShippingAddress.formData = {};
        vmEditShippingAddress.submitted = false;
        vmEditShippingAddress.lockForm = false;
        vmEditShippingAddress.user = $window.data.user;
        vmEditShippingAddress.user.roles = $window.user.scope;
        vmEditShippingAddress.formData = data.shipping_address;
        vmEditShippingAddress.updateAddressShipping = updateAddressShipping;
        // Methods
        //Init
        vmEditShippingAddress.districts = $window.data.shippingfee;
        
        
        function updateAddressShipping(isValid) {
            vmEditShippingAddress.submitted = true;
            vmEditShippingAddress.lockForm = true;
            if(isValid) {
                delete vmEditShippingAddress.user.deletedAt;
                delete vmEditShippingAddress.user.__v;
                delete vmEditShippingAddress.user.password_token;
                delete vmEditShippingAddress.user.created;
                delete vmEditShippingAddress.user.provider;
                delete vmEditShippingAddress.user.activeToken;
                delete vmEditShippingAddress.user.favorite_product;
                delete vmEditShippingAddress.user.dob;
                delete vmEditShippingAddress.user.password;
                delete vmEditShippingAddress.user.vocative;
                
                var user = vmEditShippingAddress.user;

                var index = 0;
                var p = user.customer.shipping_address.find(function (item, key) {
                    index = key;
                    return item._id == data.shipping_address._id;
                });
                console.log('test',user.customer.shipping_address[index],vmEditShippingAddress.formData);
                user.customer.shipping_address[index] = {
                    name: sanitizeHtml(vmEditShippingAddress.formData.name),
                    phone: sanitizeHtml(vmEditShippingAddress.formData.phone),
                    address_detail: sanitizeHtml(vmEditShippingAddress.formData.address_detail),
                    id_shipping_fee: vmEditShippingAddress.formData.id_shipping_fee._id
                };
                console.log('test1',user.customer.shipping_address[index]);
                if(user.customer.shipping_address[index].name == '' 
                    || user.customer.shipping_address[index].phone == '' 
                    || user.customer.shipping_address[index].address_detail == '' )
                {
                    $bzPopup.toastr({
                        type: 'error',
                        data:{
                            title: 'Lỗi',
                            message: "Dữ liệu nhập vào bị lỗi !!"
                        }
                    });
                    vmEditShippingAddress.lockForm = false;
                    return;
                }

                authSvc.update(user, user._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Địa chỉ giao hàng',
                            message: "Cập nhật thành công"
                        }
                    });
                    vmEditShippingAddress.lockForm = false;
                    $uibModalInstance.close(resp);
                }).catch(function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Địa chỉ giao hàng',
                            message: err.data.message
                        }
                    });
                    vmEditShippingAddress.lockForm = false;
                });
            }
            else {
                vmEditShippingAddress.submitted = true;
                vmEditShippingAddress.lockForm = false;
            }

        }


        //End func
    }
})();
; (function () {
    'use strict';

    angular
    .module('bzUser')
    .controller('popAddShippingAddressCtrl', popAddShippingAddressCtrl);

    function popAddShippingAddressCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModalInstance, bzResourceSvc, authSvc, userSvc) {
        var vmAddShippingAddress = this;
        //Vars
        vmAddShippingAddress.formData = {};
        vmAddShippingAddress.submitted = false;
        vmAddShippingAddress.lockForm = false;
        vmAddShippingAddress.user = $window.data.user;
        vmAddShippingAddress.districts = $window.data.shippingfee;
        vmAddShippingAddress.user.roles = $window.user.scope;
        // Methods
        vmAddShippingAddress.addShippingAddress = addShippingAddress;
        //Init


        function addShippingAddress(isValid) {
            vmAddShippingAddress.submitted = true;
            vmAddShippingAddress.lockForm = true;
            if (isValid) {
                var shipping_address = {
                    name: sanitizeHtml(vmAddShippingAddress.formData.name),
                    phone: sanitizeHtml(vmAddShippingAddress.formData.phone),
                    address_detail: sanitizeHtml(vmAddShippingAddress.formData.address),
                    id_shipping_fee: vmAddShippingAddress.formData.district
                };
                if(shipping_address.name == '' 
                    || shipping_address.phone == '' 
                    || shipping_address.address_detail == '' )
                {
                    $bzPopup.toastr({
                        type: 'error',
                        data:{
                            title: 'Lỗi',
                            message: "Dữ liệu nhập vào bị lỗi !!"
                        }
                    });
                    vmAddShippingAddress.lockForm = false;
                    return;
                }

                var user = vmAddShippingAddress.user;

                delete user.__v;
                delete user.vocative;
                delete user.password_token;
                delete user.created;
                delete user.provider;
                delete user.activeToken;
                delete user.favorite_product;
                delete user.dob;
                delete user.password;
                user.customer.shipping_address.push(shipping_address);

                // console.log(1,user);
                // Cập nhập lại user
                authSvc.update(user, vmAddShippingAddress.user._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Địa chỉ',
                            message: "Thêm thành công"
                        }
                    });
                    vmAddShippingAddress.lockForm = false;
                    $uibModalInstance.close(resp);

                }).catch(function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Thất bại',
                            message: err.data.message
                        }
                    });
                    vmAddShippingAddress.lockForm = false;
                });


            }
            else {
                vmAddShippingAddress.submitted = true;
                vmAddShippingAddress.lockForm = false;
            }


        };


        //End func
    }
})();
; (function () {
    'use strict';

    angular
        .module('bzProduct')
        .controller('popupProductDetail', popupProductDetail);

    function popupProductDetail($scope, $rootScope, $timeout, $window, $bzPopup, $uibModalInstance, webProductSvc, product, orderApiSvc, userSvcApi, apiProductSvc, authSvc) {
        //Vars
        var mvPopPrDe = $scope;
        mvPopPrDe.settings = $window.settings;
        mvPopPrDe.$on('Cart:getCart', getCart);
        mvPopPrDe.allowAddCart = true;
        mvPopPrDe.showDetailContent = false;
        mvPopPrDe.imagesDirectory = settingJs.configs.uploadDirectory.thumb_product || '/files/thumb_image/product_image/';
        mvPopPrDe.imagesProductDirectory = settingJs.configs.uploadDirectory.product || '/files/product_image/';

        // Methods
        mvPopPrDe.popDetPro = popDetPro;
        mvPopPrDe.addToCart = addToCart;
        mvPopPrDe.decreaseCart = decreaseCart;
        mvPopPrDe.addFavoriteProduct = addFavoriteProduct;
        mvPopPrDe.removeFavoriteProduct = removeFavoriteProduct;
        mvPopPrDe.close = close;
        mvPopPrDe.init = init;
        mvPopPrDe.checkDueDate = checkDueDate;
        mvPopPrDe.login = login;
        mvPopPrDe.showDetail = showDetail;
        mvPopPrDe.checkImgOld = apiProductSvc.checkImgOld;
        mvPopPrDe.addToCartGA = apiProductSvc.addToCartGA;
        mvPopPrDe.fixImgProductDetail = apiProductSvc.fixImgProductDetail;

        /*FUNCTION*/
        function init() {
            webProductSvc.detailProduct(product.slug, product.id).then(function (resp) {
                mvPopPrDe.data = resp.data;
                if (resp.check_slug) {
                    getCart();
                    $timeout(function () {
                        helperJs.renderPopup();
                        angular.element('.col-xs-12.col-left .row').removeAttr("style");
                        angular.element('.col-xs-12.col-left .row.text-center').addClass('hidden');

                        // Eff show more detail product
                        var height_detail = angular.element('#pop-detail #text-detail').height();
                        if (height_detail > 350) {
                            mvPopPrDe.showDetailContent = true;
                            mvPopPrDe.detailContent = 'hideContent';
                            mvPopPrDe.detailContentStyle = {
                                'overflow': 'hidden',
                                'max-height': '350px'
                            };
                        }
                        angular.element('#pop-detail .facebook-section').html('<div class="fb-like" data-href="' + $window.location.href + '" data-layout="button_count" data-action="like" data-show-faces="true" data-share="true" style="margin-left: 50px;"></div>');
                        FB.XFBML.parse();
                        mvPopPrDe.detail_infor = $('#pop-detail #text-detail')[0].innerHTML;
                    }, 100);
                    mvPopPrDe.doneLoad = true;
                }
                else {
                    // When slug product url not match slug product get
                    console.log(window.location.href);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lỗi',
                            message: 'Có lỗi. Hãy thử lại'
                        }
                    });
                    $uibModalInstance.close();
                }

            });
        }

        function popDetPro(slug, id) {
            $uibModalInstance.close();
            $timeout(function () {
                apiProductSvc.popupDetailPro(slug, id, true);
            }, 50);

        }

        function getCart() {
            if ($rootScope.Cart.items) {
                try {
                    mvPopPrDe.data.product.cart = $rootScope.Cart.items.find(function (item) {
                        return mvPopPrDe.data.product._id == item.id_product;
                    });

                    if (mvPopPrDe.data.product.relative_product_list) {
                        mvPopPrDe.data.product.relative_product_list.forEach(function (item) {
                            item.cart = $rootScope.Cart.items.find(function (cart) {
                                return item._id == cart.id_product;
                            });
                        });
                    }

                    if (mvPopPrDe.data.list_pro_month) {
                        mvPopPrDe.data.list_pro_month.forEach(function (item) {
                            item.cart = $rootScope.Cart.items.find(function (cart) {
                                return item.product._id == cart.id_product;
                            });
                        });
                    }
                } catch (error) {
                    mvPopPrDe.data.product.cart = apiProductSvc.findByIdProduct($rootScope.Cart.items, mvPopPrDe.data.product._id);

                    if (mvPopPrDe.data.product.relative_product_list) {
                        for (var index = 0; index < mvPopPrDe.data.product.relative_product_list.length; index++) {
                            var element = mvPopPrDe.data.product.relative_product_list[index];
                            if (element) {
                                mvPopPrDe.data.product.relative_product_list[index].cart = findPro(element._id);
                            }
                        }
                    }

                    if (mvPopPrDe.data.list_pro_month) {
                        for (var index = 0; index < mvPopPrDe.data.list_pro_month.length; index++) {
                            var element = mvPopPrDe.data.list_pro_month[index];
                            if (element) {
                                mvPopPrDe.data.list_pro_month[index].cart = findPro(element.product._id);
                            }
                        }
                    }
                }
                mvPopPrDe.allowAddCart = true;
            }
        }

        function addToCart(id) {
            if (mvPopPrDe.allowAddCart) {
                mvPopPrDe.allowAddCart = false;
                apiProductSvc.addToCart(id, function (resp) {
                    getCart();
                })
            }
        }

        function decreaseCart(id, quantity) {
            apiProductSvc.decreaseCart(id, quantity, function (resp) {
                getCart();
            })
        }

        function addFavoriteProduct() {
            mvPopPrDe.data.user.favorite_product.push(mvPopPrDe.data.product._id);
            userSvcApi.updateFavoriteProduct(mvPopPrDe.data.user, mvPopPrDe.data.user._id).then(function (resp) {
            }).catch(function (err) {
                console.log(err);
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Lỗi',
                        message: 'Có lỗi. Hãy thử lại'
                    }
                });
                var index = mvPopPrDe.data.user.favorite_product.indexOf(mvPopPrDe.data.product._id);
                if (index != -1) {
                    mvPopPrDe.data.user.favorite_product.splice(index, 1);
                }
            })
        }

        function removeFavoriteProduct() {
            var index = mvPopPrDe.data.user.favorite_product.indexOf(mvPopPrDe.data.product._id);
            mvPopPrDe.data.user.favorite_product.splice(index, 1);
            userSvcApi.updateFavoriteProduct(mvPopPrDe.data.user, mvPopPrDe.data.user._id).then(function (resp) {
            }).catch(function (err) {
                console.log(err);
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Lỗi',
                        message: 'Có lỗi. Hãy thử lại'
                    }
                });
                mvPopPrDe.data.user.favorite_product.push(mvPopPrDe.data.product._id);
                if (index != -1) {
                    mvPopPrDe.data.user.favorite_product.splice(index, 1);
                }
            })
        }

        function close() {
            $uibModalInstance.close();
        }

        function checkDueDate(end_date) {
            if (end_date) {
                end_date = moment(end_date);
                return moment().isBefore(end_date)
            }
            else {
                return true;
            }
        }

        function login() {
            authSvc.popLogin();
        }

        function showDetail() {
            if (mvPopPrDe.detailContent == 'hideContent') {
                mvPopPrDe.detailContent = 'showContent';
                mvPopPrDe.detailContentStyle = {
                    'max-height': 'auto',
                };
            }
            else {
                $('#pop-detail #text-detail').html(mvPopPrDe.detail_infor);
                mvPopPrDe.detailContent = 'hideContent';
                mvPopPrDe.detailContentStyle = {
                    'overflow': 'hidden',
                    'max-height': '350px'
                };
            }
        }

        function findPro(id) {
            var cart;
            try {
                cart = $rootScope.Cart.items.find(function (item) {
                    return item.id_product == id;
                });
            } catch (error) {
                cart = apiProductSvc.findByIdProduct($rootScope.Cart.items, id);
            }
            return cart;
        }
    }
})();
; (function () {
	'use strict';

	angular
		.module('bzAuth')
		.controller('popRegisterCtrl', popRegisterCtrl);

	function popRegisterCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModal, authSvc, $uibModalInstance, bzUtilsSvc) {
		var vmRegister = this
		//Vars
		vmRegister.formData = {};
		vmRegister.submitted = false;
		vmRegister.lockForm = false;
		// Methods
		vmRegister.register = register;
		vmRegister.login = login;
		vmRegister.popLogin = popLogin;
		vmRegister.loginFacebook = loginFacebook;
		vmRegister.checkInput = checkInput;
		vmRegister.checkPhoneMatch = checkPhoneMatch;
		vmRegister.getInfoLocalStorage = getInfoLocalStorage;

		//Init
		getInfoLocalStorage();

		function getInfoLocalStorage() {
			let dataStorage = bzUtilsSvc.getInfoUser();
			if (dataStorage) {
				vmRegister.formData.name = dataStorage.name || '';
				vmRegister.formData.phone = dataStorage.phone || '';
				vmRegister.formData.cfphone = dataStorage.phone || '';

				var shipping_address = {
					name: sanitizeHtml(dataStorage.name || ''),
					phone: sanitizeHtml(dataStorage.phone || ''),
					address_detail: sanitizeHtml(dataStorage.address_detail || ''),
					id_shipping_fee: dataStorage.id_shipping_fee || ''
				};
				if (shipping_address.name != ''
					&& shipping_address.phone != ''
					&& shipping_address.address_detail != ''
					&& shipping_address.id_shipping_fee != ''
				) {
					vmRegister.formData.customer = {
						shipping_address: [shipping_address]
					};
					vmRegister.formData.idOrder = dataStorage.id_order || '';
				}

			}
		}

		function register(isValid) {
			vmRegister.submitted = true;
			vmRegister.lockForm = true;
			if (isValid) {
				vmRegister.formData.cfpassword = vmRegister.formData.password;
				authSvc.register(vmRegister.formData).then(function (resp) {
					fbq('track', 'CompleteRegistration');

					$bzPopup.toastr({
						type: 'success',
						data: {
							title: 'Thành công',
							message: "Đăng ký thành công"
						}
					});
					$uibModalInstance.close();
					//Đăng nhập thành công thì login
					login(resp);
				}).catch(function (err) {
					vmRegister.err = err.data.message;
					vmRegister.lockForm = false;
					if (vmRegister.err != 'email' && vmRegister.err != 'phone') {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Lỗi',
								message: "Dữ liệu nhập vào bị lỗi !!"
							}
						});
					}
				});
			}
			else {
				vmRegister.submitted = true;
				vmRegister.lockForm = false;
			}
		}

		// function autoAddShippingAddress(user) {
		// 	var dataStorage = bzUtilsSvc.getInfoUser();
		// 	if (dataStorage && user) {
		// 		var shipping_address = {
		// 			name: sanitizeHtml(dataStorage.name || ''),
		// 			phone: sanitizeHtml(dataStorage.phone || ''),
		// 			address_detail: sanitizeHtml(dataStorage.address_detail || ''),
		// 			id_shipping_fee: dataStorage.id_shipping_fee || ''
		// 		};
		// 		if (shipping_address.name != ''
		// 			&& shipping_address.phone != ''
		// 			&& shipping_address.address_detail != ''
		// 			&& shipping_address.id_shipping_fee != ''
		// 		) {
		// 			delete user.__v;
		// 			delete user.vocative;
		// 			delete user.password_token;
		// 			delete user.created;
		// 			delete user.provider;
		// 			delete user.activeToken;
		// 			delete user.favorite_product;
		// 			delete user.dob;
		// 			delete user.password;
		// 			user.customer.shipping_address.push(shipping_address);

		// 			authSvc.update(user, user._id);
		// 		}
		// 	}
		// }

		function autoInfoLastOrder(user, idOrder) {
			if (user && idOrder && idOrder != '') {

			}
		}

		function checkInput() {
			vmRegister.err = null;
		}

		function checkPhoneMatch(isValid) {
			if (vmRegister.formData.cfphone != vmRegister.formData.phone) {
				isValid = false;
				return true;
			}
			return false;
		}
		function login(user) {
			var data = {
				phone: user.phone,
				password: "123",
				isRegister: true
			}
			authSvc.siteLogin(data, function (resp) {
				// autoAddShippingAddress(resp.account);
				bzUtilsSvc.removeInfoUser();
				$window.location.href = "/";
			});
		}
		function loginFacebook() {
			authSvc.getFacebook().then(function (user) {
				user.isRegister = true;
				if (!user.error) {
					social('facebook', user);
					authSvc.facebookLogin(user, function (resp) {
						fbq('track', 'CompleteRegistration');
						bzUtilsSvc.removeInfoUser();
						$window.location.href = '/';
					}, function (err) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Đăng ký facebook',
								message: err.data.message
							}
						});
					});
				} else {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'Đăng ký facebook',
							message: '' + user.error
						}
					});
				}
			});
		}

		function social(type, user) {

			vmRegister.social = {
				type: type,
				id: user.id,
				name: user.name,
				email: user.email,
				profile_picture: user.picture + '?sz=200'

			};
			if (type == 'facebook') {
				vmRegister.social.profile_picture = 'https://graph.facebook.com/v2.5/' + user.id + '/picture?width=200&height=200';
			}
			/*Thao tác tại đây*/
		}

		function popLogin() {
			$uibModalInstance.close();
			authSvc.popLogin();
		}


		//End func
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzAuth')
	.controller('popLoginCtrl', popLoginCtrl);

	function popLoginCtrl($scope, $rootScope, $state,$window, $bzPopup ,$uibModal, $uibModalInstance, authSvc , bzUtilsSvc){
		var vmLogin = this;
		//Vars
		vmLogin.formData = {};
		vmLogin.submitted = false;
		vmLogin.lockForm = false;
		// Methods
		vmLogin.login = login;
		vmLogin.loginFacebook = loginFacebook;
		vmLogin.popForgotPass = popForgotPass;
		vmLogin.popRegister = popRegister;
		vmLogin.checkInput = checkInput;
		vmLogin.getInfoLocalStorage = getInfoLocalStorage;


		//Init
		// angular.element('.modal-dialog').addClass('aaa');
		getInfoLocalStorage();

		function getInfoLocalStorage() {
            let dataStorage = bzUtilsSvc.getInfoUser();
            if (dataStorage) {
                vmLogin.formData.phone = dataStorage.phone || '';
            }
        }

		function login(isValid) {
			vmLogin.submitted = true;
			vmLogin.lockForm = true;
			if(isValid) {
				authSvc.siteLogin(vmLogin.formData, function(resp){
					bzUtilsSvc.removeInfoUser();
					$uibModalInstance.close();
					// $window.location.href = "/";
				}, function(err){
					vmLogin.err = err.data.message;
					vmLogin.lockForm = false;
				});
			}
			else {
				vmLogin.submitted = true;
				vmLogin.lockForm = false;
			}
		}

		function loginFacebook(){
			authSvc.getFacebook().then(function(user){
				if(!user.error){
					social('facebook', user);
					vmLogin.lockForm = true;

					authSvc.facebookLogin(user, function(resp){
						$uibModalInstance.close();
						vmLogin.lockForm = false;
					}, function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Đăng nhập facebook',
								message: err.data.message
							}
						});
						vmLogin.lockForm = false;
					});
				} else {
					if(user.error.code == 190){
						vmLogin.loginFacebook();
					}
					else{
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Đăng nhập facebook',
								message: '' + user.error
							}
						});
					}
						
					vmLogin.lockForm = false;
				}
			});
		}

		function social(type, user){
			vmLogin.social = {
				type: type,
				id: user.id,
				name: user.name,
				email: user.email,
				profile_picture:user.picture+'?sz=200',
			};
			if(type == 'facebook'){
				vmLogin.social.profile_picture = 'https://graph.facebook.com/v2.5/'+user.id+'/picture?width=200&height=200';
			}
			/*Thao tác tại đây*/
		}

		function popForgotPass() {
			var data = {
				showPopup : true
			}
			$uibModalInstance.close(data);
			authSvc.popForgotPass();
		}
		function popRegister() {
			var data = {
				showPopup : true
			}
			$uibModalInstance.close(data);
			authSvc.popRegister();
		}

		function checkInput() {
			vmLogin.err = null;
		}

	//End func
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzAuth')
	.controller('popForgotPassCtrl', popForgotPassCtrl);

	function popForgotPassCtrl($scope, $rootScope, $state,$window, $bzPopup, $uibModalInstance, authSvc ){
		var vmForgotPass = this;
		//Vars
		vmForgotPass.formData = {};
		vmForgotPass.submitted = false;
		vmForgotPass.lockForm = false;

		// Methods
		vmForgotPass.forgotPass = forgotPass;
		vmForgotPass.checkInput = checkInput;
		//Init


		function checkInput() {
			vmForgotPass.err = null;
		}

		function forgotPass(isValid) {
			vmForgotPass.submitted = true;
			vmForgotPass.lockForm = true;
			if(isValid){
				authSvc.forgotPassword(vmForgotPass.formData).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: "Thành công",
							message: "Gửi mail thành công"
						}
					});
					$uibModalInstance.close();
				}).catch(function(err){
					vmForgotPass.err = err.data.message;
					// $bzPopup.toastr({
					// 	type: 'error',
					// 	data:{
					// 		title: "Lỗi",
					// 		message: err.data.message
					// 	}
					// });
					vmForgotPass.lockForm = false;
				})
			}
			else{
				vmForgotPass.submitted = true;
				vmForgotPass.lockForm = false;
			}
		}


	//End func
}
})();
;(function(){
	'use strict';

	angular
	.module('bzAuth')
	.controller('popChangePassCtrl', popChangePassCtrl);

	function popChangePassCtrl($scope, $rootScope, $state,$window, $bzPopup, $uibModalInstance, authSvc ){

		//Vars
		$scope.formData = {};
		$scope.submitted = false;
		$scope.lockForm = false;

		// Methods
		$scope.changePass = changePass;

		//Init

		function changePass(isValid) {
			console.log(123);
			$scope.submitted = true;
			$scope.lockForm = true;
			if(isValid){
				authSvc.postChangePass($scope.formData).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: "Thành công",
							message: "Đổi mật khẩu thành công"
						}
					});
					$uibModalInstance.close();
					authSvc.siteLogout();
				}).catch(function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: "Lỗi",
							message: err.data.message
						}
					});
					$scope.lockForm = false;
				});
			}
			else{
				$scope.submitted = true;
				$scope.lockForm = false;
			}
		}


	//End func
}
})();
; (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('shippingAddressCtrl', shippingAddressCtrl);

	function shippingAddressCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModal, bzResourceSvc, userSvc, authSvc, editableOptions) {
		var vmShippingAddress = this;

		vmShippingAddress.menuActive = "shipping-address";
		//Vars
		vmShippingAddress.formData = {};
		vmShippingAddress.submitted = false;
		vmShippingAddress.lockForm = false;
		vmShippingAddress.user = $window.data.user;
		vmShippingAddress.user.roles = $window.user.scope;
		
		// Methods
		vmShippingAddress.deleteUserShipping = deleteUserShipping;
		vmShippingAddress.popAddShippingAddress = popAddShippingAddress;
		vmShippingAddress.popEditShippingAddress = popEditShippingAddress;
		//Init

		angular.element('#mod-user-shippingaddress #hide1').removeClass('hidden');
		function init() {
			var id =  $window.user.uid;
			bzResourceSvc.api($window.settings.services.apiUrl + '/user/profile', { id: '@id' })
			.get({}, function (resp) {
				vmShippingAddress.user = resp;
				vmShippingAddress.user.roles = $window.user.scope;
			});
		}

		function deleteUserShipping(id_shipping_address) {
			var user = vmShippingAddress.user;
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl +  '/assets/global/message-web/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn chắc chắn sẽ xóa địa chỉ này?';
                    $scope.ok = function () {
                        delete user.deletedAt;
                        delete user.__v;
                        delete user.password_token;
                        delete user.created;
                        delete user.provider;
                        delete user.activeToken;
						delete user.favorite_product;
						delete user.dob;
						delete user.password;
						delete user.vocative;
                        
                        // Tìm vị trí và xóa địa chỉ giao hàng trong user
                        var p = user.customer.shipping_address.find(function (x) {
                            return x._id == id_shipping_address;
                        });
                        var i = user.customer.shipping_address.indexOf(p);
                        user.customer.shipping_address.splice(i, 1);

                        // Cập nhập lại user
                        authSvc.update(user, user._id).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Địa chỉ',
                                    message: "Xóa thành công"
                                }
                            });
                            $uibModalInstance.close();
                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Địa chỉ',
                                    message: err.data.message
                                }
                            });
                            $uibModalInstance.close();
                        });

                    };
                }
            });
        }

		

		function popAddShippingAddress() {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: settings.services.webUrl + '/modules/web-user/view/client/popup/add-shipping-address/view.html',
				controller: 'popAddShippingAddressCtrl',
				controllerAs: 'vmAddShippingAddress',
			});
			modalInstance.result.then(function (resp) {
				init();
			});
		}

		function popEditShippingAddress(shipping_address) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: settings.services.webUrl + '/modules/web-user/view/client/popup/edit-shipping-address/view.html',
				controller: 'popEditShippingAddressCtrl',
				controllerAs: 'vmEditShippingAddress',
				resolve: {
					data: function () {
						return angular.copy({
							shipping_address: shipping_address
						});
					},
				}
			});
			modalInstance.result.then(function (resp) {
				init();
			});
		}

		//End func
	}
})();
; (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('orderCtrl', orderCtrl);

	function orderCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModal, bzResourceSvc, NgTableParams, userSvc, apiProductSvc) {
		var vmOrder = this;

		vmOrder.menuActive = "order";
		//Vars
		vmOrder.formData = {};
        // vmOrder.imagesDirectory = settingJs.configs.uploadDirectory.product;
		vmOrder.submitted = false;
		vmOrder.lockForm = false;
		vmOrder.data = $window.data;
		var jRes = jRespond([
			{ label: 'mobile', enter: 0, exit: 1023 },
			{ label: 'desktop', enter: 1024, exit: 10000 }
		]);
		// Methods
		vmOrder.checkStatus = checkStatus;
		// vmOrder.checkResponse = checkResponse;
		vmOrder.popupDetail = apiProductSvc.popupDetailPro;
		vmOrder.showAll = showAll;
		console.log(vmOrder.data);
		//Init
		angular.element('#table').removeClass('hidden');
		vmOrder.tableParams = new NgTableParams({ count: 10 }, {counts: [], dataset: vmOrder.data});
		
		function checkStatus(status) {
			if(status === "PROCCESS")
				return "Đang xử lý";
			if(status === "FINISH")
				return "Hoàn thành";
			if(status === "CANCEL")
				return "Đã hủy";
		}


		// function checkResponse (slug,id) {
		// 		jRes.addFunc({
		// 			breakpoint: 'mobile',
		// 			enter: function () {
		// 				window.location.href = settings.services.webUrl + "/san-pham/" + slug + '-' + id;
		// 				// console.log('start mo');
		// 			}
		// 		});

		// 	 jRes.addFunc({
		// 		breakpoint: 'desktop',
		// 		enter: function () {
		// 			popupDetail(slug, id);
					
		// 		}
		// 	});
		// 	return;
		// }
		

		


		
		
		function showAll(item) {
			if (typeof item.showAll == "undefined")
				item.showAll = true;
			else {
				item.showAll = !item.showAll;
			}
		}

		
	}
})();
; (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('userInfoCtrl', userInfoCtrl);

	function userInfoCtrl($scope, $rootScope, $location, $state, $window,$filter, $bzPopup, $uibModal, bzResourceSvc, userSvc, authSvc, bzUpload) {
		var vmUserInfo = this;

		vmUserInfo.menuActive = "info";
		//Vars
		vmUserInfo.avatarDir = settingJs.configs.uploadDirectory.avatar;
		vmUserInfo.submitted = false;
		vmUserInfo.lockForm = false;
		vmUserInfo.optionTimePicker = {
			timePicker: false,
			locale: {
				format: 'DD/MM/YYYY'
			}
		};
		vmUserInfo.formData = {};
		vmUserInfo.formData = $window.data;
		vmUserInfo.formData.roles = $window.user.scope;
		vmUserInfo.listVocative = [{ name: 'Anh', value: 'Anh' },
		{ name: 'Chị', value: 'Chị' },
		{ name: 'Cô', value: 'Cô' },
		{ name: 'Chú', value: 'Chú' },
		{ name: 'Bác', value: 'Bác' },
		{ name: 'Ông', value: 'Ông' },
		{ name: 'Bà', value: 'Bà' }];
		vmUserInfo.urlAvatar = settings.services.webUrl + vmUserInfo.avatarDir + vmUserInfo.formData.avatar;
		// Methods
		vmUserInfo.checkInput = checkInput;
		vmUserInfo.editInfo = editInfo;
		vmUserInfo.popChangePass = popChangePass;
		vmUserInfo.uploadAvatar = uploadAvatar;
		//Init
		
		

		
		// console.log(123,vmUserInfo.formData.dob);
		angular.element('#hide1').removeClass('hidden');

		function checkInput() {
			vmUserInfo.err = null;
		}

		function uploadAvatar(isvalidFormInfo) {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: '/assets/global/cropper/view.html',
				controller: function ($scope, $uibModalInstance) {
					var popupScope = this;
					$scope.popupScope = {
						image: vmUserInfo.avatarDir + vmUserInfo.formData.avatar,
						event: 'crop:image',
						ratio: 1,
						width: 500,
						height: 500,
						// mimeType : 'image/jpeg'
					};
					$scope.$on('crop:image', function (event, res) {
						bzUpload.uploadBase64({ directory: 'avatar_image', image: res.image }).then(function (resp) {
							vmUserInfo.formData.avatar = resp.name;
							modalInstance.close();
							editInfo(isvalidFormInfo, true);
						}).catch(function (err) {
							$bzPopup.toastr({
								type: 'error',
								data: {
									title: 'Lỗi',
									message: err.message
								}
							});
						})
					});
				}
			});
		}

		
		function editInfo(isValid, reload) {
			vmUserInfo.submitted = true;
			vmUserInfo.lockForm = true;
			if (isValid) {
				delete vmUserInfo.formData.deletedAt;
				delete vmUserInfo.formData.__v;
				delete vmUserInfo.formData.password_token;
				delete vmUserInfo.formData.created;
				delete vmUserInfo.formData.provider;
				delete vmUserInfo.formData.provider_id;
				delete vmUserInfo.formData.activeToken;
				delete vmUserInfo.formData.favorite_product;
				delete vmUserInfo.formData.password;
				
				if(vmUserInfo.formData.dob){
					var dates = vmUserInfo.formData.dob.toString().split("/");
					if(dates.length == 3) {
						vmUserInfo.formData.dob = new Date(dates[2], dates[1] - 1, dates[0]);
					} else {
						vmUserInfo.formData.dob = new Date(vmUserInfo.formData.dob);
					}
				}
				
				
				authSvc.update(vmUserInfo.formData, vmUserInfo.formData._id).then(function (resp) {

					if (reload) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Ảnh đại diện',
								message: "Cập nhập thành công"
							}
						});
						setTimeout(function () {
							window.location.reload();
						}, 1000)
					}
					else {
						vmUserInfo.formData.name = resp.name;
						vmUserInfo.formData.phone = resp.phone;
						vmUserInfo.formData.email = resp.email;
						vmUserInfo.formData.vocative = resp.vocative;
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Thông tin',
								message: "Cập nhập thành công"
							}
						});
					}
					vmUserInfo.lockForm = false;
				}).catch(function (err) {
					vmUserInfo.err = err.data.message;
					vmUserInfo.lockForm = false;
					if(vmUserInfo.err != 'email' && vmUserInfo.err != 'phone'){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Lỗi',
								message: "Dữ liệu nhập vào bị lỗi !!"
							}
						});
					}
					console.log(err);
				});
			}
			else {
				vmUserInfo.submitted = true;
				vmUserInfo.lockForm = false;
			}


		}

		function popChangePass() {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/change-pass/view.html',
				controller: 'popChangePassCtrl',
				controllerAs: 'vmChangePass',
			});
		}


		//End func
	}
})();
; (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('favoriteProductCtrl', favoriteProductCtrl);

	function favoriteProductCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModal, bzResourceSvc, userSvc, orderApiSvc,apiProductSvc) {
		var vmFavoriteProduct = this;

		vmFavoriteProduct.menuActive = "favorite-product";

		//Vars
		vmFavoriteProduct.formData = {};
		vmFavoriteProduct.imagesDirectory = settingJs.configs.uploadDirectory.thumb_product || '/files/thumb_image/product_image/';
		vmFavoriteProduct.submitted = false;
		vmFavoriteProduct.lockForm = false;
		vmFavoriteProduct.data = $window.data;
		vmFavoriteProduct.allowAddCart = true;

		// Methods
		vmFavoriteProduct.popupDetail = popupDetail;
		vmFavoriteProduct.addToCart = addToCart;
		vmFavoriteProduct.decreaseCart = decreaseCart;
		vmFavoriteProduct.getCart = getCart;
		vmFavoriteProduct.checkDateProduct = checkDateProduct;
		vmFavoriteProduct.checkImgOld = apiProductSvc.checkImgOld;
		vmFavoriteProduct.addToCartGA = apiProductSvc.addToCartGA;


		//Init
		angular.element('#mod-user-wishlist #hide1').removeClass('hide');
		// vmFavoriteProduct.tableParams = new NgTableParams({ count: 1 }, {counts: [], dataset: vmFavoriteProduct.data});

		function popupDetail(slug, id) {
			$window.history.pushState(null, "title", "/san-pham/" + slug + '-' + id);

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: settings.services.webUrl + '/modules/web-product/view/client/popup/detail-product/view.html',
				controller: 'popupProductDetail',
				controllerAs: 'vmPopProDe',
				resolve: {
					product: function () {
						return angular.copy({
							slug: slug,
							id: id
						});
					},
				}
			});

			modalInstance.result.then(function (resp) {
				$window.history.back();
			}, function () {
				$window.history.back();
			});
		}

		function getCart(product) {
			if ($rootScope.Cart) {
				try {
					product.cart = $rootScope.Cart.items.find(function (item) {
						return product._id == item.id_product;
					});
				} catch(error) {
					product.cart = apiProductSvc.findByIdProduct($rootScope.Cart.items, product._id);
				}
				vmFavoriteProduct.allowAddCart = true;
            }
			return product.cart;
		}

		
		function addToCart(id) {
            if (vmFavoriteProduct.allowAddCart) {
                vmFavoriteProduct.allowAddCart = false;
                apiProductSvc.addToCart(id, function (resp) {
                    getCart(resp);
                })
            }
        }

		

		function decreaseCart(id, quantity) {
			// console.log(id);
            apiProductSvc.decreaseCart(id, quantity, function (resp) {
                getCart(resp);
            })
        }

		function checkDateProduct(end_date) {
			if (end_date) {
				end_date = moment(end_date);
				return moment().isBefore(end_date)
			}
			else {
				return true;
			}
		}
		//End func
	}
})();
; (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('changePassCtrl', changePassCtrl);

	function changePassCtrl($scope, $rootScope, $state, $window, $bzPopup, authSvc) {
		var vmChangePass = this;

		//Vars
		vmChangePass.formData = {};
		vmChangePass.submitted = false;
		vmChangePass.lockForm = false;
		// Methods
		vmChangePass.changePass = changePass;
		//Init
		// angular.element('#vmChangePass-hide1').removeClass('hidden');

		function changePass(isValid) {

			vmChangePass.submitted = true;
			vmChangePass.lockForm = true;

			if (isValid) {
				authSvc.postChangePass(vmChangePass.formData).then(function (resp) {
					$bzPopup.toastr({
						type: 'success',
						data: {
							title: "Thành công",
							message: "Đổi mật khẩu thành công"
						}
					});
					authSvc.siteLogout();
					$window.location.href = '/';
				}).catch(function (err) {
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: "Lỗi",
							message: err.data.message
						}
					});
					vmChangePass.lockForm = false;
				});
			}
			else {
				vmChangePass.submitted = true;
				vmChangePass.lockForm = false;
			}
		}


		//End func
	}
})();
var productDetail = (function () {
	'use strict';

	angular
		.module('bzProduct')
		.controller('productDetailCtrl', productDetailCtrl);

	function productDetailCtrl($scope, $rootScope, $window, orderApiSvc, userSvcApi, apiProductSvc, authSvc) {
		// Vars
		var vmProDe = $scope;
		vmProDe.data = $window.data;
		vmProDe.credentials = $window.credentials;
		vmProDe.allowAddCart = true;
		vmProDe.monthPro = [];
		vmProDe.relativePro = [];
		vmProDe.showDetailContent = false;

		// Methods
		vmProDe.popProDetail = apiProductSvc.popupDetailPro;
		vmProDe.addToCartGA = apiProductSvc.addToCartGA;
		vmProDe.addToCart = addToCart;
		vmProDe.decreaseCart = decreaseCart;
		vmProDe.findPro = findPro;
		vmProDe.addFavoriteProduct = addFavoriteProduct;
		vmProDe.removeFavoriteProduct = removeFavoriteProduct;
		vmProDe.checkDueDate = checkDueDate;
		vmProDe.login = login;
		vmProDe.showDetail = showDetail;

		vmProDe.$on('Cart:getCart', getCart);

		angular.element('.share-section').removeClass('hidden');
		init();

		/*FUNCTION*/
		function init() {
			vmProDe.detail_infor = $('#text-detail')[0].innerHTML;
			setTimeout(function () {
				angular.element('#mod-detail .col-xs-11.col-left .row').removeAttr("style");
				angular.element('#mod-detail .col-xs-11.col-left .row.text-center').addClass('hidden');

				// Eff show more detail product
				var height_detail = angular.element('#mod-detail #text-detail').height();
				if (height_detail > 350) {
					vmProDe.showDetailContent = true;
					vmProDe.detailContent = 'hideContent';
					vmProDe.detailContentStyle = {
						'overflow': 'hidden',
						'max-height': '350px'
					};
				}
			}, 100);
		}

		function addToCart(id) {
			if (vmProDe.allowAddCart) {
				vmProDe.allowAddCart = false;
				apiProductSvc.addToCart(id, function (resp) {
					getCart();
				})
			}
		}

		function decreaseCart(id, quantity) {
			apiProductSvc.decreaseCart(id, quantity, function (resp) {
				getCart();
			})
		}

		function getCart() {
			if ($rootScope.Cart.items) {
				try {
					vmProDe.data.product.cart = $rootScope.Cart.items.find(function (item) {
						return vmProDe.data.product._id == item.id_product;
					});
					if (vmProDe.monthPro) {
						vmProDe.monthPro = vmProDe.monthPro.map(function (item) {
							return {
								id_product: item.id_product,
								cart: $rootScope.Cart.items.find(function (cart) {
									return item.id_product == cart.id_product;
								})
							}
						});
					}

					if (vmProDe.relativePro) {
						vmProDe.relativePro = vmProDe.relativePro.map(function (item) {
							return {
								id_product: item.id_product,
								cart: $rootScope.Cart.items.find(function (cart) {
									return item.id_product == cart.id_product;
								})
							}
						});
					}
				} catch (error) {
					vmProDe.data.product.cart = apiProductSvc.findByIdProduct($rootScope.Cart.items, vmProDe.data.product._id);

					if (vmProDe.monthPro) {
						var tmp_monthPro = [];
						for (var index = 0; index < vmProDe.monthPro.length; index++) {
							var element = vmProDe.monthPro[index];
							if (element) {
								vmProDe.monthPro[index] = findPro(element.id_product);
							}
						}
					}

					if (vmProDe.relativePro) {
						var tmp_monthPro = [];
						for (var index = 0; index < vmProDe.relativePro.length; index++) {
							var element = vmProDe.relativePro[index];
							if (element) {
								vmProDe.relativePro[index] = findPro(element.id_product);
							}
						}
					}
				}
			}
			angular.element('.button').removeClass('hidden');
			vmProDe.allowAddCart = true;
		}

		function findPro(id) {
			var cart;
			try {
				cart = $rootScope.Cart.items.find(function (item) {
					return item.id_product == id;
				});
			} catch (error) {
				cart = apiProductSvc.findByIdProduct($rootScope.Cart.items, id);
			}
			return {
				id_product: id,
				cart: cart
			}
		}

		function addFavoriteProduct() {
			vmProDe.data.user.favorite_product.push(vmProDe.data.product._id);
			userSvcApi.updateFavoriteProduct(vmProDe.data.user, vmProDe.data.user._id).then(function (resp) {
			}).catch(function (err) {
				console.log(err);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi',
						message: 'Có lỗi. Hãy thử lại'
					}
				});
				var index = vmProDe.data.user.favorite_product.indexOf(vmProDe.data.product._id);
				if (index != -1) {
					vmProDe.data.user.favorite_product.splice(index, 1);
				}
			})
		}

		function removeFavoriteProduct() {
			var index = vmProDe.data.user.favorite_product.indexOf(vmProDe.data.product._id);
			vmProDe.data.user.favorite_product.splice(index, 1);
			userSvcApi.updateFavoriteProduct(vmProDe.data.user, vmProDe.data.user._id).then(function (resp) {
			}).catch(function (err) {
				console.log(err);
				$bzPopup.toastr({
					type: 'error',
					data: {
						title: 'Lỗi',
						message: 'Có lỗi. Hãy thử lại'
					}
				});
				vmProDe.data.user.favorite_product.push(vmProDe.data.product._id);
				if (index != -1) {
					vmProDe.data.user.favorite_product.splice(index, 1);
				}
			})
		}

		function checkDueDate(end_date) {
			if (end_date) {
				end_date = moment(end_date);
				return moment().isBefore(end_date)
			}
			else {
				return true;
			}
		}

		function showDetail() {
			if (vmProDe.detailContent == 'hideContent') {
				vmProDe.detailContent = 'showContent';
				vmProDe.detailContentStyle = {
					'max-height': 'auto',
				};
			}
			else {
				$('#text-detail').html(vmProDe.detail_infor);
				vmProDe.detailContent = 'hideContent';
				vmProDe.detailContentStyle = {
					'overflow': 'hidden',
					'max-height': '350px'
				};
			}
		}

		function login() {
			authSvc.popLogin();
		}
	}
})();

var category = (function () {
	'use strict';

	angular
		.module('bzProduct')
		.controller('categoryCtrl', categoryCtrl);

	function categoryCtrl($scope, $window, $location, $uibModal, $rootScope, webProductSvc, orderApiSvc, apiProductSvc) {
		// Vars
		var vmCategory = $scope;
		vmCategory.ga_category = $window.ga_category;
		vmCategory.sortListGa = ['ClickSortSanPhamNoiBat', 'ClickSortSanPhamBanChay', 'ClickSortSanPhamKhuyenMai'];
		vmCategory.sort_tag = $location.search().sort || '0';
		vmCategory.queries = [];
		vmCategory.allowAddCart = true;
		vmCategory.search = $location.search().q;
		vmCategory.tagProcessingsTmp = $location.search().filter ? $location.search().filter.split('.') : [];
		vmCategory.tagProcessings = $window.tag_processing.map(function (item, key) {
			if (vmCategory.tagProcessingsTmp.indexOf(key.toString()) != -1) {
				return true;
			}
			return false;
		});

		// For event scroll show more
		vmCategory.countScroll = 1;

		vmCategory.milestone = [20, 16, 16]; // Số sản phẩm show mỗi lần scroll
		vmCategory.productsShowDone = 16; // Số sản phẩm show khi scroll hết số lần scroll
		vmCategory.milestoneShow = 3; // Số lần scroll không hiện nút show thêm sản phẩm
		// For test event scroll, comment when done
		// vmCategory.milestone = [4, 4, 4];
		// vmCategory.productsShowDone = 4;
		// vmCategory.milestoneShow = 3;

		vmCategory.sumProductShow = vmCategory.milestone[0];
		vmCategory.products_length = $window.products_length;

		// Methods
		// vmCategory.countTag = countTag;
		vmCategory.sortTag = sortTag;
		vmCategory.popupDetail = apiProductSvc.popupDetailPro;
		vmCategory.showMoreProduct = showMoreProduct;
		vmCategory.filterTag = filterTag;
		vmCategory.reloadPage = reloadPage;

		vmCategory.$on('Cart:getCart', getCart);
		$(window).scroll(showMoreEvent);
		filterTag();

		/*FUNCTION*/
		angular.element('#mod-category .button-view-more').removeClass('hidden');
		angular.element('#mod-category .take-cart').removeClass('hidden');
		angular.element('#mod-category #product-list').removeClass('hidden');
		stickySidebarCategory();

		function stickySidebarCategory() {
			angular.element('#mod-category .col-left').stick_in_parent().on("sticky_kit:stick", function (e) {
				$(this).parent().find('.col-left').css('margin-top', '80px');
			}).on("sticky_kit:bottom", function (e) {
				$(this).parent().css('position', 'static');
			}).on("sticky_kit:unstick", function (e) {
				$(this).parent().find('.col-left').css('margin-top', '');
			});
		}

		function filterTag() {
			vmCategory.filter = [];
			vmCategory.tagProcessings.forEach(function (item, key) {
				if (item) vmCategory.filter.push(key);
			});
		}

		function sortTag() {
			helperJsCustom.GA('send', 'event', vmCategory.ga_category, vmCategory.sortListGa[parseInt(vmCategory.sort_tag)], '');
		}

		function reloadPage() {
			var query = '';
			if (vmCategory.search) {
				vmCategory.queries.push({
					type: 'q',
					value: vmCategory.search
				})
			}
			vmCategory.queries.push({
				type: 'sort',
				value: vmCategory.sort_tag
			})
			if (vmCategory.filter.length > 0) {
				vmCategory.queries.push({
					type: 'filter',
					value: vmCategory.filter.join('.')
				})
			}
			vmCategory.queries.forEach(function (item, key) {
				if (key != 0) query += '&';
				query += item.type + '=' + item.value;
			})
			if (query.length > 0) {
				window.location.href = settingJs.configs.webUrl + $location.path() + '?' + query;
			}
		}

		function countTag(id_tag) {
			var countTag = 0;
			vmCategory.products_list.forEach(function (product) {
				var tag = product.tag_processing.find(function (tag) {
					return tag.id_tag == id_tag;
				});
				if (tag) return countTag++;
			});
			return countTag;
		}

		function getCart() {
			if ($rootScope.Cart) {
				vmCategory.cartDone = true;
			}
		}

		function showMoreProduct() {
			var lazy_hide = $("#mod-category #product-list .col-xs-6.ng-hide .image.lazy");
			vmCategory.sumProductShow += vmCategory.productsShowDone;
			lazy_hide.lazyload({ effect: "fadeIn" });
			$('#mod-category .col-left').css({ 'position': 'fixed', 'top': '0' });
		}

		function showMoreEvent(event) {
			var footer_height = $('#mod-footer').height();
			var header_height = $('#header').height();
			var document_height = $(document).height();
			var end_products_list = (document_height - footer_height - header_height - 1000);
			if ($(this).scrollTop() > end_products_list && vmCategory.countScroll <= vmCategory.milestoneShow) {
				vmCategory.sumProductShow = 0;
				for (var index = 0; index < vmCategory.countScroll; index++) {
					var element = vmCategory.milestone[index];
					vmCategory.sumProductShow += vmCategory.milestone[index];
				}
				vmCategory.countScroll++;
				vmCategory.$apply();
			};
		}
	}
})();

var orderWebCtrl = (function () {
    'use strict';

    angular
        .module('bzWebOrder')
        .controller('orderWebCtrl', orderWebCtrl);

    function orderWebCtrl($scope, $window, $rootScope, bzResourceSvc, orderWebSvc, orderApiSvc, $bzPopup, apiProductSvc, authSvc, $uibModal, bzUtilsSvc) {
        var vmWebOrder = this;

        // VARS
        vmWebOrder.setQuantity = setQuantity;
        vmWebOrder.deleteProductInCart = deleteProductInCart;
        vmWebOrder.deleteCart = deleteCart;

        vmWebOrder.checkCoupon = checkCoupon;
        vmWebOrder.cancelCoupon = cancelCoupon;
        vmWebOrder.applyCoupon = applyCoupon;
        vmWebOrder.onEnterCoupon = onEnterCoupon;

        vmWebOrder.onSelectShippingAddress = onSelectShippingAddress;
        vmWebOrder.showFormAddressDetails = showFormAddressDetails;
        vmWebOrder.getShippingFee = getShippingFee;
        vmWebOrder.setShippingFee = setShippingFee;

        vmWebOrder.login = login;
        vmWebOrder.showDetailProduct = showDetailProduct;
        vmWebOrder.checkDueDateProduct = checkDueDateProduct;
        vmWebOrder.caculatingOnSaleAffternoon = caculatingOnSaleAffternoon; // tính tiền khuyến mãi cho các sản phẩm onsale buổi chiều
        vmWebOrder.totalNotOnSale = totalNotOnSale; // tính tổng tiền sản phẩm không onsale

        vmWebOrder.sendOrder = sendOrder;

        vmWebOrder.imgThumbProductDir = settingJs.configs.uploadDirectory.thumb_product || '/files/thumb_image/product_image/';
        vmWebOrder.sendingOrder = false; // disable button 'ĐẶT HÀNG NGAY'

        vmWebOrder.listIdCateOnsaleAffternoon = []; // List id category được apply onsale buổi chiều
        vmWebOrder.listCateException = [];          // List id category KHÔNG được apply onsale buổi chiều

        vmWebOrder.openPageCheckout = openPageCheckout;
        // Default init value
        vmWebOrder.data = {
            isLogined: false,
            freeShip: 0,                // free ship for order (1) noi thanh hoac (2) ngoai thanh
            firstOrder: false,          // khuyen mai % cho don hang dau tien
            submitted: false,
            showFormAddressDetails: false,
            shipping_address: {         // thông tin giao hàng
                id: '',
                name: '',
                phone: '',
                district: '',
                address_detail: '',
                id_shipping_fee: '',
                vocative: 'Anh'
            },
            shipping_fee: 0,            // tiền shipping
            obj_shipping_fee: null,     // obj chứa thông tin nơi shipping
            vocative: '',
            delivery_time: 'CHIEU',
            payment_method: 'COD',
            coupon: {                   //
                id: null,
                error: false,
                code: '',
                hasCounpon: false,      // trạng thái order có coupon hay không
                money: 0,               // Số tiền được khuyến mãi,
                money_coupon: 0,        // biến lưu tạm từ server về
                onLoadingCoupon: false,
                coupon: null,           // obj chứa thông tin coupon
            },
            user: null,                 // user đang đăng nhập
            list_shipping_address: [],  // danh sách địa chỉ giao hàng của user
            list_shipping_fee: []       // danh sách các quận huyện
        };

        // Init
        getUser();
        getCart();
        getConfigTextOrder();
        getConfigFreeShip();
        cfOrderAffernoon();

        angular.element('#mod-checkout').removeClass('hidden');
        angular.element('#mod-card').removeClass('hidden');
        angular.element('#mod-cart-moblie').removeClass('hidden');

        // METHOD
        vmWebOrder.checkImgOld = apiProductSvc.checkImgOld;

        function getShippingFee() {
            orderWebSvc.getShippingFee().then(function (resp) {
                if (resp.success) {
                    vmWebOrder.data.list_shipping_fee = resp.data;
                    setShippingFee();
                    checkCoupon();
                }
            });

            // Tracking Facebook Pixel
            if (typeof (fbq) != 'undefined')
                fbq('track', 'InitiateCheckout');
        }

        function getShippingAddress() {
            orderWebSvc.getShippingAddressUser().then(function (resp) {
                if (resp.success) { //user was Logined

                    vmWebOrder.data.list_shipping_address = resp.list_shipping_address;

                    if (resp.list_shipping_address.length > 0) {
                        vmWebOrder.data.shipping_address.id = vmWebOrder.data.list_shipping_address[0]._id;
                        vmWebOrder.data.shipping_address.name = vmWebOrder.data.list_shipping_address[0].name;
                        vmWebOrder.data.shipping_address.phone = vmWebOrder.data.list_shipping_address[0].phone;
                        vmWebOrder.data.shipping_address.address_detail = vmWebOrder.data.list_shipping_address[0].address_detail;
                        vmWebOrder.data.shipping_address.id_shipping_fee = vmWebOrder.data.list_shipping_address[0].id_shipping_fee._id;
                        vmWebOrder.data.shipping_address.district = vmWebOrder.data.list_shipping_address[0].id_shipping_fee.district;
                        vmWebOrder.data.shipping_address.vocative = vmWebOrder.data.list_shipping_address[0].vocative;

                        // khi set thông tin giao hàng thành công. set lại thông tin giao hàng
                        setShippingFee();
                    }
                    else {
                        vmWebOrder.data.shipping_address.name = vmWebOrder.data.user.name;
                        vmWebOrder.data.shipping_address.phone = vmWebOrder.data.user.phone;
                    }
                }
            });

        }

        function setShippingFee() {
            vmWebOrder.data.shipping_fee = 0;
            var flagFreeShipTemp = false;

            // Tổng tiền sau khi trừ các khuyến mãi
            var totalTemp = (totalNotOnSale() - vmWebOrder.data.coupon.money
                - ((vmWebOrder.data.delivery_time == 'CHIEU')
                    ? ($rootScope.promotionForOrderDeleveryOnAffternoon.type == "PC"
                        ? (($rootScope.promotionForOrderDeleveryOnAffternoon.value / 100) * totalNotOnSale())
                        : $rootScope.promotionForOrderDeleveryOnAffternoon.value)
                    : 0)
                - (vmWebOrder.data.firstOrder
                    ? ($rootScope.promotionForFirstOrder.type == "MN"
                        ? $rootScope.promotionForFirstOrder.value
                        : (($rootScope.promotionForFirstOrder.value / 100) * totalNotOnSale()))
                    : 0));

            vmWebOrder.data.list_shipping_fee.forEach(function (item, index) {
                if ((item._id + '') == (vmWebOrder.data.shipping_address.id_shipping_fee + '')) {
                    vmWebOrder.data.shipping_address.district = item.district;
                    vmWebOrder.data.obj_shipping_fee = item;

                    vmWebOrder.data.shipping_fee = item.fee;
                    if ((item.type == 1 || item.type == '1') && totalTemp >= $rootScope.freeShipUrban.value) {
                        vmWebOrder.data.freeShip = 1;   //mien phi ship noi thanh
                        flagFreeShipTemp = true;
                        vmWebOrder.data.shipping_fee = 0;
                    }

                    if ((item.type == 2 || item.type == '2') && totalTemp >= $rootScope.freeShipSuburb.value) {
                        vmWebOrder.data.freeShip = 2;   //mien phi ship ngoai thanh
                        flagFreeShipTemp = true;
                        vmWebOrder.data.shipping_fee = 0;
                    }
                }
            });
            if (!flagFreeShipTemp) {
                vmWebOrder.data.freeShip = 0;
            }
        }


        /////////// COUPON FUNCTION ///////////
        function onEnterCoupon() {
            vmWebOrder.data.coupon.code = vmWebOrder.data.coupon.code.toUpperCase()
            cancelCoupon();
        }

        function checkCoupon() {
            if (vmWebOrder.data.coupon.code && typeof vmWebOrder.data.coupon.code == 'string') {
                vmWebOrder.data.coupon.disable = true;

                vmWebOrder.data.coupon.onLoadingCoupon = true;

                var data = {
                    shipping_address: vmWebOrder.data.shipping_address,
                    email: vmWebOrder.data.isLogined ? vmWebOrder.data.user.email : '',
                    coupon: vmWebOrder.data.coupon.code,
                    id_shipping_fee: vmWebOrder.data.shipping_address.id_shipping_fee,
                    vocative: vmWebOrder.data.vocative,
                    delivery_time: vmWebOrder.data.delivery_time,
                    payment_method: vmWebOrder.data.payment_method,
                    note: vmWebOrder.data.note
                };
                orderWebSvc.checkCoupon(data, vmWebOrder.data.coupon.code).then(function (resp) {
                    vmWebOrder.data.coupon.onLoadingCoupon = false;
                    if (resp.success) {
                        var total_temp = (($rootScope.Cart.total + vmWebOrder.data.shipping_fee) - resp.money_coupon - ((vmWebOrder.data.delivery_time == 'CHIEU') ? ($rootScope.promotionForOrderDeleveryOnAffternoon.type
                            == "PC" ? (($rootScope.promotionForOrderDeleveryOnAffternoon.value / 100) * $rootScope.Cart.total) : $rootScope.promotionForOrderDeleveryOnAffternoon.value
                        ) : 0) - (vmWebOrder.data.firstOrder ? ($rootScope.promotionForFirstOrder.type == "MN" ? $rootScope.promotionForFirstOrder.value
                            : (($rootScope.promotionForFirstOrder.value / 100) * $rootScope.Cart.total)) : 0))

                        if (total_temp <= 0) {
                            vmWebOrder.data.coupon.error = true;
                            vmWebOrder.data.coupon.message = 'Giá trị đơn hàng không đủ để áp dụng khuyến mãi';
                        } else {
                            vmWebOrder.data.coupon.coupon = resp.coupon;
                            vmWebOrder.data.coupon.money_coupon = resp.money_coupon;
                            vmWebOrder.data.coupon.error = false;


                            // apply coupon
                            applyCoupon(vmWebOrder.data.coupon.coupon);
                        }

                        // applyCoupon(resp.coupon);
                    }
                    else {
                        cancelCoupon();
                        vmWebOrder.data.coupon.error = true;
                        vmWebOrder.data.coupon.message = resp.message;
                    }
                }).catch(function (err) {
                    console.log('coupon', err);
                })
            }
        }

        function applyCoupon(coupon) {
            if (coupon) {
                vmWebOrder.data.coupon.id = coupon._id;
                vmWebOrder.data.coupon.hasCounpon = true;
                vmWebOrder.data.coupon.name = coupon.name;
                vmWebOrder.data.coupon.error = false;
                vmWebOrder.data.coupon.money = vmWebOrder.data.coupon.money_coupon;

                // re check free ship
                setShippingFee();
                // getMoneyCoupon(coupon);
            }
            else {
                vmWebOrder.data.coupon.error = true;
                vmWebOrder.data.coupon.message = 'Thao tác không đúng';
            }
        }

        function cancelCoupon() {
            vmWebOrder.data.coupon.coupon = null;
            // vmWebOrder.data.coupon.code = '';
            vmWebOrder.data.coupon.hasCounpon = false;
            vmWebOrder.data.coupon.id = null;

            vmWebOrder.data.coupon.error = false;
            vmWebOrder.data.coupon.message = null;

            vmWebOrder.data.coupon.name = '';
            vmWebOrder.data.coupon.money = 0;
            vmWebOrder.data.coupon.money_coupon = 0;
            vmWebOrder.data.coupon.disable = false;
        }

        /////////// END COUPON ///////////

        ///////////// CART /////////////
        function getCart() {
            orderApiSvc.getCart().then(function (res) {
                setShippingFee();
                caculatingOnSaleAffternoon();
            }).catch(function (err) {
                console.log('err get cart', err);
            })
        }

        function sendOrder(isInValidFormInfoOrder) {
            helperJsCustom.GA('send', 'event', 'Checkout', 'ClickButtonConfirmOrder', '');
            vmWebOrder.sendingOrder = true;
            vmWebOrder.data.submitted = true;
            // Check user is click button apply coupon
            if (vmWebOrder.data.coupon.code != '' && !vmWebOrder.data.coupon.error && !vmWebOrder.data.coupon.hasCounpon) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Đặt hàng',
                        message: 'Bạn đã nhập coupon nhưng chưa áp dụng. Hãy bấm áp dụng để được khuyến mãi'
                    }
                });
                vmWebOrder.sendingOrder = false;
            }
            else
                if ($rootScope.Cart.total_quantity == 0) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lỗi đặt hàng',
                            message: 'Bạn chưa chọn sản phẩm'
                        }
                    });
                    vmWebOrder.sendingOrder = false;
                }
                else
                    if (vmWebOrder.data.showFormAddressDetails && isInValidFormInfoOrder) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Lỗi đặt hàng',
                                message: 'Vui lòng nhập đầy đủ và đúng thông tin đơn hàng'
                            }
                        });
                        vmWebOrder.sendingOrder = false;
                    }
                    else {
                        var data = {
                            shipping_address: vmWebOrder.data.shipping_address,
                            email: vmWebOrder.data.isLogined ? vmWebOrder.data.user.email : '',
                            coupon: vmWebOrder.data.coupon.id !== null ? vmWebOrder.data.coupon.id : '',
                            coupon_code: vmWebOrder.data.coupon.id !== null ? vmWebOrder.data.coupon.code : '',
                            id_shipping_fee: vmWebOrder.data.shipping_address.id_shipping_fee,
                            vocative: vmWebOrder.data.vocative,
                            delivery_time: vmWebOrder.data.delivery_time,
                            payment_method: vmWebOrder.data.payment_method,
                            note: vmWebOrder.data.note
                        };


                        orderWebSvc.sendOrder(data).then(function (resp) {
                            // Tracking pixel Facebook
                            if (typeof (fbq) != 'undefined')
                                fbq('track', 'Purchase', {
                                    value: resp.total_pay,
                                    currency: 'VND'
                                });

                            // Lưu lại thông tin vào storage cho user chưa đăng nhập
                            if (!vmWebOrder.data.isLogined) {
                                let localData = {
                                    id_user: vmWebOrder.data.user.uid,
                                    email: data.email,
                                    name: data.shipping_address.name,
                                    phone: data.shipping_address.phone,
                                    address_detail: data.shipping_address.address_detail,
                                    vocative: data.shipping_address.vocative,
                                    delivery_time: data.delivery_time,
                                    payment_method: data.payment_method,
                                    id_shipping_fee: data.id_shipping_fee,

                                    id_order: resp.id_order
                                }
                                bzUtilsSvc.setInfoUser(localData);
                            }

                            $window.location.href = '/dat-hang-thanh-cong/' + resp.id_order;

                            // vmWebOrder.sendingOrder = false;
                        }).catch(function (err) {
                            vmWebOrder.sendingOrder = false;
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi đặt hàng',
                                    message: err.data.message
                                }
                            });
                        })
                    }

        }

        function deleteProductInCart(id_product, index) {
            orderApiSvc.deleteProduct(id_product).then(function (resp) {
                // console.log(resp);
            }).catch(function (err) {
                console.log(err);
            })
        }

        function deleteCart() {
            orderApiSvc.orderApiSvc().then(function (resp) { }).catch(function (err) { })
        }

        function setQuantity(id_product, new_qty) {
            orderApiSvc.update('set-quantity', { product: id_product, quantity: new_qty })
                .then(function (resp) {

                    if (resp.success) {
                        cancelCoupon();     // cancel to check again
                        checkCoupon();      // check coupon again
                        setShippingFee();   // check shipping again when update quantity
                    }

                    // Fix disable button Complete Order
                    if ($rootScope.Cart.total_quantity == 0) {
                        vmWebOrder.sendingOrder = true;
                    }
                    else {
                        vmWebOrder.sendingOrder = false;
                    }
                    if (!resp.success)
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Lỗi đặt hàng',
                                message: resp.message
                            }
                        });
                }).catch(function (err) {
                    console.log('Lỗi đặt hàng', err);
                })
        }
        ///////////// END CART /////////////



        ///////////// CONFIG /////////////
        function getUser() {
            vmWebOrder.data.user = $window.user;
            getShippingAddress();
            if (vmWebOrder.data.user.uid !== '') {
                vmWebOrder.data.isLogined = true;
                checkFirtOrderOfUser();

                // remove info local stored
                bzUtilsSvc.removeInfoUser();
            }
            else {
                getInfoLocalStorage();
            }
        }

        function getConfigTextOrder() {
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/config-text')
                .get({}, function (resp) {
                    $rootScope.TextOrderConfig = resp.data;
                },
                function (err) {
                    console.log('err getConfigTextOrder', err);
                });
        }

        function cfOrderAffernoon() {
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/cf-order-affternoon')
                .get({}, function (resp) {
                    $rootScope.promotionForOrderDeleveryOnAffternoon = resp;
                    vmWebOrder.listIdCateOnsaleAffternoon = resp.listCateApply;
                    vmWebOrder.listCateException = resp.listCateException;
                },
                function (err) {
                    console.log('err cfOrderAffernoon', err);
                });
        }

        function getConfigFreeShip() {
            bzResourceSvc.api($window.settings.services.apiUrl + '/order/config-free-ship')
                .get({}, function (resp) {
                    $rootScope.freeShipUrban = resp.Urban;
                    $rootScope.freeShipSuburb = resp.Suburb;
                    setShippingFee(); // when get config from server success set shipping fee again
                },
                function (err) {
                    console.log('err getConfigFreeShip', err);
                });
        }

        function checkFirtOrderOfUser() {
            if (vmWebOrder.data.isLogined && vmWebOrder.data.user.uid) {
                bzResourceSvc.api($window.settings.services.apiUrl + '/order/is-first-order/' + vmWebOrder.data.user.uid)
                    .get({}, function (resp) {
                        vmWebOrder.data.firstOrder = resp.success;
                        if (vmWebOrder.data.firstOrder) {
                            $rootScope.promotionForFirstOrder = resp.config;
                        }
                    },
                    function (err) {
                        // console.log('This is not first order', err);
                    });
            }
        }

        function getInfoLocalStorage() {
            let dataStorage = bzUtilsSvc.getInfoUser();
            if (dataStorage) {
                vmWebOrder.data.shipping_address.phone = dataStorage.phone || '';
                vmWebOrder.data.shipping_address.vocative = dataStorage.vocative || '';
                vmWebOrder.data.shipping_address.district = dataStorage.district || '';
                vmWebOrder.data.shipping_address.name = dataStorage.name || '';
                vmWebOrder.data.shipping_address.id_shipping_fee = dataStorage.id_shipping_fee || '';
                vmWebOrder.data.shipping_address.address_detail = dataStorage.address_detail || '';

                vmWebOrder.data.delivery_time = dataStorage.delivery_time;
                vmWebOrder.data.payment_method = dataStorage.payment_method;


            }
        }
        ///////////// END CONFIG /////////////



        ///////////// HELPER FOR VIEW /////////////
        function login() {
            authSvc.popLogin()
        }

        function checkDueDateProduct(due_date) {
            if (due_date && due_date.end_date) {
                if (Date.parse(due_date.end_date) < Date.now())
                    return true;
            }
            return false;
        }

        // Util Intersection two array
        function intersection(a, b) {
            var t;
            if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter
            return a.filter(function (e) {
                return b.indexOf(e) > -1;
            });
        }

        function caculatingOnSaleAffternoon() {
            var total_tmp = 0; // tổng các sản phầm thuộc category được áp dụng
            $rootScope.Cart.items.forEach(function (item, index) {
                var catesProd = item.product.category.map(function (cat) {
                    return ('' + cat._id);
                });
                if (intersection(catesProd, vmWebOrder.listIdCateOnsaleAffternoon).length > 0 && item.product.id_promotion == null && intersection(catesProd, vmWebOrder.listCateException).length == 0) {
                    let price_prd = item.product.price;
                    if (item.product.id_promotion && item.product.id_promotion.status) {
                        if (item.product.id_promotion.type == 'PC')
                            price_prd = (item.product.price - (item.product.price * (item.product.id_promotion.value / 100)));
                        else
                            price_prd = (item.product.price - item.product.id_promotion.value);
                    }
                    total_tmp += item.quantity * price_prd;
                }
            });
            // console.log(total_tmp)
            return total_tmp;
        };

        function totalNotOnSale() {
            let total_no_onsale = 0;
            $rootScope.Cart.items.forEach(function (item, index) {
                if (item.product.id_promotion == null) {
                    total_no_onsale += item.quantity * item.product.price;
                }
            });
            return total_no_onsale;
        }

        function showDetailProduct(slug, id) {
            apiProductSvc.popupDetailPro(slug, id);
        }

        function showFormAddressDetails(show) {
            if (show) {
                vmWebOrder.data.shipping_address = {
                    id: '',
                    name: '',
                    phone: '',
                    address_detail: '',
                    id_shipping_fee: ''
                };
                vmWebOrder.data.submitted = false; // hide class error for formInfoOrder
            }
            vmWebOrder.data.showFormAddressDetails = show; //true | false
        }

        function onSelectShippingAddress(index) {
            vmWebOrder.data.shipping_address.name = vmWebOrder.data.list_shipping_address[index]._id;
            vmWebOrder.data.shipping_address.name = vmWebOrder.data.list_shipping_address[index].name;
            vmWebOrder.data.shipping_address.phone = vmWebOrder.data.list_shipping_address[index].phone;
            vmWebOrder.data.shipping_address.address_detail = vmWebOrder.data.list_shipping_address[index].address_detail;
            vmWebOrder.data.shipping_address.id_shipping_fee = vmWebOrder.data.list_shipping_address[index].id_shipping_fee ? vmWebOrder.data.list_shipping_address[index].id_shipping_fee._id : null;
            vmWebOrder.data.shipping_address.district = vmWebOrder.data.list_shipping_address[index].id_shipping_fee ? vmWebOrder.data.list_shipping_address[index].id_shipping_fee.district : '';

            vmWebOrder.data.shipping_address.vocative = vmWebOrder.data.list_shipping_address[index].vocative;
            setShippingFee(); // when change shipping address set shipping again
            checkCoupon();
        }

        function openPageCheckout() {

            helperJsCustom.GA('send', 'event', 'CartDetail', 'ClickButtonOrder', '');
            if ($rootScope.Cart.items.length == 0) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Đặt hàng',
                        message: 'Giỏ hàng của bạn chưa có sản phẩm nào'
                    }
                });
            }
            else {
                $window.location.href = '/dat-hang';
            }
        }
    }
})();

var searchCtrl = (function () {
	'use strict';

	angular
		.module('bzWebHome')
		.controller('searchCtrl', searchCtrl);

	function searchCtrl($scope, $window, $timeout, $location, bzResourceSvc, WebSearchSvc, apiProductSvc) {
		// Vars
		var vmSearch = $scope;
		vmSearch.params = $location.search();
		vmSearch.settings = $window.settings;
		vmSearch.imagesDirectory = settingJs.configs.uploadDirectory.thumb_product || '/files/thumb_image/product_image/';
		vmSearch.imagesProductDirectory = settingJs.configs.uploadDirectory.product || '/files/product_image/';
		vmSearch.classSearchList = '';

		// Method
		vmSearch.init = init;
		vmSearch.submit = submit;
		vmSearch.link = link;
		vmSearch.searchResult = searchResult;
		vmSearch.checkImgOld = apiProductSvc.checkImgOld;
		vmSearch.showList = showList;
		vmSearch.hideList = hideList;

		// Functions

		function init(section) {
			vmSearch.search = vmSearch.params.q;
			vmSearch.section = section;
			$(section).find('.search-input').removeAttr('disabled').autocomplete({
				source: function (request, response) {

				},
				minLength: 1,
			});
			$(section).find('#error-section').removeClass('hidden');
			$(section).find('.search-section').removeClass('hidden');
			$(section).removeClass('overflow-hide');
		}

		function submit(form) {
			helperJsCustom.GA('send', 'event', 'Header', 'ClickSearchButton', '');
			if (!form.$valid) {
				$scope.search_input = "error";
				return;
			}
			form.$submitted = false;
			if (vmSearch.search_selected.type == 0) {
				WebSearchSvc.addSearch({
					search: sanitizeHtml(vmSearch.search_selected.text)
				}).then(function (resp) {
					if (resp.success) {
						$window.location.href = $window.settings.services.webUrl + '/tim-kiem?q=' + encodeURI(sanitizeHtml(vmSearch.search));
					} else {
						$scope.search_input = "error";
						return;
					}
				})
			}
			if (vmSearch.search_selected.type == 1) {
				var tmp = vmSearch.search_selected;
				$window.location.href = $window.settings.services.webUrl + '/san-pham/' + tmp.slug + '-' + tmp.id;
			}

		}

		function link(search) {
			WebSearchSvc.addSearch({
				search: search
			}).then(function (resp) {
				if (resp.success) {
					$window.location.href = $window.settings.services.webUrl + '/tim-kiem?q=' + encodeURI(sanitizeHtml(search));
				}
			})
		}

		function searchResult(form) {
			form.$submitted = false;
			vmSearch.searching = true;
			$scope.search_input = "";

			WebSearchSvc.search({ q: vmSearch.search }).then(function (resp) {
				vmSearch.searchTxt = resp.searchList;
				vmSearch.productTxt = resp.productList;
				vmSearch.searching = false;
				vmSearch.index_search = 0;
				$timeout(function () {
					createSelectArr(vmSearch.section);
					updownSelect(vmSearch.section);
				}, 100);
			});
		}

		function updownSelect(section) {
			var list_select = $(section).find('.searching .select'),
				input_search = $(section).find('.search-input');
			if (vmSearch.searchTxt.length > 0 || vmSearch.productTxt.length > 0) {
				input_search.on('keyup', (function (e) {
					// When Press down button
					if (e.keyCode == 40) {
						if (vmSearch.index_search <= vmSearch.selectArr.length - 3) {
							vmSearch.index_search++;
						}
					}
					// When Press Up button
					if (e.keyCode == 38) {
						if (vmSearch.index_search >= 0) {
							vmSearch.index_search--;
						}
					}

					// Envent when press updow
					if (e.keyCode == 40 || e.keyCode == 38) {
						list_select.removeClass('selected_item');
						var selected = vmSearch.index_search;
						var item_selected = vmSearch.selectArr[selected + 1];
						vmSearch.search = item_selected.text;
						vmSearch.search_selected = item_selected;
						$scope.$apply();
						$(list_select[selected]).addClass('selected_item');
					}
				}));
			};
		}

		// Reset input search
		function createSelectArr(section) {
			var list_select = $(section).find('.searching .select'),
				input_search = $(section).find('.search-input');
			input_search.unbind("keyup");
			list_select.removeClass('selected_item');

			// Create list select arr
			vmSearch.selectArr = [{ text: vmSearch.search, type: 0 }]
				.concat(vmSearch.searchTxt.map(function (item) {
					return {
						text: item.keyword,
						type: 0
					}
				})).concat(vmSearch.productTxt.map(function (item) {
					return {
						text: item.name,
						type: 1,
						slug: item.slug,
						id: item._id
					}
				}));

			// Reset search
			vmSearch.index_search = -1;
			vmSearch.search_selected = vmSearch.selectArr[0];
		}

		function showList() {
			vmSearch.classSearchList = '';
		}

		function hideList() {
			$timeout(function () {
				vmSearch.classSearchList = 'hidden';
			}, 150);
		}
	}
})();
var menuCtrl = (function () {
    'use strict';

    angular
        .module('bzWebHome')
        .controller('menuCtrl', menuCtrl);

    function menuCtrl($scope, $window, $uibModal, $rootScope, orderApiSvc, apiProductSvc, webHomeSvc) {
        // Vars
        var vmM = $scope;
        vmM.showCount = false;

        // Method
        vmM.findCategory = findCategory;
        init();

        // Functions
        function init() {
            webHomeSvc.getMenu().then(function (resp) {
                vmM.listCategory = resp.data;
                vmM.showCount = true;
            })
        }

        function findCategory(id) {
            var category = vmM.listCategory.find(function (item) {
                return item.id == id;
            })
            return '(' + category.product_count + ')';
        }
    }
})();

var homeCtrl = (function () {
	'use strict';

	angular
		.module('bzWebHome')
		.controller('homeCtrl', homeCtrl);

	function homeCtrl($scope, $window, $uibModal, $rootScope, orderApiSvc, apiProductSvc, webHomeSvc) {
		// Vars
		var vmHome = $scope;
		vmHome.cartDone = false;

		// Method
		vmHome.popDetPro = apiProductSvc.popupDetailPro;

		vmHome.$on('Cart:getCart', getCart);
		angular.element('.choose-bottom').removeClass('hidden');

		// Functions

		function getCart(event, data) {
			if ($rootScope.Cart) {
				vmHome.cartDone = true;
			}
		}
	}
})();

var blogWebCtrl = (function () {
    'use strict';

    angular
        .module('bzWebBlog')
        .controller('blogWebCtrl', blogWebCtrl);

    function blogWebCtrl($scope, $window, blogWebSvc, bzResourceSvc) {
        var vmBlogWeb = this;

        // VARS
        vmBlogWeb.imgDir = settingJs.configs.uploadDirectory.blog || '/files/images/blog_image/';
        vmBlogWeb.tags = [];

        vmBlogWeb.Domain = settingJs.configs.webUrl;
    }
})();

; (function () {
	'use strict';

	angular
		.module('bzAuth')
		.controller('resetPassCtrl', resetPassCtrl);

	function resetPassCtrl($scope, $rootScope, $state,$window, $bzPopup,  authSvc) {
		var vmResetPass = this;

		//Vars
		vmResetPass.formData = {};
		vmResetPass.submitted = false;
		vmResetPass.lockForm = false;
		vmResetPass.formData.token = $window.data.resetPasswordToken;
		// Methods
		vmResetPass.resetPass = resetPass;

		//Init
		angular.element('#hide1').removeClass('hidden');
	
		function resetPass(isValid) {
			vmResetPass.submitted = true;
			vmResetPass.lockForm = true;
			if(isValid){
				authSvc.resetPassword(vmResetPass.formData).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: "Thành công",
							message: "Đổi mật khẩu thành công"
						}
					});
					$window.location.href = '/';
				}).catch(function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: "Lỗi",
							message: err.data.message
						}
					});
					vmResetPass.lockForm = false;
				});
			}
			else{
				vmResetPass.submitted = true;
				vmResetPass.lockForm = false;
			}
		}
		

		//End func
	}
})();
; (function () {
	'use strict';

	angular
		.module('bzAuth')
		.controller('authCtrl', authCtrl);

	function authCtrl($scope, $state, $window, $bzPopup, bzResourceSvc, authSvc ,$uibModal) {
		var vmAuth = this;

		//Vars
		vmAuth.user = {};
		// vmAuth.imagesDirectory = settingJs.configs.uploadDirectory.avatar || '/files/avatar_image/' ;
		// Methods
		// vmAuth.siteLogin = siteLogin;
		vmAuth.showPopupLogin = showPopupLogin;
		vmAuth.getInfo = getInfo;
		vmAuth.showPopupRegister = showPopupRegister;
		vmAuth.popForgotPass = popForgotPass;
		vmAuth.logout = logout;

		// Init
		getInfo();
		
		initFormData();
		angular.element('#sign-in-out-mb').removeClass('hidden');
		angular.element('#sign-in-out-desk').removeClass('hidden');
		angular.element('.avatar').removeClass('hidden');

		function initFormData() {
			vmAuth.lockForm = false;
			vmAuth.submitted = false;
			vmAuth.formData = {
				email: '',
				password: ''
			};
		}
		// function siteLogin(isValid) {
		// 	vmAuth.submitted = true;

		// 	if (!vmAuth.lockForm && isValid) {
		// 		vmAuth.lockForm = true;

		// 		$scope.pageMethods.authSvc.siteLogin(vmAuth.formData, function (resp) {
		// 			$window.location.href = '/admin';
		// 			vmAuth.lockForm = false;
		// 		}, function (err) {
		// 			$bzPopup.toastr({
		// 				type: 'error',
		// 				data: {
		// 					title: 'Login',
		// 					message: err.data.message
		// 				}
		// 			});

		// 			vmAuth.lockForm = false;
		// 		});
		// 	}
		// }
		
		function getInfo() {
			if($window.user.uid) {
				var id = $window.user.uid;
				bzResourceSvc.api($window.settings.services.apiUrl + '/user/profile/:id', { id: '@id' })
					.get({ id: 'id' }, function (resp) {
						vmAuth.user = resp;
						var name  = vmAuth.user.name;
						var listname = name.split(" ");
						vmAuth.name = listname[listname.length -1];
						vmAuth.urlAvatar = settings.services.webUrl + settingJs.configs.uploadDirectory.avatar + resp.avatar;
					});
			}

		}

		function showPopupLogin() {
			// var url = settings.services.webUrl + '/khach-hang/thong-tin-tai-khoan';
			authSvc.popLogin();
		}

		function showPopupRegister() {
			authSvc.popRegister();
		}

		function popForgotPass() {
			authSvc.popForgotPass();
		}

		function logout() {
			authSvc.siteLogout(function (resp) {
			});
		}

	}
})();

(function () {
    'use strict';
    angular
        .module('bzApp')
        .directive('productOrderBtn', productOrderBtn);

    function productOrderBtn($window, $rootScope, apiProductSvc) {
        var template = '';
        template += '<div data-ng-if="product.qty_in_stock > 0">'
            + '   <button class="btn btn-primary" data-ng-if="!product.quantity || product.quantity == 0" ng-click="addToCart(); addToCartGA({ _id:product.id, price: product.price });">'
            + '       <img data-ng-src="{{linkAssets}}frontend/images/card-button.svg" class="img-reponsive" alt="card-button.svg" data-ng-if="!showImage">'
            + '       Bỏ vào giỏ'
            + '   </button>'
            + '   <div class="soluong show" data-ng-if="product.quantity && product.quantity > 0">'
            + '       <img data-ng-src="{{linkAssets}}frontend/images/icon-giam.svg" data-ng-if="product.quantity > 0" class="img-reponsive" alt="" ng-click="decreaseCart()">'
            + '       <img data-ng-src="{{linkAssets}}frontend/images/icon-giam.svg" data-ng-if="product.quantity == 0" class="img-reponsive disabled" alt="">'
            + '       <span>{{product.quantity}}</span>'
            + '       <img data-ng-src="{{linkAssets}}frontend/images/icon-tang.svg" data-ng-if="product.quantity < product.qty_in_stock" class="img-reponsive" alt="" ng-click="addToCart()">'
            + '       <img data-ng-src="{{linkAssets}}frontend/images/icon-tang.svg" data-ng-if="product.quantity >= product.qty_in_stock" class="img-reponsive disabled" alt="">'
            + '   </div>'
            + '</div>'
            + '<div data-ng-if="product.qty_in_stock == 0">'
            + '   <button class="btn btn-primary" disabled>Sắp có hàng</button>'
            + '</div>';

        return {
            restrict: 'AE',
            template: template,
            link: function ($scope, element, $attrs) {
                // Variable
                $scope.pageGa = $window.pageGa;
                $scope.linkAssets = settingJs.configs.webUrl + '/assets/';
                $scope.disabedOrder = true;
                $scope.product = JSON.parse($attrs.product);
                $scope.showImage = $attrs.showImage;

                // Methods
                $scope.addToCart = addToCart;
                $scope.decreaseCart = decreaseCart;
                $scope.addToCartGA = apiProductSvc.addToCartGA;
                $scope.$on('Cart:getCart', getCart);

                element.addClass('take-cart');
                getCart();

                function getCart(event, data) {
                    try {
                        var find_cart = $rootScope.Cart.items.find(function (item) {
                            return item.id_product == $scope.product.id
                        })
                    } catch (error) {
                        var find_cart = apiProductSvc.findByIdProduct($rootScope.Cart.items, $scope.product.id)
                    }
                    if (find_cart) {
                        $scope.product.quantity = find_cart.quantity;
                    }
                    $scope.disabedOrder = true;
                }

                function addToCart() {
                    helperJsCustom.GA('send', 'event', $scope.pageGa, 'ClickIncreaseQuantityItem', '');
                    if ($scope.disabedOrder) {
                        $scope.disabedOrder = false;
                        apiProductSvc.addToCart($scope.product.id, function (resp) {
                            getCart();
                        })
                    }
                }

                function decreaseCart() {
                    helperJsCustom.GA('send', 'event', $scope.pageGa, 'ClickDecreaseQuantityItem', '');
                    if ($scope.disabedOrder) {
                        $scope.disabedOrder = false;
                        apiProductSvc.decreaseCart($scope.product.id, $scope.product.quantity, function (resp) {
                            getCart();
                        })
                    }
                }
            }
        };
    }
})();
var category = (function () {
    'use strict';

    angular
        .module('bzProduct')
        .filter('productTag', productTag);

    function productTag() {
        return function (products, id_tags) {
            var out = [];
            if (id_tags) {
                var isAllFalse = Object.keys(id_tags).map(function(k) { return id_tags[k] }).find(function(item){
                    return item;
                });
                id_tags = isAllFalse ? id_tags : undefined;
            }

            if (!id_tags) {
                return products;
            }
            products.forEach(function (product) {
                var findTag = product.tag_processing.find(function (tag) {
                    return id_tags[tag.id_tag];
                })
                if (findTag) {
                    out.push(product);
                }
            })
            return out;
        }
    }
})();

var search = (function () {
    'use strict';

    angular
        .module('bzWebHome')
        .filter('filterKeyword', filterKeyword)
        .filter('filterProduct', filterProduct);

    function filterKeyword() {
        return function (keywords, text) {
            if (text.search && keywords) {
                var out = keywords.filter(function (item) {
                    return item.keyword.indexOf(text.search) != -1;
                })
                return out;
            }
            return keywords;
        }
    }

    function filterProduct() {
        return function (products, text) {
            if (text.search && products) {
                var out = products.filter(function (item) {
                    return item.name.indexOf(text.search) != -1;
                })
                return out;
            }
            return products;
        }
    }
})();
